(* Content-type: application/vnd.wolfram.cdf.text *)

(*** Wolfram CDF File ***)
(* http://www.wolfram.com/cdf *)

(* CreatedBy='Mathematica 13.3' *)

(***************************************************************************)
(*                                                                         *)
(*                                                                         *)
(*  Under the Wolfram FreeCDF terms of use, this file and its content are  *)
(*  bound by the Creative Commons BY-SA Attribution-ShareAlike license.    *)
(*                                                                         *)
(*        For additional information concerning CDF licensing, see:        *)
(*                                                                         *)
(*         www.wolfram.com/cdf/adopting-cdf/licensing-options.html         *)
(*                                                                         *)
(*                                                                         *)
(***************************************************************************)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[      1088,         20]
NotebookDataLength[   1301190,      23964]
NotebookOptionsPosition[   1301727,      23962]
NotebookOutlinePosition[   1302158,      23979]
CellTagsIndexPosition[   1302115,      23976]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 StyleBox[
  DynamicModuleBox[{$CellContext`pts$$ = {{0, 0, 0}, {0., 0., 
    57.53118515035173}, {83.42796287587935, 0., 0.}, {-78.62796287587935, 0., 
    0.}, {0., 71.42796287587935, 0.}, {0., -81.02796287587935, 0.}, {
    49.94237030070347, 49.94237030070347, 
    49.94237030070347}, {-49.142370300703476`, 49.142370300703476`, 
    49.142370300703476`}, {49.142370300703476`, -49.142370300703476`, 
    49.142370300703476`}, {-45.54237030070348, -45.54237030070348, 
    45.54237030070348}, {36.17864191725289, 
    36.17864191725289, -36.17864191725289}, {-33.02205376159643, 
    33.02205376159643, -33.02205376159643}, {
    35.61864191725289, -35.61864191725289, -35.61864191725289}, \
{-33.09864191725289, -33.09864191725289, -33.09864191725289}, {0., 
    61.33290734644887, 61.33290734644887}, {57.599574013115536`, 0., 
    57.599574013115536`}, {59.96129620921266, 59.96129620921266, 0.}, {
    0., -56.532907346448866`, 56.532907346448866`}, {39.44198143793967, 
    0., -39.44198143793967}, {60.921296209212684`, -60.921296209212684`, 
    0.}, {0., 41.98064810460633, -41.98064810460633}, {-61.33290734644887, 0.,
     61.33290734644887}, {-54.894629542546, 54.894629542546, 0.}, {
    0., -38.716648104606335`, -38.716648104606335`}, {-36.82667981014776, 
    0., -36.82667981014776}, {-55.694629542546, -55.694629542546, 0.}, {
    22.7244982911649, 22.7244982911649, 68.17349487349469}, {
    24.59118515035174, 73.77355545105522, 24.59118515035174}, {
    82.35355545105523, 27.45118515035174, 27.45118515035174}, {
    21.47781143197806, 21.47781143197806, -64.43343429593418}, {
    26.791185150351744`, -80.37355545105524, 
    26.791185150351744`}, {-79.71355545105521, 26.571185150351738`, 
    26.571185150351738`}, {
    19.577811431978063`, -19.577811431978063`, -58.73343429593419}, {
    23.951622863956125`, -71.85486859186838, -23.951622863956125`}, \
{-20.177811431978064`, 
    20.177811431978064`, -60.53343429593419}, {-25.031185150351735`, \
-75.09355545105521, 25.031185150351735`}, {-71.26686859186839, 
    23.755622863956127`, -23.755622863956127`}, {-76.4135554510552, \
-25.471185150351737`, 25.471185150351737`}, {
    20.8244982911649, -20.8244982911649, 62.4734948734947}, {
    21.991622863956124`, 
    65.97486859186837, -21.991622863956124`}, {-21.424498291164902`, 
    21.424498291164902`, 64.27349487349471}, {-24.37118515035174, 
    73.11355545105522, 24.37118515035174}, {73.61886859186838, 
    24.539622863956126`, -24.539622863956126`}, {
    79.71355545105521, -26.571185150351738`, 
    26.571185150351738`}, {-22.124498291164898`, -22.124498291164898`, 
    66.37349487349469}, {-21.795622863956126`, 
    65.38686859186838, -21.795622863956126`}, {
    71.26686859186839, -23.755622863956127`, -23.755622863956127`}, \
{-20.87781143197806, -20.87781143197806, -62.63343429593418}, \
{-23.452348916932998`, -70.35704675079899, -23.452348916932998`}, \
{-68.32686859186836, -22.775622863956123`, -22.775622863956123`}, {
    17.69303153716731, 17.69303153716731, 88.46515768583656}, {
    15.156850459467694`, 75.78425229733847, 15.156850459467694`}, {
    86.34425229733847, 17.268850459467693`, 17.268850459467693`}, {
    16.846515768583654`, 16.846515768583654`, -84.23257884291827}, {
    18.708850459467698`, -93.54425229733849, 
    18.708850459467698`}, {-90.5242881892886, 18.10485763785772, 
    18.10485763785772}, {
    11.838515768583656`, -11.838515768583656`, -59.19257884291828}, {
    17.579547305750964`, -87.89773652875482, -17.579547305750964`}, \
{-12.110515768583655`, 
    12.110515768583655`, -60.55257884291827}, {-15.828850459467697`, \
-79.14425229733848, 15.828850459467697`}, {-87.89773652875482, 
    17.579547305750964`, -17.579547305750964`}, {-93.54425229733849, \
-18.708850459467698`, 18.708850459467698`}, {
    12.68503153716731, -12.68503153716731, 63.42515768583655}, {
    14.240667305750964`, 
    71.20333652875482, -14.240667305750964`}, {-12.957031537167309`, 
    12.957031537167309`, 64.78515768583654}, {-18.708850459467698`, 
    93.54425229733849, 18.708850459467698`}, {81.1297365287548, 
    16.22594730575096, -16.22594730575096}, {
    83.94425229733848, -16.788850459467696`, 
    16.788850459467696`}, {-17.69303153716731, -17.69303153716731, 
    88.46515768583656}, {-17.579547305750964`, 
    87.89773652875482, -17.579547305750964`}, {
    78.8737365287548, -15.77474730575096, -15.77474730575096}, \
{-16.846515768583654`, -16.846515768583654`, -84.23257884291827}, \
{-14.872347305750967`, -74.36173652875483, -14.872347305750967`}, \
{-74.28176524231492, -14.856353048462983`, -14.856353048462983`}}, \
$CellContext`polyGraphics$$ = Graphics3D[{
     Specularity[0.5, 6], 
     GraphicsComplex[CompressedData["
1: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
Wn/cVyUn9j+D9aGizyYiqWyWONf+BZhdbRU=
      "], {
       Opacity[
        Dynamic[$CellContext`opacity$$]], {{
         RGBColor[0.7, 0.7, 0.7], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{1, 6, 5, 9, 10, 12, 7, 8, 11, 3, 4, 13, 2}]}}, {
         RGBColor[0.7, 0.7, 0.7], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{14, 16, 17, 19, 18, 20, 21, 15}]}}, {
         RGBColor[0.7, 0.7, 0.7], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{22, 26, 24, 25, 27, 23}]}}, {
         RGBColor[0.7, 0.7, 0.7], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{28, 32, 30, 31, 34, 33, 29}]}}, {
         RGBColor[0.7, 0.7, 0.7], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{1, 38, 37, 35, 36, 39, 2}]}}, {
         RGBColor[0.7, 0.7, 0.7], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{40, 44, 42, 43, 45, 41}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{46, 50, 48, 49, 47}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{51, 53, 54, 52}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{55, 57, 58, 59, 56}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{60, 64, 65, 62, 63, 61}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{3, 68, 67, 66, 4}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{5, 29, 28, 69, 6}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{7, 72, 70, 71, 8}]}}, {
         RGBColor[0.30000000000000004`, 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{9, 73, 75, 74, 10}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{14, 76, 77, 36, 35, 78, 79, 15}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{16, 46, 47, 80, 22, 23, 83, 81, 82, 17}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{48, 84, 66, 67, 86, 85, 49}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{18, 61, 60, 87, 41, 40, 55, 56, 88, 19}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{3, 68, 24, 25, 89, 11}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{57, 90, 70, 71, 91, 58}]}}, {}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{20, 63, 62, 31, 30, 92, 93, 21}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{28, 69, 38, 37, 52, 51, 32}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{7, 72, 42, 43, 12}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{5, 29, 33, 73, 9}]}}, {
         RGBColor[1., 0.4, 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{64, 94, 74, 75, 95, 65}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{14, 76, 50, 46, 16}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{48, 84, 96, 77, 76, 50}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{47, 80, 85, 49}]}}, {}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{40, 55, 57, 90, 44}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{30, 92, 53, 51, 32}]}}, {}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{42, 72, 70, 90, 44}]}}, {}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{60, 87, 97, 94, 64}]}}, {}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{31, 62, 65, 95, 34}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{56, 88, 82, 81, 59}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{4, 66, 84, 96, 98, 13}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{53, 92, 93, 79, 78, 54}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{35, 78, 54, 52, 37}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{24, 68, 67, 86, 26}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{58, 91, 99, 83, 81, 59}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{18, 61, 63, 20}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{1, 38, 69, 6}]}}, {
         RGBColor[0., 0., 1.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{8, 71, 91, 99, 100, 89, 11}]}}, {}, {}, {}, {}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{36, 77, 96, 98, 39}]}}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{22, 80, 85, 86, 26}]}}, {}, {}, {}, {}, {}, {}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{41, 87, 97, 45}]}}, {}, {}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{17, 82, 88, 19}]}}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{2, 39, 98, 13}]}}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{15, 79, 93, 21}]}}, {}, {}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{23, 83, 99, 100, 27}]}}, {}, {}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{25, 89, 100, 27}]}}, {}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{10, 74, 94, 97, 45, 43, 12}]}}, {
         RGBColor[1., 1., 0.], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[{33, 73, 75, 95, 34}]}}}, 
       PointSize[0.015], 
       RGBColor[1, 0, 0], 
       Opacity[1], 
       Dynamic[
        If[$CellContext`hideVertices$$, {}, 
         Point[
          Range[$CellContext`v$$]]]]}]}, Axes -> True, 
    AxesLabel -> {
     "x", "y", "z"}], $CellContext`polygons$$ = {}, $CellContext`type$$ = 
   "(100)(111)(110)(311)(511)", $CellContext`info$$ = 
   "52 Faces, 150 Edges, 100 Vertices.", $CellContext`v$$ = 
   100, $CellContext`p$$ = $CellContext`result$176213, $CellContext`f$$ = 
   52, $CellContext`e$$ = 
   150, $CellContext`v1$$, $CellContext`f1$$, $CellContext`p1$$, \
$CellContext`e1$$, $CellContext`timeGrid1$$, $CellContext`faces$$ = {{1, 6, 5,
     9, 10, 12, 7, 8, 11, 3, 4, 13, 2}, {14, 16, 17, 19, 18, 20, 21, 15}, {22,
     26, 24, 25, 27, 23}, {28, 32, 30, 31, 34, 33, 29}, {1, 38, 37, 35, 36, 
    39, 2}, {40, 44, 42, 43, 45, 41}, {46, 50, 48, 49, 47}, {51, 53, 54, 
    52}, {55, 57, 58, 59, 56}, {60, 64, 65, 62, 63, 61}, {3, 68, 67, 66, 4}, {
    5, 29, 28, 69, 6}, {7, 72, 70, 71, 8}, {9, 73, 75, 74, 10}, {14, 76, 77, 
    36, 35, 78, 79, 15}, {16, 46, 47, 80, 22, 23, 83, 81, 82, 17}, {48, 84, 
    66, 67, 86, 85, 49}, {18, 61, 60, 87, 41, 40, 55, 56, 88, 19}, {3, 68, 24,
     25, 89, 11}, {57, 90, 70, 71, 91, 58}, {}, {20, 63, 62, 31, 30, 92, 93, 
    21}, {28, 69, 38, 37, 52, 51, 32}, {7, 72, 42, 43, 12}, {5, 29, 33, 73, 
    9}, {64, 94, 74, 75, 95, 65}, {14, 76, 50, 46, 16}, {48, 84, 96, 77, 76, 
    50}, {47, 80, 85, 49}, {}, {40, 55, 57, 90, 44}, {30, 92, 53, 51, 
    32}, {}, {42, 72, 70, 90, 44}, {}, {60, 87, 97, 94, 64}, {}, {31, 62, 65, 
    95, 34}, {56, 88, 82, 81, 59}, {4, 66, 84, 96, 98, 13}, {53, 92, 93, 79, 
    78, 54}, {35, 78, 54, 52, 37}, {24, 68, 67, 86, 26}, {58, 91, 99, 83, 81, 
    59}, {18, 61, 63, 20}, {1, 38, 69, 6}, {8, 71, 91, 99, 100, 89, 
    11}, {}, {}, {}, {}, {36, 77, 96, 98, 39}, {22, 80, 85, 86, 
    26}, {}, {}, {}, {}, {}, {}, {41, 87, 97, 45}, {}, {}, {17, 82, 88, 19}, {
    2, 39, 98, 13}, {15, 79, 93, 21}, {}, {}, {23, 83, 99, 100, 27}, {}, {}, {
    25, 89, 100, 27}, {}, {10, 74, 94, 97, 45, 43, 12}, {33, 73, 75, 95, 
    34}}, $CellContext`vertices$$ = CompressedData["
1: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
   "], $CellContext`vertices1$$, $CellContext`faces1$$, $CellContext`n$$ = {1,
    0, 0}, $CellContext`normals1$$ = CompressedData["
1:eJx1kNsJxUAIRM1dtpDUc/9SQgpI+ieEPGCHHAYdEFdHR9d53ZftFxH/x1p8
uB7oPQ3LuCi4CfbmsvgacI48c4TPyOKw2WGa3N91VUcd1lS7tMLTzqHtnjcg
x5so9l7l+N/3zT2o0xKePX77Zhz1hLPw3KkXnnaMevf8FznOUOy9yvl9uAd1
esKzx+/TjaOecBReWsINfMqM6g==
   "], $CellContext`pos$$, $CellContext`allNormals$$ = CompressedData["
1:eJx1kGEKgDAIha2xg3SdfnaEDlD3Z4xqMOnjoQ/E6dOnczvv41rNbP+s2I/n
g7+XaRFnCbfARi6KnwnlyDNH6IwoNpltosn9VdfrqMOabJeSeFqf2up5A3K8
icfa6zn+d7y5B3VKwLNHb1+Eo56jJ5471cTT2qxXz3+R4wyPtddzeh/uQZ0a
8OzR+1ThqOdoiR94Ad3pjOg=
   "], $CellContext`pts0$$ = CompressedData["
1:eJxTTMoPSmViYGDwAmJmBhh4YI9KY4rPmgkCJ+0JqN9PyBwc4vuJtHc/DnG4
PA716OLkuh/dnftxiBMMNyLdg8tfZIcnDvfjDGcizcelnurhQ2G4EUw/1PIv
keFJKH2SnG5J9C+p4Uasv0jNL6SKj6Yf/OpH0w8OcQBB12Fz
   "], $CellContext`planes0$$ = {{0, 0, 1, 0}, {
    0, 0, -1, 0.2}, {-1, 0, 0, 0.5}, {1, 0, 0, 0.5}, {0, -1, 0, 0.5}, {
    0, 1, 0, 0.5}, {-1, -1, -1, 2 3^Rational[1, 2]}, {
    1, -1, -1, 2 3^Rational[1, 2]}, {-1, 1, -1, 2 3^Rational[1, 2]}, {
    1, 1, -1, 2 3^Rational[1, 2]}, {-1, -1, 1, 2 3^Rational[1, 2]}, {
    1, -1, 1, 2 3^Rational[1, 2]}, {-1, 1, 1, 2 3^Rational[1, 2]}, {
    1, 1, 1, 2 3^Rational[1, 2]}, {
    0, -1, -1, 2 2^Rational[1, 2]}, {-1, 0, -1, 2 2^Rational[1, 2]}, {-1, -1, 
     0, 2 2^Rational[1, 2]}, {
    0, 1, -1, 2 2^Rational[1, 2]}, {-1, 0, 1, 2 2^Rational[1, 2]}, {-1, 1, 0, 
     2 2^Rational[1, 2]}, {0, -1, 1, 2 2^Rational[1, 2]}, {
    1, 0, -1, 2 2^Rational[1, 2]}, {1, -1, 0, 2 2^Rational[1, 2]}, {
    0, 1, 1, 2 2^Rational[1, 2]}, {1, 0, 1, 2 2^Rational[1, 2]}, {
    1, 1, 0, 2 2^Rational[1, 2]}, {-1, -1, -3, 2 
     11^Rational[1, 2]}, {-1, -3, -1, 2 11^Rational[1, 2]}, {-3, -1, -1, 2 
     11^Rational[1, 2]}, {-1, -1, 3, 2 11^Rational[1, 2]}, {-1, 3, -1, 2 
     11^Rational[1, 2]}, {
    3, -1, -1, 2 11^Rational[1, 2]}, {-1, 1, 3, 2 11^Rational[1, 2]}, {-1, 3, 
     1, 2 11^Rational[1, 2]}, {1, -1, 3, 2 11^Rational[1, 2]}, {
    1, 3, -1, 2 11^Rational[1, 2]}, {3, -1, 1, 2 11^Rational[1, 2]}, {
    3, 1, -1, 2 11^Rational[1, 2]}, {-1, 1, -3, 2 11^Rational[1, 2]}, {-1, -3,
      1, 2 11^Rational[1, 2]}, {1, -1, -3, 2 11^Rational[1, 2]}, {
    1, -3, -1, 2 11^Rational[1, 2]}, {-3, -1, 1, 2 11^Rational[1, 2]}, {-3, 
     1, -1, 2 11^Rational[1, 2]}, {1, 1, -3, 2 11^Rational[1, 2]}, {
    1, -3, 1, 2 11^Rational[1, 2]}, {-3, 1, 1, 2 11^Rational[1, 2]}, {
    1, 1, 3, 2 11^Rational[1, 2]}, {1, 3, 1, 2 11^Rational[1, 2]}, {
    3, 1, 1, 2 11^Rational[1, 2]}, {-1, -1, -5, 6 
     3^Rational[1, 2]}, {-1, -5, -1, 6 3^Rational[1, 2]}, {-5, -1, -1, 6 
     3^Rational[1, 2]}, {-1, -1, 5, 6 3^Rational[1, 2]}, {-1, 5, -1, 6 
     3^Rational[1, 2]}, {
    5, -1, -1, 6 3^Rational[1, 2]}, {-1, 1, 5, 6 3^Rational[1, 2]}, {-1, 5, 1,
      6 3^Rational[1, 2]}, {1, -1, 5, 6 3^Rational[1, 2]}, {
    1, 5, -1, 6 3^Rational[1, 2]}, {5, -1, 1, 6 3^Rational[1, 2]}, {
    5, 1, -1, 6 3^Rational[1, 2]}, {-1, 1, -5, 6 3^Rational[1, 2]}, {-1, -5, 
     1, 6 3^Rational[1, 2]}, {1, -1, -5, 6 3^Rational[1, 2]}, {
    1, -5, -1, 6 3^Rational[1, 2]}, {-5, -1, 1, 6 3^Rational[1, 2]}, {-5, 
     1, -1, 6 3^Rational[1, 2]}, {1, 1, -5, 6 3^Rational[1, 2]}, {
    1, -5, 1, 6 3^Rational[1, 2]}, {-5, 1, 1, 6 3^Rational[1, 2]}, {
    1, 1, 5, 6 3^Rational[1, 2]}, {1, 5, 1, 6 3^Rational[1, 2]}, {
    5, 1, 1, 6 3^Rational[1, 2]}}, $CellContext`nodes0$$ = CompressedData["
1:eJzsfXm8HVWR/8vLnpCQnewbCVsIEJMgm9MHIaIMILLDgBubInuCg6LyUMdh
2AYEWYKyhBGQbVAYFgXOYQYMO0EW2XfZEUIgGyH5ye2q86a/db+v7svDz4y/
efefm/S3q071Od1V9a06fd+Erx+xy4HNTU1NT7/Q1NStST/PF9Vv/bwLx5+P
DL9ih71e++4NPUPb+JoO3jM58g7+Pzf+/Vsef9AFF/Wg+ku82cF7OPqbOzh+
nw6O34fiM4746MyjTxxO9R974a79luzTRPFSfoiDu/qpfXNvXPmFzbcd7+mn
8p7+Un401b/29itvvLh719W2T3BnfNd+qr9B+x15b/2GOPaPpniD43dUP8W9
+W/Z/LMbPX3X2tS+uR9889rfX7bK+NePVn38ea7oMvvH+950xjgq36B+6p9L
+fU9/fT6GtM/meo/6KwHFn7vsC5Uf2P2re/Iu/bT+Nag/Qb31g9wx/7JFG9w
/I7qd+Tp/Ec9z8HZ/ROd+Byd+B6d+Byd+P4/Pr4Tv6MTv6MTv6MTvxscv7mD
49P8JTrxJzr+Pzrxs1H9jn00vkUnvjSon+Y30ck/GrSPxsdG7Xf0u/ZT3Fs/
J/5GJ/9pdPyO6nfk+fw78Scy/1+Vp/GzUf3GPokv0clPohNfqP6qPM1vIss/
PPsAd8Z37Xeu37WfxsfG1o/HXyf/aXT8jur31sfIV+OqzR+qcZPhGrcp7sj/
z41fjbsMb3ZwT76Pg/dw7Gt2cE++D8WrcYPhQyhe9evt11+NO1S/Y7/mFe3X
X40rVJ7inn3VvKP99nvz79lfjXvtX79q3kHtX+3xO6rfWx9v/qtxow5/qsS1
OuNX/Hr79VfjDtVP+V01r2i//mpcofIU9+yr5h3tt9+bf8/+pkrca//6VfMO
av9qj99R/d76ePMP8dPkDxA/CZ7jN8Md+f+58SF+E7yPg3vyzZ68Y18fB/fk
mykO8cfgED8NDv673fohvjH9jv05v2i3fogvTJ7inn2QH7Tbfm/+PfshPrZ7
/SA/YPav9vgd1e+tjzf/EH8Ivj7FwX+3Wz/EN6bfsT/nF+3WD/GFyVPcsw/y
g3bb782/Zz/Ex3avH+QHzP7VHr+j+r318eZf/tFSxsm+AfH6xz85+TnbHNDz
6D1fpv1zPa7nIb7VHd+67JQpIwKrfzcm31vwRwzu2feAjKt2IH6k6NVx2mu/
p//snv3POHnQyuK2M+YVh+yzzNh/qxzX8xA/9djxt5zUY2Ao5V8398etclzP
Q/yOe4Z0e3zaEJFfZuQ9/beInOpB/JSa/IQguJmfBu1Lqqe99nvz69l/bk3+
zzJON4N763OnyJ0jetqr35P35tebv1/Vnu8PiyvlG3E9fjnBR08/fdZl3xkU
xtS+3zPzP1qOj5HzEC/9y6hQjtPX2O/pF/+UVA/Tf0Wb+j37fP3Mfm9+Pf1i
n3w3G7yx9WkOo0RPe/V78t78NjZ/KNeK67+c+ETlxf/T/qz45+D4/+j4/+T4
f6rfs0/1OvGTjt+YfO/E4qf4x8Lxj7Ft//h6wfy7p1/8Vmo7fiyLzP968mJX
ajt+cv3in5Pj3+n8iN7Ydvzn86fz5sTH5MRHOn5H9Xvz682fPveOf4xt+6/3
Cse/U/1yPDH/Jv43Mv/ryUt8Syy+efrlupPj3+n8SHyKLD59UvPnxEc6fkf1
e/PrzZ/8o8WJb2pXS3vlgT+Y6wP+Y+wH/mNw4D9m/Mb0c/uA3xj93viePPAv
g0P+7/EjLz831+/pB37B5DX/NvZ78sAP2PVT/cCvDO7ND/CL0N75A37k8Udj
nzd+R/V78+vNH+T/xj7gL15+TvgN1w/8wuNHxn5PHvgBuX6uH/gVwfn8AL8w
1+/NH/Cjds+PN35H9Xvz680fxJUWxPVfTvxJDfIjIw/8xeCePPCrdtsH/IbF
x+TER2q/px/4hbEP8mejH/iBwSE/Zv6tcPwb1Q/5O4tvkcUnzz7gT+22v8H5
pfYD//D4jRkf+JfBPf2evDe/3vwBvzDzA/mzGR/4AcFzfsz822rrh/zd2A/8
wMvfPf7Ubvsbm19uP/APj9+w+Suc+En1e/Le/HrzJ//o7B919o86+0ed/aPO
/tFq6u/sH/11+ked/Z/O/k9n/6ez/9PZ/+ns//w1+j+d/ZvO/k1n/6azf9PZ
v+ns36xO/6az/9LZf+nsv3T2Xzr7L539l9Xpv6hfbvv3p5paPH7SNj7M4zc0
Pui/Vldexqf4+fOOu/1zR/bn139F97XeuvgjWl87+NBdHnti+/dpf8fTP2fS
s8Ou3Wojiot+Ov6pP7ngpa++NXG19Yt9dH5EnuKefQdft96TU7bsTeU9+735
9+wXebo+3vqJ/dQ+sX/1x++gfnd9nPkf+ei2639z67F8/mfN3u6yVf2o/DXP
dJ2w24yl9Po8/ePnbbLWQyduRnHRT9d/dq8X53c9aoPV1i/20esTee/6qX37
XnTC5puu253Ke/Z78+/ZL/Le/NL1E/upvNi/2uN3VL+3Pt78w/EWhnv1s6a6
n0bjo+LDHJyPr3GO4RqHGK5+kF6f+OEO6qfyGqcc/fT6PP0aZ6i8+MnVtU/9
cAftp/PfoP0U99ZP45QzPre/sfE7qp/i3vxrHGK4+kGGr9q29MMd1G/mX+sr
EyROOfrp+Ey/4hpnGK5+sr32Ae7Nj2c/nf8G7ae4t36CU3mNQx0cv6P6Dd7Y
/A/rcPxiuPzD44eJxbfG5F37qf6Vv/rY77wtPMH23/X4KjkP8dKv9Bf/betj
elzPQ7z0a4NE3tZ/PP1zRU711JcfK/7T1gcatC/NFj3ttd+bX8/+Mi48I+M0
G9xbnywnetqr35P35tebvzL/fVvydDs/erz0D/b6vnX7MWtu+g8DwsDTHj/y
/Ck2vxkgxw+V84z9Nb8yUvyvzT88/SNEbrboQbzMv4eL/7K/b+7Zp3ITRE97
7ffm17P/qsd3ePKOVS8V87q/tfHVF9nfF/bWR+WuED3t1e/Je/PrzZ/HH+Qf
LY35V4YPc3Aur/9iONSHDA71LYNDfaXd+qH+xPTT64P6X7v1Q/2HydP9FZ59
UL9rt/3e/Hv2Q/2K2c/Xt1q/Y/av/vgd1O+ujzP/UB8yONS3DA71lXbrh/oT
009xqP+1Wz/Uf5i8d/1UHup37bbfm3/PfqhfMfupfqjfMftXe/yO6vfWx5v/
zvpaZ32ts77WWV/rrK911tf+BuprbHytTxl5+UeD/Kv98lC/8epbXn3Fvp/h
6If6EJPX+omx35OH+g67fqof6mMG9+YH6kOhvfMH9S2v/kfs4+N3VL83v+78
Ves3xj6oP3n1FVs/dfRDfcjIQ/3EXr8jD/UdI+/ph/qYwb35gfqQuX5v/qC+
5dX/jH3e+B3V782vN39QfzL26b8a89+d+8vaq79zf1nn/rLO/WWd+8sc+/9/
31+W5EALw738v6nupxV36hfJqR8kp/7SqH5uf9v1keTUJ1z9Tn0sOfUr1z6n
vtKo/dS+Bu2n43vr59RvklM/a3T8jupf7fl36heJ1Q/0/WOnPtSofnp9Tn0k
OfUJV79TH0tO/cq1z6mvNGo/lW/QfrP+3voBTu1z6meNjt9R/d76kPnx++9N
dT8+LvWBgtUXtK7R9v6dPxds/5GnX+obqe39TStj2/u3uLzWLdre38X157pI
2/uP6PxIfSu2vT+Nz5/Om7N/Kzn7t+j4HdXvza83f1IfCM7+ncj210h9oGD7
jzz9Ut9IbP+N1oXY/iBPXuo7ie2/8vRrXcTZf0TnR+pbke2f8uZP6z7O/q3k
7N+i43dUvze/3vx5+bn+q+36e+f+JUee74/p3L/UuX+pc/9S5/6l1Rz/f8n+
JThu8c76TWf9prN+01m/YXhn/eb/z/oN1CcMDvzbjA/1BYMDv2b7PwpWH2lM
f+b/bP9PZPUBzz6ov7Tb/gbnl9oP9QuvPmLGh/oNsY/r9+S9+fXmD+oTZn6A
f5vxob5gcODXbP9HcPZ/UP3A/439UF/w+L9Xf2m3/d78evZD/cKrj5jxoX5j
cE+/J+/Nrzd/M4746MyjT8x1txajX47DeUy+CXH91+rKN6jfsW+DIHhqr33T
RW666Omg/S2rZ3+foN+rKz+TyHv6G5Pn8+vN39bXPDVhwu+HhXPJ74fPleNB
zkN8yqxvzlzZe0z43b9/ue9+a9jfl9Tjeh7ip8rv255Lfh/Q069yp5LfV39+
Uf/LfzB/cmC/X9iYfQOT6mmv/d78evZf9Znv/vCE/fqHWy5q+eX+19n9Fd76
qJzqaa9+T96bX2/+yvt2eTFTvuvjq++f/mvytG0+2PyDWH7b/L2j+uX5TOz5
bWx8Lt/R8eUfLfe/f/nXd7jW9j+8+Ve77yivg6zPBon5P2/8jur3rn/28v0v
mnryevT5HLDDOZt/8ZF39Dk0428xdv3Df7/GiuKZGdv+fZeedn48/Tv3Ovcr
i4eOF/xZu/+6Jr80ls+HvT967D3tmOtenaj+o93659T0D0/s71+U8kGeX/v7
sZ59L11zz1bDzu+eDv/xW99e+VKvdtvvzb9nf1NN/kHxM/b+8tavtK85lP5z
scF71vBPJeafvfE7qt9bH2/+5R80P4Hnz75f4shDfmLs+6T0zyD6O2qf5/88
/eLfC+bf6/u9VlzysyD5mbHvr63fm1/1a+rnENfnSp8zxOfKc91DnvP26le/
M0f8UH39z0b1g4ir31A/0l7954vf6il+DPHD5Ll7UZ7D9tp3mjzXu8hz3l77
vfn37Fe/1FP8VH37+fqp3+smfrA+PiH0ED/X3vE7qt9bH2/+O/l1J7/u5Ned
/Ppvm19nfmTkvecX+JeRVznJQ4h+Pj7w49W0b/Xt9/JTyA8J7s3v6svrdbH5
9eYP+Jd5PoA/evzI2O/pB35n5IG/GPuBX7dbP/Arox/4m8Ebsy/z43bb782/
Zz/ww4C4t37Aj736QbvH76h+b328+Yf4bPAGnz+aP+lzx/xH/ee2cfu8+qFn
n/if6PBbR75Pcvgz1e/Jd3T+hN8UDr+JbfObZwvGzzz9wi9S2/xvZWybP01I
Dn+h+tWvOPw5tc2fPfu6JId/Ufu9+ffsV7/Rdn2Br5/wu+Dw6+Twazp+R/V7
6+PNf4P9AVrf8fyP/ovlTw3mX8HxL7Q+p3q9/LNt+/j4n4x+tz5J5w/4jVlf
4GcGB/7Qbv3An8j9l/mF0e/JA/8h9nH9wB8N7s0P8KfQ3vkD/mdw4JcG98bv
qH5vfr356+R3nfyuk9918ru/VX5X/7n/b/rl0yC/obizP0PHbyHj0/o19Oc8
/eb6vPE/Yf0E5/Onz4VTf02sPqpxndWPPf2aV7D7T+JvZPVdT17jKqufe/o1
bjv1Yzo/kn8l5p+9+dO8xKm/J6f+TsfvqH5vfr358+oLUL9g8Zvm997z1xjO
9UP//xMf/5PRz+dP4hvdvyLxhe5/kfgcWHz29Et8iSy+SPxMLH5K/KL9l8b0
T6TPh+Q3kd3/nn0Sf6MTf6n93vx79kt+k1h+462fxPfCya+Sk1/R8Tuq31sf
b/4767+d9d/O+m9n/fevVf/Vfzn1SYe/8Pwdns92j+/hf239Xn4C96+5fnj+
DA7rb8b39MPzQeTz+rP9ieqfjHxj+vP9aeyD+9+7Pz3/0m77vfn37Ifny3t+
zfjgXwwO/svg3vgd1e+tjzf/nf2bzv5NZ//mb71/0/n+F7v+zve/Ot//+r/8
/ldnf6KzP9HZn/jf3p/g7/dBfkpw9/7voDzHPf4O9WczPtTPDQ71W4N7+qG+
nRCH+i3zz7T/7emH+jKL34nFb88+6A+02/7G5p/bD/Vxr/5u9EN/wODQf2j3
+B3V762PN/+d7/92vv/b+f7v3+77v/KPRutH7Zb3+u+ePNwfZny4v731Y/Uj
qh/uPyMP82vsh+ff4J5+WH9jH9xfRr9nHzy/7ba/sfnn9sP9a3Bv/eD59fyb
sd8bv6P6vfXx5r+d/NaTb0Jc/8XkgX8FxIFfGHngTwYH/mBw4Jft1g/8htWX
aX7k2Qf8st32Nza/3H7gZx7/M+MDPzW4p9+T9+bXm79OftfJ7zr53f8cv5N/
dOZ3nfldZ37318/vmhDXf3XmZ5352f/e/Kxzf3zn/vjO/fH15r9z/2Xn/sv/
y/svWzb/7EZP3zVJ560FcT0O5zH5JsT1X6sr36B+al/YY/9Z20/dOJT4kLR6
9g1JhejpoP0t7bX/ih32eu27N4wKV9a++xrck1e5q0RPe/V78t78evNXjv9h
cZV815df/fvjN33f2SydtSze8fnrNjh9465m/I7ql3lJbP4aG79bku922+eN
L/9omTu/y+RrL2oyuDf/d4rdch0Gl/UX+4e0e/yO6vfmT8dnzweMb/yjJw/P
R/qk9et16XV+0vZ56+/p13Vj93f9dcfrGxLEPxj7/tr6vfntjG+d8a0j8Q38
E5Hn8wf+z8irnDwHRD8fH+JTu+3rqP2efwT/ZHCIf0Z/R+X1utj8NjZ/+f4g
OF8f/ZcTvxKbv/p2N26fl7949sn8Rye+UHldFyd+Uf2e/Cczf9w/gv8x43vz
r/+ScYi8+/yp/wqIe/mB6mXje7g3fkf1e/Or/3Ls6/Svf9P+FdfV6G/Uvxj8
Codfwfgt7Pqc/Cs4+Re9Pm/8T1i/wb358/wr+G92/zj+07t+D+f5P/CPT3z8
jur35q8z/v914z/Yb/R79Yl2Pj/e/JnxPfyvrd+7Pzvzl47lL531v4bqp0nt
YPb9X43PXn0N4uNq2tdReY57/utvvf4o/6D+w5tfT97LPxobv+Hny5NvQlz/
tbrX/9e+v7zr+4Tn19in/1rd+Ft+P5+/55738efuguCR4QOuu22nF0b3CG3j
/R28R3LkKb7tKwtPGLJzb6p/4qKloc/lAygu8lS/yFN8+rw/3detZ3eq//4t
jz/ogouaKS7yVL/IU/zgR4c3bbZFL2f8PhQXeWf8PhR/oNc5U9eYOIzqf27q
2b2f+bdV9P46eN4m83/5u8FUfu6j+y9//M8jPf3m/vxw1cef54qDavrHefrp
9XVZ7+mfHf9SE8VL+bFc/+3HbDzi+3b9uqr+sQdee+EV44082O/Nv2c/ta+U
5/Mr9lO8y1b3fLXYfSi/v8r1dezn83/lH34SNjitqze+tz6efm99qHzpfydQ
+xb/eMNL3+nK7/8Zl974r2/ewe+fUv9kTz/1zyMffmr+MV9f39NPr2/sdbs+
88Bkfv+X8utS/UOf/vdDzxjVhc7vqxdeftZnN96Ayov93vx79jvXv7Znv8GX
y/NZ2m+fX1hfx/61KX7TDm9/+xvRHd9bH0+/tz5MPqoeB2f3Z3Tyg+jkF9HJ
D6KTX0QnP4hOfhGd/CA6+UV08ofoxO/o5A/Rid/RyR+ik79EJ3+ITv4SnfgT
WfyR+Bid+B6d+BxZfM7X13Z+Ep34Ell8qcrz62f5jeJO/I1O/I1O/I1O/I1O
/hdZ/tdV7W87/4lO/hOd/Cey/AfG99bH08/xtvOT6MSfyOKP4k58j058jiw+
K+7kJ9GJL5HFl6o8zW8iy28k/kUn/kYn/kYn/kYWf6vyNP+LLP/T+8/Jf6KT
/0Qn/4ks/4HxvfXx9Bsc1sfgGtdFj5kfjdtt4/0d+f5UXuO6g1N5zRscnMpr
3Ge4xl2Ga9xuW74PxTVvcManuMZ9Z3yKa9yg+iXuMlzjCsM1rratf5ynP7at
fyyVb5K45tjH51fiHsM17lD9kte0Pf98fjSvcNbPsX+wZz+fH8n7HPu5fom7
DNe8pu31GUvlZX09/RTXuMFwjbsM17jStv7JVF7zBkc/vf81r2D4KxLXHPvo
/GjcY7jGHYZrXtP2+Gs79vPnV+Ous36e/VS/5n2O/VS/2E9xzWva1r+uo38D
Tz/FIX6b/A7iN8F7OPI9qDzEb4ZTecgfGE7lIf4bHOK3wSH+E/lmikP8Z+NT
HOI/G5/iEH+s/mp8NjjEB4tX4zPRP9jTT+2H/MLgED+ZfXx+q/HT4BBfDA75
C5n/nH/Z+kI1f2Hr59g/juIQf5n9BcMh/2D2UxzyD7a+XL6aXzD9FIf4Y3CI
zwaH+ED0r0txyC+Yfsf+yVQe4iezj+qH+GlwiC8Gh/yFjJ/zL2L/BhSH+MvW
z7Of6of8jtlP9UN8NjjkH2x9Hf38+YL8zD6f5aeljNO2vq3H5bwmxC8q/x+v
kP1viMNxM/6cbQ7oefSeL9P+vR7X8xCft8Ef+i06Y63A6u8HSXz++ZP7vXHW
Bg8Y+cOXXPBk/HKvMOq3H2691ov3Gvx0kWP1+Rkyrtph5k/0HiHjIL7VHd+6
7JQpIwKr339Djut5iH/9kSf32+u55cVtZ8wrDtlnmbH/Vjm+v5yHeLpy13du
3XxAKOVfN+vzOzl+u5yH+BnnvLDg31YOCZOW9rp0QbL1wXUG/Xb3SRcNCAvv
ePToX5z6lsFVTvXUt298WPLRdp/ue6Ctn78reteVcRBfKnKqB/Ep04475O/O
HRRO/vIRa3x63cXGvo0vvmyDyVctKUr7V5j5O1HkNhA9iB9Qm/c3itJ+W79X
vZvIOPXt7xpUD+Kl3KvFHfcM6fb4tG5G/51yfJqcV399xodSfoiZXz2u5yF+
zIjJ/7Hdj5bKPscPjf6r5fgcOQ/xLx70X8c+edXAMGb66bMu+857Zv71+M5y
Xv38fky45ZSfPnnJ1rb/d9YVPW8du3Bg2Gjbi/e46aRFRr/KqR7Ev12ze2R4
5viTR13zuu3fTRW9Og7iz4rcP4qe+vaPCMfWcPv8P1WTX1zMqp33kZk/lVM9
iC8fcPja/7Tnu8WZNfts/Vz16jj1569LWCp6EF+w6uZJr53y52J0bZ1sf1CP
PyjnIV7O68ggccJcvx7X80h8Sk3yIfEJ45DR78Qn2h8W/x8c/x+Z/xe5xOKX
+P/A/L/EJ9o/Vr0sforexOKPxM/kxM/E4qf4x8Lxj5H5R4k/BYs/Ej8KJ34k
Fj8kPkYWH8XvJeYfJX4mFj/Fv0fHvyfHv0fm3yX+Rxb/JT4WTnwMTnxMTnyM
LD7KvAUWP2TdkpM/JJY/SHxLLL6JfwyOf4zMP0r8KVj8kfgRnPiRWPyQ+BhZ
fBS/l5h/lPiZWPwU/x4d/54c/x6Zf5f4H1n8l/hYOPExOPExOfExsviofp/F
D1m35OQPieUPMi+JxbfyO/MrFt+yXQ6/MvLAfzz+ZOwH/uPxM49fGXngNx5/
MvqBf3n8yPa3q/zL4JD/e/zIy8/N9QM/MvLA34w88BdjP/ATIw/8w8vvDQ78
z+DA78j8Zf7m8RNjP/BXgwP/IvZlfuPxL4+fGv3Avzx+anDI/419wI+8/Jz0
PzI/8vibkQf+4vETIw/8w8vvDQ78z+N3Zn6Av3n8xNgP/NXgwL+MfcBvPP7l
8VOjH/iXx0/p/Dvxx5ynOPAXjx8ZeeBXHv9h/j0y/w78xuNHLD4mFh+Bf3n8
ycgDP/Hyc6Mf+JPBgV8w/1Y4/i0y/wb5O4tvkcU3yN+Z/4+O/y8c/5+Y/wd+
w+J/YvEf+A2Ln4UTPxOLn8DfWPyPLP4D/zQ48BMvP7f7C6v8ifjnzC+YfwuO
f4vMv0H+7vETL39n/j86/j84/j8x/w/8hsX/xOI/8BsWPwsnfiYWP4G/efzL
45+0/1TOQz8yP/2CnGfqexNPHH7IuJ++S/tHGn/Gy3mMn7D4o3GD1c96n7HZ
nL2X9g5P/uqewx6/9UmDq5zHf1h973HRq+Mg/th+3bde586Rbv9Iz0N85aa/
/fDYrZop/9Hjeh7ii579ycSFhw4U+VeIf34lvi/nIf7lA675xVH3Dg3Mf+0z
6+0T93x4IO1PvStyqqe+fRNof+NW0avjMH6kelh83mvKVk90fd/WXw78xfiv
PzevKbD63G4ix+J/06c/nvf3aH8nit4DZBzGr1ZtWuox+UlNTuO41a/HD5Tz
6q/PhMDyBz2+t5xX3/83hYG1+oitvw6W47+V8xD/5e+GP7Bx8+DQd+LxM87+
xkIz/2vIcT0P8XLcsaGMc/b9tddX7TtozucG0/7U0yI3QPQgXsbN0bS/MUr0
viHjIK6/H6J66ts/Uuy379eVcWEl7c89LXIDRA/iZdz4gPZ39PdrnpZx6sef
5rCT6EH873b/zcF3n/++rKOt/+txPa9+fjJa8pM1zPV/W47reSS+pCb5kPji
9n8c/x2Z/1Z+4vEf5r+Vt3jxhcU/0Uv7P3rciX+JxT/xb4Xj32h/Q+JHweKH
+P/C8f+0f6N9DRbfxL8l5t8k/iUW/8Q/R8c/J8c/R+afxW7KXyS+FU58C058
S058Syy+af2T+X9Zt+TEf9pfk3lJLD6JfwuOf6P9DYkfBYsf4v+D4/9p/0bi
W2TxTfxWYv5N7Eos/unvzzj+OTn+OTL/LPE7sfgt8a1w4ltw4lty4hvtP4n/
D8z/S/xPTvyn/TWZl8TiU/md+Q2rT9H+DfAXMz7wD4MDP/L4jZEHfuHxF1bf
c/s3Gocc/kPqWzn/NvMP/MTgkB+b6wd+YuSBPxl54A/GfuAHlh9X838vvzY4
8C+DA78i8zeB9k+AHxj7gT+a8YH/EPsyv/D4D+m/ZH5o67NV/uPxQ4ND/u3x
Ey8/NvMH/MTjT0Ye+IPHD4w85P9efm1w4F8evzLzA/zJ4wfGfuCPZnzgPwYH
fuHxH48fGv3Afzx+SPsbDfITIw/8xuMfzD9H5p+BX3j8hMW3xOIb8B+Pvxh5
4Adefmz0A38xOOT3rH5VOP4pMv8E+TOLT3T/FuTPzH9Hx38Xjv9OzH8Dv2Dx
O7H4DfyCxb/CiX+0vwP8icXvxOI38D8jD/zAy4+NPPAXUv/P+T3zT8HxT5H5
J8ifPX7g5c/Mf0fHfwfHfyfmv4FfsPidWPwGfsHiX+HEP9rfAf7k8R+P/xlc
4waLH9r/Z7j6dfr7WUf85ryHHh7q7U+j8Uv3vznjU3kZn+LfPOLzpw3+TF9q
31nbXHjtP225hI9/6C6PPbH9+3R+WrotPHOPbw2i+p88advvD7tkQ4qLfjr+
Prt+69qpN69N5S/dc+D2Lx0xleJiH50fsY/iJ582Z+mHhy6m9u0+b627R27A
1+f9t7ptP3+XCdS+DZ/ZbPtxj/L6q6wf1S/rR9dH7Ke42E/tE/vp+GI/f36u
W+/JKVv2pvplfal+WV+Ki36Kv3LxwMUz+4+i45/77BovhPN6Uvlrnuk6YbcZ
S+n1LVrQ68OR/8zX9+3DP3rpF7t/muKin65/v3nHfe0Xffjzs+uj+2/f7Rau
X+yj1yf2UfyD234ws/l7y6h9N2+87cZf+VE3Kl/avx617xtXPnF1v4O4vKwf
xWX9qH6xn66f2E/lxX46vthP5fe96ITNN12Xxx9ZX6pf1pfiop/ieNyJjyb+
gjyNr87+s6Bx0pGn42ucY/g3JM5R/RLHGH+cK3GQyZ8gcc7RT+U1Djr66fX9
i8QhhmucZLjGKcQ/JbjGUcd+b/49++n9t0jipGM/5f8zJI466+uNT+3XOOaM
T/VrnHP0e+tD5V+VOMdwjWMM1zjI8Pclzjn66f2pcdDRT8dfLHGI4RonGX6T
xCnEZwq+m8RRx35v/j376fyvIXHSsd/gen8cKHHUWV+qX8an8hrHnPGpfo1z
jn5vfWx9qsq/WH2Mxq/y94P095347z94+6tZfBO1LToO4nN77TD9W4etReNf
Pi7nIX7e4aN/+a+HvFt06f3iulc/ZutjelzPM/nHbf947Rce6xfK8+z7h01y
vL+ch3i6+aFhZ40bEq7/9KT5/3KB3R9bxo3+YeQFJ019t5v1z9eJnOpBvBx3
TFh3/GbfX/5PNj6OEr06DuIq10/01OcfA8MDj17z/ncusf7lvm//4aWbDn+j
KO23/WuVUz0mP63N+/Nih+2/jxK9Ok59+/8iJ3oQX1CTe7Io45ftX78vx++X
8+qvz1iJf7b+osefkPPM/VvzK+8UO/Y6dt+fz7HvJ+rx8+Q8xL9w4a5vD958
QPiX7ju/NugS+/6hHtfzEJ/T68X5XY8aHU49ZN5Z14+39ctTXzpn2l7f/4vc
sK8tW/t6m5+dInKzRU99fjRc/Jd9v/Fc0XuajoPPl8ipnvr2Dw8jH912/W9u
bfUfVPOrbxVlfLHvH4wQudmiB/FbXt/vzUcH/Kn48u2XvfmNfe37v6+I3gNl
HMRVTvUg/vP5W9593Z9fLF75wiZzFr5cR78cP0/Oq89vhocnDv/8Rof80V7/
k3J8NzmP+Xfm/6G+x+IP3Z8G9TXqn53xaf8J6kPEf25IcajfGBzqZwaH+h/T
T68P6n8Gh/oWs4/qh/qWnf9q/cfi1fqiwaE+anCoL7L1o+NDfZHZz/OXav2V
2U/1Q/3M4FAfZOtL5aH+x/TT+Yf6kMGhfmZwqN8Q/fz5gfof009xqP8ZHOpb
zD6KQ33L4FD/MTjUFw0O9VGDQ32RrR8dH+qLzH6qH+qvzH6qH+pnBof6IFtf
vn+5Wv9j+un8I69gOOMf+TjhByDPxy/lKT5jq6H/8HxvPv6s7Te5/sb1bH9P
8YO2fP2ofT/Nr//VQ/ZcfstDNn8C/SZ/0/0bWy+84qXv9d6Yyot+Oj6r3yle
5uGT+PyS+s2Bgpf8w9oH9nvz79lP57/kVxM9+3l+1euGv1u/m+2/w/pSeRmf
yh97x+ZvbrWDfT8Txqe4rI+n31sfKl/yGPv+Q77+FSeucelbtr6pvx+ywxE/
OfKi+yy/yvZ322qjnX5rfz8I9NP7/881P7s5n59SPx2f1e8UL/NwW19TnNVv
1L4yf7f2gf3e/Hv20/u/5Be2vgb2G1zX77pH33qsx3Rbf4D1pfplfGp/08C4
Tb973fGpflkfT7+3PgaH+pRX/6L8p8H6luVf5UfrZ4Q/5PqNV9/y6ivm/of6
lrl+qL8Zeag/GfuhvmTzv2r9yKvP2Pmr1u8IP8n1OTM/UH/z6kvm+qH+aHCo
nxH7cn3Kq5959UWjH+pnBof6osGhfmPsg/qWV1+x+z+r9S2jH+pvRh7qT159
ychD/cirzxgc6ncGh/qcmR+ov3n1JWM/1B8NDvUzwh9yfcqrn3n1RaMf6mf2
+a/WF2n9ivlnrX85/IHKq19m+EzhBQzXvJ/hyhsY/orwAoYHyfsd/bR/o3k9
w/tL3u7YR69P7KO48g6KC69g+O2S1zP8U5K3O+tHcc3rHfv5/SW8wrGfji/2
U3nlDc76Uv2yvhRX3sDwHYQXMHwnyfvp/ApvYPg6wgsYrnm/o5/eX5rXM1zz
dsc+en2a1zP8auEdDN9PeEXb9q9H7btB8nZn/Sgu60f1i/10/cR+Ki/20/HF
fiqvvMFZX6pf835Hv/v7YnrciU80fslxtr8jOfuDEtsfpLiz/yo5+6cS2z+l
7/c4+8eSs/8nsfqR4s7+s8TqV2qfsz8qOfujkrM/KrH6keLO/rzE6leyvyQ5
+9OSsz8tOfvTEtufBuN76+Pp99aHzr+zPyix/UGKO/uvkrN/KrH9U4o7+8eS
s/8nsfqR4s7+s8TqV7p+zv6o5OyPSs7+qMTqR4o7+/MSq1/J/qfk7E9Lzv60
5OxPS2x/GozvrY+n31sfj3/w+lF5nO3vSk3yQVzrRs7+ncj270h9pWD7o6T+
EJz9TYntb9K6Etu/JfWRxPbvSP0rsf1dUj9Jzv6j5Ow/imz/kdZ92P40qa8U
zv6t4OzfSs7+rcj2b2ldie1v0rqRs78tsf1tUh9LbP+V1B+Cs38nsv07Wldi
+6Ok/hCc/U2J7W/SuhLbvyX1kcT272jdh+3vkvpJdPYfJWf/UWT7j6Q+Ftn+
NKmvFM7+reDs30rO/q3I9m9J/Syw/U1S/0vO/rbE9rdpXYntv4L6j9EP9SOD
Q/3B4FCfsf67Wh8wONRn7PxW60tMP8WhvmRwqJ8w+/jfl6nWTwwO9QWDQ/3K
4FB/MzjUr9j60fGhfsXsp/qhvsfsp/qhPmPXt1p/YutL5aG+xPTT+Yf6g8Gh
PmNwqA8Q/RtSHOpLTD/Fob5kcKifMPsoDvUTg0N9wT4/1fqVwaH+ZnCoX7H1
o+ND/YrZz/1Ttb7H7Kf6oT5jcKg/sfWl8lBfYvr9/q0cZ7iz/4TWD/T3s5z9
PcnZn0PrK4o7+5OSs78ksf0lijv7mxLb36S4s/8mOftvkrP/Jjn7b5Kz/yux
/V+yvyY5+5+Ss/8pOfufaP0IxvfWx9PvrQ+dH2f/Ca0f6Pw4+3uSsz+H1lf0
7zc4+5OSs78ksf0l+flpe39TYvub1D5n/01y9t8kZ/9NYvtvFHf2fyW2/0vX
z9n/lJz9T8nZ/0TrRzC+tz6efm99vPqGx+/N+FB/Ifl3rk+w/R/B2f8R2f4P
4P9efcPj/2x/THT2xxTO/pjE9sdAfYTtj0psfxTUR2z+U61/efURr/5j5KF+
Y3CoX5n5g/qGx++Nfqi/GBzqE2z/R3D2f0S2/wP4v1ff8Pg/2x8Tnf0xwdkf
k9j+GKiPGBzqQ159xIwP9S+vPuLVf7z6jVe/ss/3Vvd8tdi9dV8+4j+T/+N5
is844qMzjz5R60I3G/0/k+PV81B+ZJgx/ePPS0b+/Ef3X/74n7OcwTcROdVT
X/9f8ppSD6sfxbnVcVr9p8hNVz2AP9DrnKlrTBwemuRTf/xhIveEmV8Ra1E9
iDfX5r2n2G/z2/NFb3UcnL9eIesBfGZNrkc4eN4m83/5uzr8Ro7reeb5rulf
T+TrxH85fp6cZ56/F/rvvtuyweEg8vvhelzPQ7zP2tsNfvrVkeGZh1qmHr+R
/f335+V4LznPxD/5fd1PHfL2RlcdYfPDnQ4+ec/xG44KqxbN++LFO79m7z+R
Y7/fvt0+x/T/09RJIZG/P7VS9O4o45j4LnKfEz2Iv3prv1kvPjE2HEj+Plf/
4y7/89s/HUz//sgBIqd6EF94wm2/v/PiPuHKfz3irF3m2fxT9faTcRBXuXdF
j7m/ls38u8+M6BNmDF86+qkN7P01XY4fLOch/t1TL996+NcmBfb3ufTve31H
zqt/fy6T+9zmH+VzpfPyhOVX5f0d5Dk2z//4/1i02diz349ja9+2f1g+97nv
Yfvv4tcG1j6/NvimNbx/Kv2z3b/Qt+dVe15ywuJ41GGDbuv9mh1fnvt0EHn+
wb+b+RG/kph/Kr8X3DLr0PFP/te6Nj+9v3b9K4qf1+QtPxgn81Z+1/l9pNIv
J+a/1b/f//7lX9/hWjv+0Ge/eNfzJ3cP39v2ho22e8/G93J9NpT5tc9n6V/7
pPI8e39eOvWch7962+TwKfL33y7/0yYPv3bY68W5PfufcfIg+/cB3hh2/Zh4
zofFVuvsc8V7o+39WeqfEs5bsOvPBj1m+cEj2+z/3rivjAul/metfzjro83n
T1oaS/9in+/D4jlPjdhpkui3/bHDnllx8s1Lx4n/tvzmspp9oxL7+xelfYU8
v5bfhfmbHLZ8z2WxfH6tfT+9bPe3+q/TPR2zbKsfzJ5h77/S/gky//bvG6a7
Fx//2Bt3SZyx/dfS/qHp+pOeHPjvl65p76/a+t0tfx/Qyj+14eA1H128onhz
7J/2fvMye39f9N49/Xc8oTnMrsU3+/cfSvunyfjjjP6Wmv2XF6ceO/6Wk3rY
+3uLUw64/JWRXUPpn5n+GWkf8vdBDq+tbxFK/Xb/xMmf6v6n8x7tnsZ+/x/X
WXI429/9RJxZ8aP0+ba/71J+WtTP1s9f+wb1g4ir31M/SPLbeH/VD6N/DOIf
jf6h4pdZ/gn5l5E/T/zeg+IHSf5csPxZ4kvB4ov6XZlHE58kvw3T1Y8Crn5x
iPhJ47+rftWun/jN+8SP1vf/fSS/tfXpaeI31Y8ivqX4RfWTJj8Vv3qR+Flz
/eI31Y/Wz9+6B/WT9fU/G9XPIq5+T/0g4seJX9ta/Fx9+xZF9cOIq987Q/wg
4vuLXz5c/DTi64nffUz8MOLq99QPIq5+7WnxcyZ/E7+rfrh+/v9B9oP18/+m
cKn46fr5XVO4QPww4teJ3zxU/Cji6hfVTyKufvXfxM8irn9X6VDxo4iPEb94
kvhJxE8Tv3qk+Nn6z0erXyL+y5yX78/aczU6NMmnfv6kcja/E7EW1UPyoyD5
kbm+FtE7vTKO8Q9J/INXH7D9u5pfHkP9j9QHCuafS7v6B5Y/a3yAcVj8sfdv
Ta5fKOfJ/v75/XL8G3Je/evfUORtfe4+Of4pOa/+8zVC8x+7f1KOz5bzEO9d
481jw9uPzTht2unPmfl9V47refWfz4mSH9r6aMl7x4XzTt3q9S3eeMG+Py5y
64oexMu8dd2wiPx9gbNF704yDuIqp3rq2z8+3LvF1nfcNsv+fa/Sf4wQ/m33
Jy4QOclvjf6l4SsvvbjzwLDt+r03emtLW59RvTqOie8ip3qM/14x8sIL1hgY
7v/1GTfMucPq1+N6HuIlv143sL+/oMf1PIdfGnng1x7/MvLld+aXBgd+ZnDg
51Z/te7p8XOPn9r8sco/SX0h1ycMDvyb5FeZX3v1A1oflTzP4FBfMDjwLzM/
wE89fmT5Z5WfGnng10Ye+KOxH/i1rc9V+SO5/syv7PxW+aPHrwwO/J3Yn+sP
lv9V+bvHP0l9IfN3j3+a+Yf6BqkfZP5txgd+6vFvrz5h85cqv/bqE8R/5PyG
8Z/E+I/w58Lhz4nxZ/WLTfIh/C85/C8y/qf5EesPif+KrL4q/JnmZ8Kfk8Of
I+PP6tec+kBi9QHwe/b9OfFrDr+JjN8IfywYf1S/5vC/xPif8N/I+K/+3SaH
vyTGX9QvOvw5Mf6sftPhd8nhd8nhd5HxO6kvFE59IbL6gvDrwuHXweHXyeHX
kfFr4Y+B8Uf1a079IbH6g/o9xn+RFzn8yuMvBgd+S/LHzF/t/pQqP/X4F/O/
Wr80OPBLYl/mbx6/JPlt5t8GB37p8W+DA78x6wf8z+DAP4j+zP88fmrWD/gZ
eb4z/zLywK88/mJw4LcefzXzA/zU419GP/BzgwO/NDjwN49fGnng3wYHfunx
b/Z8JFbf0Pd7GP9Qv8L8C+QvZPy8P4PsjxkV8nMIuOx/SGz/wzfOPnzH+57p
Hspvm/9C/d/gpV/skQ4m/LnMLz8supbfNr6KX2P+Qa9rj+9Pe/ORzez+RbX7
4PI67PrU8poJYeVhc5YsPPZl27+8eNqyf914vDyf9v3Chyev3Lrl+uZQ+gHb
Hy31T6L7Fx45+txvvn/DioLtf9hyyuln/fSr3VM8+Wvzu+9t56/M36eIfpuf
bfXEygf3GbOI8sfSvhmp3Kdhn48FNfuepvxh+g3FqWMG/GV91/z5Ef9yprWv
jNtLhN/Z35cr7Z8s82/74zcevvLOfb833uHX08R+6z/K9QuUX5V5qfI7u35z
1yzuv3Hih8UD21+y1VoH2fuzqNk/NLH9MTfU7A+B7a85afIFt91/woriB9ts
9NaaC+36l/pHiX67P3vn2vo+LHGmzvuzX72nx1kLlwq/s/OPeQnLX5z6cXLq
x4nVj2dU8hLrvyT+R6f+Hpz6e3Lq75QfSX4XWH1a85om+ZD8TvTb/oTkb4nV
zyU+Fk79NbH6q8T/gtW3JT4Gpz6dWH1a4ntk9XfNS1h9QvMSVp/XvMipHyen
fpxY/Vjyt8TqexL/C6f+Hpz6e3Lq74nV3zXvYfVpyU+T059IrD+heQ+rn0t9
Nzn13ejUdwOr78q+AH0+2P40fb5M/iL18eDUxwunPk6ff/UfrD4udZeC1Y/B
v5Hnf0Vk9W2pXwanfpmYf5D6cGD1YanvBqe+G1l9V+pCidW3hbfT/ovUJyPL
L6RulJz6eGT5jdRNklO/jU79Njj129R2fjGB+hepmyWW30j9PDj188Kpnyen
fp5Y/VzqwwWrD0vdLDn9hcj8k9S3I6tvI29i/kH2Z3v5v63Pls9lZPvP4flk
+wuaWH1G9p8n2X/O+E8U/uPlB4yfJcbPlBepnYh/JLxHeVD9+LgkPiI8x+R3
wouUJyGuvEd5EOLKa7YQnlNf//L4kPAkIy+85ULhMeb+EF6iPKW+fc1BeRTi
2wlvUR6DuPqdTYVnIa5+7UHhUfXtHy/2s/rvkqg8xdgvvEl5lLl/lLcIj0H8
TPE7yrMQ1/rsm8KjEL9deM/WwoMQ/77wGuU5iH8gvOgm4Un19Q8S/az+2yMp
z6mfn3VJM4Qn1ec3+f0ewo9yf8v6j2p/x+DQ36L+g9VfoD9lcOj/eP0pVh8u
WH0Y+lNmfqF/Ya4f+jsGh/6CGR/6O8Q/5f4Uqd/m/gvbn5jzjPrPX+6/0Pqr
5jmIQ//F60+Q/Zm5/+X174x90P+y/KjavyH+L/e/vP6NGR/6gwaH/hV5vnN/
x+tf2fu32t8zOPSnvP6eweH9PrZ/JrD3O+D9NPb8F+z5L7/z+3d2/qvvt7H8
R+vIRh7eT7T8v/r+Hat/R7Z/CN7/MvMH78cZHN7PMvrh/TjiP/L7e2Z94f01
m39X308z8vD+GfFP+f0ug8P7fwaH9/vM/MD7e+b64f00m39V3180OLx/Z3B4
v43mh/L+nb3/qu8n2vy3+v6dweH9RINDf8LYB/0bUn/M/Qsz//D+ht3fX+2/
WP3lR/sb1n9U+zPE/+T+FK3fsv3DUJ839zf0L+z1VevnhF/m/oVZH+i/EH6e
+wt2/ar9FyMP/QWv/m70Q3/B2A/1d5sfVPs7xP7cnzL2QX/HzC/0J2x9udrf
MTj0J7z+l9efMfqhf0HqJ7k/Q/Tn/pWRh/6LWR/oX5HnozXuMv/gvH8fnPfv
U5N86j+/Gpdt/VD9Bns/HfofLH+h9U+oXxj94v8L5/3rxN6/lvhWsPfbxf/T
/pnEN9p/07jO3r+X+JTY+9eSfyT2fr76Fef98eS8P57Y++Mad9nvC0h8K5z3
74Pz/n1y3r9PrH8t+Utg76dL/pWc3ydI7PcJJD9J7P15qL8bHN5/JM9H7j+Y
64P+Anl+R9PnB/oHBof+ihkf6s82PlTr8waH+rDBoT5vcOgv2PhcrZ+T/de5
v2D0Q/3cqy8bHOrnZn6hvkziR+5fsP3jwXl/ObL4CfV3Yx/0L7z6u9EP/R0S
P3P/wfKban3eyEP/gejP/Rnbv6r2F7z+jK1/Q97txD9SH/+gYPV/zaub5IM4
9P+Nfs2b2f4tqc9Gpz5bsPqs1L8LVv/WvNmpXwdWv5b6fWT1e6m/Bqf+Glj9
VeOjU/8PrP4v9eno1KeTU58OTn26YPVp6Y9Epz9SsP6IPtdOfyA4/YHg9AcK
1h/QvJrVv6V/Epz+SWD9E6nfJ1a/h/f/jTy8P0/k8+8bGHl4v9/g8PsGBof3
w1n9M7D6J7y/be5/eH+e1YcLVh+G99tZfTM59c2C1Tfh/W9yf+f3241+eP+b
1X+jU/+NTv03sPovvB9v7IffFzA4vB/P6u+FU3+PTv09sPo7/D4A609Epz9R
sP4E/H6CwYH/efzWyAM/tfxSjrP6MvA3j78YeeCXBgf+xeqLtD4A/IzVl5NT
X06svgz8xuOvrP5aOPXXxOqvwP9Y/T2x+jvwPzM+8HuP/3n81sgDP/X4uZe/
EX6Y928a/fped5N86uefeX8Gq8/R+rzU5yi/kLyuYPVPqV8Gp35J+ZfkpZHV
b6X+Fpz6G63fS96anPpvYvVfyduiU59MTn0yOPXJyOqTktcnpz4e2fMleXPh
1IeDUx9OTn2Y8kvJ6wKrf0reTp8vycsp/5a8NLH6Lezv9vibweWxa2G/rwD5
v8ePvPzcXB/wI4/fGXngL5Y/Vvmdx1+MfsjvPf7i5fc2PlX5o8d/Pf7o8R+P
P3r8h/DfzK8NDvzP40ce//P4scfvPH5s7YP3Mgm/MucpDvv/yfzm/e9GHt5P
MDjs37fPf/X9BMvfqvv7DQ7748n9P4LWx2B/vNEP7z8YHN7fIPnZuvT3JeH9
AbN+8P6EweH9ATM+vB9icHh/wOiH9yPI/ZvfbzDzC+93WP9e3R9r5CF+k/wh
0P3ZEF+NPOQ3dn2r+ZnBIf9g/eXgvN8V2ftdEJ/t/vJq/uHFZ8t/q/kfsX8o
/X1oyP+8/MXYD/mfl7+Y8SE/Jvlnzt+MfshvvPzNy2/N9UN+5uW3JL7n/cMs
PiYWH2F/r7Ef9lez/CGy/AH2P7P4VzjxL7L4B/uDWf4VWf4F+4NZfhCd/KBw
8oPE8gPYP83y08TyU9g/zfKzwsnPCic/Syw/g/3jLH8NTv4aWf4K++sNPvLh
p+Yf8/VW3mn8l/wfz1P8ju//5Ojx/daW3z+73ejvJ8fvlPMMf9n8sxs9fdek
IP838q9cePlZn9147VDWwer8vqzIqR7EL73l7iuvPXPDsGOPNT+8/Ge2fiH/
jzqOid8ip3rq2z9R7Lf1i1LvRPn9Sts/ELEW1YP4sSMm/8d2PxoeBl53204v
jLb1/ami91UZB/FBIqd6EJ/x6PNHdi2Gh/O23O6P3/yl1T9Xjut5xn+/s+LZ
l36/Ybju0GO+tuYKO7+/keOPy3mIr33Hg195b+qH+bv+/bmuzh+5f/X+sfP/
h65H7XXTsGXx6f/c7bN9HrLxo5Rfh95fel8dN+Sa7V747r8ZfFLN7nHplv2+
uezk+fb97B+udVXv+760PD6y7ZwtTnmXjd8tjSi/DX5n9fky8yPrmtj9offX
59d86cI7drL5+7dr8iuK544/edQ1r9v6yjMybw+V82hweS6SPCf2+dB5nd9l
8rV19lf8xw7vjTzr8K7hhVXTvnH9H61/3PXZl3d//O5NRL/176X/6Z62+uCj
18/5sZ0/eT7iCLmPnOsj/qWpRe8zxG+VdZ8o9wHij8q6/0juA+Z/9D4k90eQ
+8PGJ7kvmf+D59/IPyvr/h25D4j/Lpj/luerYM+X3ncyj+b51PtG7yPEX5T7
Qu8TM3/V+8rMr943eh+Z/FHuG72PHP/gxEe7fuW6rEOvvxx/Hfp86/2nesjz
IfHN9ud1/baUccj8JNXjxGdjXxnf1qXzj3oQl+cmMP95qeh9tToOe/4MXt7f
Y8O2ryw8YcjO9vchZsnx5+U8xN/+xx+8c9RLm0h8s/P7Gzn+lpzn+Hdyf61L
8wPwf7R+K8+ZwcE/GhziI7FvIl1fiI9efDD6wf8b/ZAfGBzin9EP8c2L30Ye
4pfBIb7b+k/1+WL+JzH/o/mdE78Si196X8h9wvxvcvxvpP5X5ofxA103lt9J
/KL+QeJXcuJXZPFL/ENy4nOi8bm67oSftK6L4988/8H4icYXcv+sQ/kXxAfP
/7H7T/Mn4n+yHzA4+E/Pv1P/JvGPrH/27178Y/Yl5t9bdF3J81+uf/ek387z
Q+QnUn5T4pODzgPhX4nxr6sfGDh42Gldw08HHzbirkH2/ob8z+6/LnlfEn5o
9E+v4SvkPCv/tNxXbH30ut48fvwV579n51ftlutg+Vli+ZncX4WTPyQnf0gs
f5D4ndj6af3Dyb+Ck38l/T/xP9Q/iX8JLD/R50rWgeWnieWn4j8Sy5/0vnfi
e3Tie2DxXXhJYv5PeJten3l+JO4GJz8qnPyIzr+uH8uPJH8oWP4A95eRl/wm
svwG/Vb9+yPXZ7znj/JrVn8C+xi/aVI/Z+wXv6N+iPifKP7Huz+Zf0zMP6pf
Ys8H1De9/M7Lb7z8js6f3udOfublP15+5uWnXn7m1XcZfwisvgT1SSd/stcv
06f1V4NDfdOrv7L8KLL5g/orXT+ZJyafWP0W8heDQ/w28w/1K9u/q+YftP4o
z5HBIT8x+iE/M/KQf5H4PJH6P/2/U/8PTv0/yXUa/yD5HfXf4n8Dq49D/GfP
T2L1a/CfRj/EH6/+aHCIv+b6IL4S/etQ+yF+GhzyC7u+cN8788/iX8Hin97X
bP0h/2L8ITD+APVXr37p8HPLf6C+anCoLxP716b5NzxfjP/Q/BnyC2/+zPVv
Wc1fGb9KbP0gP2D18cj4Jdw/NP6oHU5+7/EbLz8i9dnn8/cVO+z12ndv6Bra
xvuuNr77OhvO+cxTAx35rsnRv9q4jE/x+7c8/qALLmqm9jWG9/HkvfEd3NPf
x5On+KyzVhyxTd+V9P4o9/MPouN7uOiPbcuPdfRzXH/v0pHn8+PIz71x5Rc2
33aCZ99qy+v7um3rH+TZb+S7yvd0+Z3O1dU/w5E/9sJd+y3Zp5s3vqef4qKf
4jK/q4037btg2NT+/P5vmv3jfW86Ywy9fhcv9dP7v4yz61F5D1e+78jz+WlI
fgPPvtWW13yN4TK/nv2OfeNXW78nP/1r59/2hS2avfE9/RQX/Y78BquLRyd+
Ryd+Ryd/cPU78Ts68Ts6+YOr34mv0Yn/jeLe+B21b/X1tx1/ohN/oxMfohNf
o5M/RCd+Rie/iE58iyy+SPyKTvyMTnxx58/Jv6KTX0QWfxudPyf+uuvj3T+N
zQ9fH3b/wPo4+vn8OfEjOvE3OvEhOvE1OvlDdOJndPKL6MS36MQX9/q8+OLN
n5N/RSe/iE78defPib/u+jR2//D58dbHu388+9uev6aWMj72pPaz+F2V0w/i
Kve8uT/nbHNAz6P3fJnyaz2u5yGe+p0x5q79fl1sdce3LjtlirW/PD40sPj4
gBzX8+rL9wwLZBzEh3/n0wtHfemPND7rcT2vvv4RgcXnB+S4nof42bV9/ouL
286YVxyyzzJjX5TjP5PzEB+5MBw7tF//UMq/buy7VY7reYiPqB0fG+64Z0i3
x6dZ/63H9TzEy/dcBoTnPv/QuJlXv2vG1+N6HuJ31vQPC8/WzmuN3x+t+vjz
XPGMHNfzUL58T+IVsbOZ6G8OZ8t5iG+45uiJa01+S+y0z78e31jOU/xDsa/U
PyCU67QwX38Xkb9Njt8h56H+TWp6nxb7bfy/U47reYifUpvX8bJ+Q8j6DUl6
HuK/qj3fi4ora98fGv16/HI5D/HR00+fddl3BoQxte/3zPqPluNj5DzES/8y
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
4NBfIfFtCI1/0P8x9kP/h8Z/5D+K67dXn6qej/JNLeV5tn9aHh9C9y/rcT2v
Pq569WPsd9+/0fPq48Pp/mU9ruchvuqRH/ZdvOC94vx5x93+uSNtf1GPr5Tz
EJ8z6dlh127VL5Tn2fzu53J8tpxXX35MOPUnF7z01bdsfqHHj5bz6suvGXZ6
6Navrr2ZjT87ynE9T3GND6fV9A8V+e55fL3/d5Tjp8p5Zv0e/XheXhQ7bX9V
j5fzbP33il91X+uti/9UlONb+R3leJcryvMQH9nvM/Nvf3xNmf/W/mY3wc+V
4yPkPGN/Te+jYqfND/V4s5xXf/7HyfpZ/6THZ8t5iLfMu/mSh1e9W4x8dNv1
v7n1Cnt9clzPQ3zYoeN/+3z3AeGWzX406nOP2f7u7+S4nof4+HmbrPVQr+Fh
dq8X53c9yu4v0+N6HuJp2L0HnHztgHDwS1N//26L3d90kBy/Xc5TfLncX0fX
9I8Lpxwy76zrx7f6x3x/yvE5ch7q3+tHS358xBWvFEv22fqfmhfb/EaP7yHn
Id40a/Z2l636S35QG6dOfiTHV25bnqd4c2V+hoYRtXVqzR+Vn4yS43PkPDP+
RvM2Hrn7C8WO15795J5/32xwPb5qanle/fUbIetn83M9ruchrvFhdX8foer/
GT7E6Z/0cfAhjv4+FG/are9Gj2/zJrX/4EN3eeyJ7d838VPrG6Vf6UHtK5//
DSgu+un4pd9by9NPr++WXj/Y+ITTe1C8lN+Q6r/19sumbHzRMmpf6b8mUXmx
35t/mp+I/fz+u/YP21347n9SebGf4mV8GGP0w/py+8vx+f1z3XpPTtmyN7Vf
xvfWh+Kin+KyPtz+k145badVH1L7r3mm64TdZiw18/dRxX8No9dX8ysnzqS4
6Dfjq38v/evk8EDb+un1/WeP1y78+aldKV7Kb0rte3HAp3f754P5/JR+eyNj
H9ifmP0y//T+FPv5/T/k/jG/WPkqtU/sN/o1vpb22+cX1pffP+X41P59Lzph
803X7W70w/je+lBc9PPnp1wfOv/V+Mb4SY5/ieHyf8I/VJ7xlzw+1d82f2kO
GqcYvmLXMs4xXOOYo9/I3yf4bIlziOu87yhxjOnXOOXop9evcYrhGucc+7J+
vf9VXuOcYz/FZf7p+micYvi7/17GOYZrnFK8C+Aa55i8xiln/Ojop+ujccpZ
H2/+qbzGKYZrnENc76+REscc/fT+0jin+Eqx/0HBT5E4xuQ1Tjn6Ka5xqm35
TT37sn7lL/p8aJxz7Ke4xjnHfoovHVzGOWf9sv14f86WOMf0a5xyxi8c/XR9
NE456+PNP5HP/IfpT/p/xKvn8foaq49J/U706wfx4e77M/J/s75SP4qsfiT1
swLrZ1DfKVh9R+pridXXpL4Xsb4H9a/A6l9S/0us/ifXlVj9S+pHidWPpP6V
WP1L6peR1S/lugOrH0r9K7L6l9QPC6wfKi71u8jqd3JdgdW/pH6XsH5XnZ81
E6tvit0J63NQ30xY31R5qR9FVj+S+lmB9TOo7wRW35G6WWL1NanvRazvQf0r
sPqX2JVY/U+uK7H6l9SFEqsfSf0rYf1LcbE7svqlXHdg9UOpf0VW/5L6YYH1
wyxf1u8iq9/JdQWsf0H9LmH9TuWlvplYfVPsTlifg/pmwvqmykP9zOB4Xn35
PpS/yLfT/+9Dx4f6lsGhfmNwqL9Y+6r1Oaaf2gf1Kaafzh/U56x8tf5k5av1
GYNDfY/Z780/xaF+SeQ3pOND/SrjpP5p5KG+xcanONTv2Pj8+ajW55h+ikP9
0uBQ3zI41G8yTuov1v5qfY7p5/NbrU8x/fT+gPqcla/WnwwO9ZmMk/oesz8x
HOp/zH56fVD/Y/YbnNQ/2fo698+mFIf6HRuf3//V+hzTb9aP1C+NfDU+efGL
1r9EjtbPHP7QnFj9RfhhwvoU8Lfk1EcSq08pjvU1qF8kp36UWH0N9Jv8Kcu3
XV9JWD8i9hl5XXenfpdY/RHmn9rn1J8S1u/I+lH9Tn0zOfW3hPUpop/iTn0y
YX2NzD/V79RfEtancP6c+khy6lMJ62tQv0hO/Sg59bXk1I+SU19JWD8i9mV5
qI8lp36XnPpjcup3yak/JazfkfUz+vX5c+qbyam/JaxPEf30+pz6ZML6Gpl/
oj/v7yLXl/eHmesrv/P+NqNfvqNXv9I6F+Kw/8uMD/ufzPzA/iUjD/vTjDzs
D8v2kf1dZv5g/5a5Pti/ZnDYv2Vw2P9E5i/vfzP2wf47c/2w/43Mf96/ReTz
/i0zPuw/y/Jkf5m5PthfZnDYn5dxsv/OyMP+L3P9sP/J+EfYv2SuH/anmfmD
/WHZPrK/y+iH/Vvm+mD/mp3f6v4tg8P+J4PD/jdjH+y/M9cP+9/M/MP+LSMP
+7fM+LD/LMuT/WV2fqr7ywwO+/MyTvbfGflq/Yn55+EOP+hD8dI/9af4pI2W
d+n95tumv6Hxc8asJT889fkVtP+xxaAj+u41dhNqv+iPiOvz/8Xa8zmYyot+
an+1fsTkp1H91fqVxUu/sY6RB/u9+efjV+pHTL4Hv/5K/YrZP97oh/Wl1y/j
U/sGfvnhHz/2p74Ul/G99aG46Ke4rA/FS78zkuLHXbHg7fFdPjDzt7ziHwaF
B4h8mfdtQa9f9PP7q+Yf1qbyop/aX60fMfktqf5q/cpe/+bdFr50wmb8+Rb7
vfmn8tX6EZMfRvVX61etuPrfMi6sY9YP1jex9ZXxqX2LNx/18IPJPh8wPtUv
60OvT/QbHNbHiw/an05t4zR/DxonGF7m2a3vR3cBXOOIo5/wnz5B4wzi9wm+
k8QRJt92/Sfrp3jb9SeVn+bZl/VX60t9gsYZx36Ky/xz+Tb3v/UJXSTOOOtn
rv++iv329wlVXuOEMz6dP40jjn5nfad580/lNU4wXOOM4lV+3kf4gf19BtBP
7y+NM2x9NI4w+bbrP1k/xduuP6n8lp59WX+1vvSX9ZE449hPcY0zjv10/Y6X
OOOsX8Y/hPtnjsQZpl/jhDN+cPTT9dE44ayPN/9GHvQw/al6vqlPJFafgP01
dvzq/iaDw/4gc3/C/h6Dw/4lg8P+HjJ+3j+T5cn+pyxP9teY+YH9UWZ+YX+X
sQ/2R5H5z/uLsjzZH2b0w/4jsv55/5Hl99X9UUY/7I8yOOzvIvWBvH/IXD/s
rzH6YX+TwWF/kBkf9vcYHPYv2fuvur/HXn91/0yWJ/ufsjzZX2PmB/ZHmfWD
/V3GPtgfReY/7y/K8mR/WMbJ/iOjH/YfGfthf5SxH/ZHGRz2d7H4SPuzUD8x
ONQH7PhVfm/tr9Z/mH6KQ/2D6ac41H+IfA86PvD/jJP6EbPfm3+KQ32MyE+j
40N9JOOkvkbsH+/YP42vb7U+xMb31offn9X6GVsfah/UTwwO9YGME35v5KH+
w/QbnNQ/mH6KQ/2HyA+j9gH/NzjUj5j93vxTHOpjRH5Lev1QHzH2QX2NrW9i
6wv1E4NDfYiNT/VD/Yfpp+sL9TGD63GH3yen/pEc/u3sf+mTsH4D/Dg59Ynk
1G+SU59IDn9PWJ8g9hl5nR+nPpSc+lZy6kPJqW8kpz6UsL4B/Dk59TO6vwjG
9/TT9XPqX8mp3ySsf6G8w+8T1j+AHyeHfzv7X/okrN8AP05OfSI59Zvk1CeS
w98T1ieIfXR9nfpQcupbyakPJae+kbA+RNYv64f6S3LqZ87+ojy+p59en1P/
Sli/IfNv9M844qMzjz5xaf6ujw8Kqq8+ru+F6KcV3+CUc371DxctiuvXvu3+
t7k3rvzC5ttO1OPm+kr9vZJ8G/ny+Miwe+1zp5FfutcB317vsKXxg9q35Wel
vP5dltb9rd0F/3nNvkEy/hpGXi645dgLd+23ZB/7/oped/lt/75bqXdlMbP2
bf8+fIkPlflfkHFdj+k1vFnss/e/Xtf971/+9R2ute93nf7eR2v+Z48eofxu
5dcfyP1Z2jVZ9Nv9aeXxvqm0ozV/eFPkP1U7vpHIjzby48/daPYFlz8nvwO8
0lz/eyd3mzzjteXF3w/48Kanb239+zZ5//by/S+aevKEMJP8PuxFAzaJb00Z
G0r9zxp8dk1+SXx+Uf/Lf7Bd6/2R89ePpi04e9Ym8vv3Nj+4uKb/78Kp5O+T
zB196aIffbtb6vKrmb3Xnmr/vlfNvivHye+7v0TsWx5f+Ni++fb+7bH3tGOu
O3gdkbf7O7eo2T8+sb+f1VSb/yi/r2jv35r+V7uEra95asKE39v4vnTvGfs/
PvTdeB/5+2D3f/bopjd3X1l0+cFjR2x/3mKzfv1/8/U3DnpwTJgBv6+s+ffR
tesfKH+fps7zt8/H4y+Q35+393c5P11DqNlv/z5X39r4U9Pwmn57f9bW98pC
1neCWd9eS/f92lem9kjrvDd/6qGxdX17KF4bf9N0Gvn7Y5kHi59FHPyHuT/K
76aWqh9+t1gl81vqfzeCn0X/GtTPIr5E/OZi8aOIq99VP6y45sfTxW/OFT+q
uF633Kex6odN/ChY/Kj6Xf3g9S3OfrY+3iOoH62/PguyH0Zc/ab6UcSrfte+
P/Ep8avTxc/Wt693UD+ruN6/M8WvzhQ/i/LqNxeKH0V8rvjdZvHDiuv6fVr8
qvpZlH9B/Kb6UcTPFr97sfhhtP8+8atbiJ9F+Sbxm+eJH0X8NPG7l4gfrmvf
fLXP9l/uEb87T/ww4qeI31Q/ivOjflf9MMqr3+wpfhTx7HfFDyOufvM+8aOI
PyB+t+c+pR9GfKT4zdniRxX/sLK+T0f1w/XtX1Taf3Cd31cUv9tD/LDi6t9H
il/tL34W5SeL3+wpfrT++k5I/yZ+uD6+dugpfhZxyJ/M/OhxfL4h/5Hnz+6f
l+dX8h/7/kE1b7LPv/CA2HZ+pX7V+l89jv4X8sPA8kPwfxnvWpHH97Zb8wuJ
L+Q81a99Hf2Y+NVUPa/1+Srnv0njE9Gv8cvmL+XxdQRv7a/p+urxmXIejv+j
fW/c5rOnrBnw73vq/OrxE+Q8HP+xdwY/f/n1a4UB3a//6m++1tqf0fkdJMcf
lfNQvpaXzp8Q8O8/qLwe1/NQ/oS5t52061eGhwP36X1Dzxv/nMfX69tfjut5
KH+q/H2j8jpb+6P6fN8lx/U8xbX+vvtrk6Zu2Kt7GLj40eU39WrNX3X+9Pge
ch6O/8PavPYL+neeUP5+OX6CnIf2ja7Nz8hwHvn7H+fI8ZFynuI9Bf/opw/+
8bHfdA0H/f2Unft/udU+Hf9gOd7lzPI8xfX+KuPjxIB//0L9rx7X89A+4L+p
Pp75q4kP5Xfmp0Ye+DnRn/mdwevnlZT/Ef25/mDWB/i9uT7gr0Q+1y8yTvgt
sS/z8yxP+LeRl2/l3waH+kTGSf3ByAO/NfMD/M3EZ+BfRh74uZlf4LfGPuCn
9v6s8k8jD/zczl+Vfxoc+FnGCb8PihP+ZvQD/w+IQ/3CzB/w//rr18pfzfpB
/cPjt/Xtb+W3xn7g7yZ+AT83+oGfk/XN9Y2Mk/pFxoE/gh80/Dkx/lz1i/ox
/Cs5/Csh/wL+Tfxk9n+R1V/VrzF+qX4R8z/FIT81869+kdUfhD9Hhz8nxp+l
fpBY/aDqF1v9M9QPEtYPVF79GuNXwj8L5J/AfwrGf4R/JsY/hT9Hxp/V7zF+
KPw5Mf6c/SLhh8KfEuNPwg8T44fq15A/AT8PjJ+rX2P1BeHngfFz4ZeR8Uvh
5wXyc+CXCfkl1C8KVr9Qv8b4tfDPwPin8OuE/LqyvvN1feu8/yt+Efmz4lJ/
SFh/gPwqYH5F/FOoj48z/QUdf0VtnAflObf1kfK51LinH8vvqueZ/CZgf4XU
D8n4E0x+p/xDxonny3koD/ya5M9LqX8txx8o9tv9BXpcz1P8g8r1bSzyrX/f
pspPxyY9D/WXz89Y/fvkxv9sKseDnIfyby7pfeRuT44P4/t84/YD/usPJr8d
I8f1PMUHCP5SzX+tH/DvS+Xfp5HjL8h5iG+941fu/NXGE8Ld1w86dM3Dn8nj
rxD775XjQc5D+0v9kwPmf9pf1b/7pOcpvlTwDeb8dNiwHw8RftpaX9D50+NT
5Dy0/7O1eR0TSh5pf59P/r6lrJONL5o3tvxk3Duf++NtJn9r/ufyOOaXuj4n
3P3qt771xOBQ8tDeBtfjeh6OX9YNdP1a86sqPx2c9DyUh/zF+C/9ZvxH8pqE
/I34ByNffW5of1rwphbEob9A9PcNyH9JfY3ID02s/ih+JTF+K/ywQH5YlR+U
0P9V8ZUR+avikpeCXsNvEuM3wv8C8j/gH4HxD8lrIuN/wl8T8lfgZ4HxM+Gv
kfFX4WeR8TPhLwXjL8LPEvIz4C/m+arKr5MYPxZ+nxi/l7yxYPxY+F1i/E74
cUB+DPwuIL+D+kFi9QPht4nxW8mLCuR/wG8T8luVF/5fMP4v/DUifwX+n5D/
qzzwL6u/yl+yfYSfZnnCb8z4wF9JfqL1c/v+CPBXox/6H0Q+8zsjD/zO2Af8
1OgH/knGz/wzrx/h10Ye+JuxH/hJlif8wsgD/zTjA3/z+JfRD/zK+u8q/zQ4
8CtiX+YfHn818sBPjP3Ab839Afzc6Ad+S9Yv87MsT/i90Q/8rb79rfzN2A/8
NOsn/NOMD/zTrB/wd5MfAj83+jVvmk7yJ+BPWT/wk4T+q6o/768g+Yfuq7H5
137xnqdPe7hHKL9tfRH6ikT/Oqlt/7dCeG7r/mLoL9L+itq99vYrb7y4u31+
1O59y+sg8ztQ9Nu/375zr3O/snj38VK/f8zcX+Vz1yz1+2XG/n61+3psOHjs
ZttutP1dRr7bwwc+MPiDnqLf5n+3HbjZ8Pt7dU83DRuYTu9l3w8o8691wv3Q
f8vzU9P/Ks2PyudmcVm/n2/np9el9/583TeW0P7Chlu/80+Xxx7pma9c8vIT
c6195XO1cSifk9b9V4tkfrrX7N80nVyzz/7+Xjn/gda/L1/23FMX/9ey4uY3
f73OTXM+MvbV5IdOcPovWr+3/Kicn/HhoNr6PW6e73J9N0qjan7KPn/l+FsH
7L8q/qNrd7xxr2kfFYfvfeozk3e29385fwMS9pfz+tbW54+yvra+W9q/rKzf
b9eaPy4W/UfV8HGpjBOtvz9L6hsZh/pN0Xb9JvMbM//wfBr5Jvng/lSyPyDb
B/sfYtv7H1aIffb9iWp/1/If8Y8J/aPiVb+kH1N/SuqHEFe/on4G8bnil9RP
4fXvJH5nDfFDKH+j+JVbxc/U1784dhE/hfq1799T/BDKq1+ZI34G8eyXxE8h
/rT4lSniZxA/X/zSh78s/ZTi1frWpDJ/e9XWzxeIXzpG/BTqv0n8ivoZxDW/
2UX8VP31WxrVzyB+pvilL4mfQny0+JX+4mcUV/9wpPilOeKnUP4I8Ss/Fj9T
3/6Jpf1/8VOoX/2O+qG66/sXvzJH/Ez99W1Oy39Z+qn6+BDJ31rzM1I/z/YB
v4jIL0j9nOQnuf6b5Un9N49P6tdmfsrvpZRfQX3a4FDfJ/pz/d7gUD82/AHq
p0Ye6p+Ev+T6tskPob5M9Of6cJ5fUv/N8qT+nXB8qP9m+0j9NMuT+nm2j9Tv
zfhQP8/zT+q/Zn6g/hsQh/q1GR/q02b+oD6dcVLfzzip3xv74bk09wfsjzbX
B/m5weX5iG33vyaY+ivkN4H1b6rPbWv9BPxLYv05iO/EPl0X/Zj7P2H/A+7/
Avs/sP4R68NwfyfsD8H9HbE/BesfsH+j16fPJfavwP8k7N+ovD6XrD4r939k
/RvxTwn7b+CfAva/4PlI2L+B56PA/hf4n4T9J/A/gfVv9Lll/SfxLwn7c+Bf
Eusv6XPL6rPw/omR12/2/hr0RzJO9m8beeifkOcr93+I/FDn+cz9HRPfoP9F
5HN/y8hD/8TYB/2BjJP6vpGH/k9CHPon2X7S/zD6ob9hrg/6P2Z+oL9h7IP6
f5Yn/aNsH+kPGP3QXzL2QX/MXD/0l8j65f6IWT/orxn7oX9i5hf6J2Z86A8Z
/dD/Mfqh/1N/fVv7Z2b+oD9m5OH9NCMP718ZHN6/M+sL72eZ+YH3swwO748Z
/fD+mMHh/bqMk/fnjDy8n0X4UX7/yMwvvD9krg/eLzPy8H6WsQ/erzL64f0p
Iw/vlxkc3p8i9uX3i7I8eT/N6If3j4z98P6aweH9O2MfvL9G1i+/f2X4F7y/
l+0n72cZ++D9LIPD+2cm/4D3y8z8wftlBof38zJO3r8z8lD/J/E1v59l5g/6
A3Z9y4/2BwwO/Q0yfu5fGHno32Sc9GeMPNT/zfhQ3zY41KfN/Qn9C4ND/d/Y
B/V7s35Qnzc49C+MfqjPE/ty/drIQ/8jy5P6tpGH/kh9/a39HTP/0B8xONT3
zf0L/SHDj6D+b+2v1v/J/OT+huEP0L8g65P7F2Z9of+T5Ul/x+iH9wONfuWZ
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
NHb/ePbT+YtO/I5O/G4Qp/lDdOJ3dOJ3gzjNH6ITvxvEmz15b3wH9/TT59/F
WfzRb8f/uziLzxLfopNfRCd+sr+vjPr5/LQdX9jfR0X7VlveiZ/RiY+uvJO/
uPo9eSf/YL9P1zDu5Gfs7wc1jDvxh/WvG8ad+Mz2fzWMO/GB1Scalnfip6vf
k3fiJ6v/t1Oe5i+ufk/eyT9YfbJh3MnPWP+0Qbyp5QroP4A85e9VOf0grnKm
PhHnbHNAz6P3fJnyZz2u5yF+04TfdL15yovFVnd867JTplj7yuNjAouvD8hx
Pa++fN/wWxkH8fL4csrP9bieV1//iMDi8wNyXM9DXN+fuO2MecUh+5j+Z7xV
jt9b//2JqO83lPKvm/vrVjlOfr83niK/f3nHPUO6PT7Nxj89rufVH3+QjP8C
Gf+FiO/HKH5nTf+gcOzas45/5PoXs7zU3+JxclzPQ3n93ZPSTvP+ksj1CPj7
KNX57yn2LzR4lOP3wPtxXSv6h4fnP//QuJlXW/+rx++Q8+rbv0Tst/nbnXL8
3vrvR8r6TZT1M+8HRT1+Sv33H+Nutby9i+wfNv2nqMd3lfMQHz399FmXfWdI
GFP7fs+svx7X8xAv/cvYUH6b93ejHtfzED/6xD/NXfHA4PDygHtnLvvFO2b8
l+S4nqe43l/l9a0V9jjv2gUfHLrK3H97y3E9r/74S4qjat/2+Txajh8p59Wf
/64y/xbX43oe4iXvGi/9ecu/9LieV3/9lhfldzPBm8MoOa/++owJjL9dKcev
lPMQr+ph/FPjm3k/BuOTWf+qnH5a8eHf+fTCUV/6I+WHelzPQzz1O2PMXfv9
WuKXta8aH7z4ZeOD6l0g4yBejb/NxP5mGn9L/UMbjF9Djf4N5e8jPlf6OYPr
8Y3r//3XqL8/UJ5n/j5g1OP4+wWKnyJ/t6Ix/2fvf/39CS9+4u9XyPuF4p8H
BIkTWV77ihJXxA5rv/7dCc//49+nUPxs+d0Flj9EOf6z+r/PIPqHhWdr89zK
79X/PSPH9TyU178vU9rfTOxvDmfX//vqcYT8fkopb/mdHh9R//eP4i41//yO
7GMx7+9FPf5FOQ/x+c9s8e6XJg0M5fcHZv31uJ6HeOlfRlD/p8f1PMRL/zqA
xs/RcnyMnIfrU17fUNkf1Vof0/vzajmu56H+zQ4af/JOi152/f9MOQ/xX9X0
Liq8/OFyOa8+Pi6U8cnsb4h6XM9D/JTfHfP8JZ9/oyjXx+YnelzPq78+w2X9
zP4Asa+3jG/ztysq+9L0Y9df/m/GF/4TGf8Rv03jk8SP0Db/GZNY/NHjLD4I
76H1S4kPoe341Tcx/iVyicUfPc74l/5+D8v/xX8XjP9Ifh5Yfi68JzF+JPws
Ij8D/lIw/qJ/t4jFH+Ev5vcdq/ZNTCz+aVxC/qK4/n0uFj/kugPjf/q7PCx+
Cf8rGP8T/pUY/5LrCshfgH8lxr/071YxfirxNTF+JeuWkJ8qLvl/ZPm/+PWC
8R/JzwPLz4X3JMaPxL9G5GfAXwrGX8Su/8fZm4ffVVV348k3AwnzlBDmhCEi
IQHKIGDtOVEQi8UfAlGgKI5gK4qS6NO+9pUgOFSGB7UvQkAFbGVItVF5Clrh
brSIGialRFSGK2ihgi8XkCQMSX7xnjVkfdb9ZPu895/73LvOWnvtvc9Zw2et
fW9h/kfyl8LyF4n/y8bj/1U9lr9I/lmY/5B5tyz/k/ylx/yX5H8N5n9xfPWP
LP/arGX5i+xbYfmXjFtYfip6F8yvID8tmJ/G9TH/Quh6rkdfKX/psfxF8h6K
70X/w+z/jlX/w/Kr6P/GyPjqf3J8I/MqLH8Svqr/Yf5Rf3eF2T/JXxrMXyC+
bll8LXkLte+SXxXMryD/aFj+ob87zPIvtY8s/5C4vLD4XfKPHss/JH/ssfwx
2v9sH/X3UVj+of6f/P6t5k+9jfu/bVuWf8i+FcyflK6/f7Rx/z5WMD+C/LJg
fqn8Er9T+yf5S8PyF4mvWxZfS95Sse/rephfQf7RsvxD9Cos/1L7yPIPid/L
xuP3l3os/5D8scfyR8WXWP4meUWP5R+SvzWYvyld8qfexvOnqS3LP2TfCsuf
JL+k/l30LpgfQX5ZML9U/u7d6k+Ezvs3oT6T9IP6T5o/1JeY/6D9lVA/IvpZ
fYeMb/WhND7Ut5J8qD8R/ax+lOhQ/yHx62T2/xFYv0jzg/pUmh/Uh5J+UN9J
+kH9JvFD/SrRoX5D9LP6R+KH+leaP9TfyPpb/Yusv9Vvkn5Qv0njQ/0pjQ/1
pUSH+hJZX6vPGZ3U3xI/1H/S/KH+keYP9Ys0f6hPkfjW6kNJf6jvEP2sfpPm
B/WrRIf6TdIP6h+JH+pfaf5Qf0v8UP9K84P6DVk/q9+Q8a3+lMaH+lKiQ30p
0aE+l/YP6m+JP86D9Q9a/SjRob5C/M+OVf+jeRLSob6Uxof6D9FvWtX/MP8H
9akkH+pHRD+r/yQ61G+o/cPfp4x0qz+k+UF9KY0P9R2jk/pM0g/qL0k+1J8S
HeovxP9Y/SLxQ/0qzR/qZ0k+1K/I+lv9JfFD/SWND/Uj4yf1oTQ/qA8lOtTX
jE7qZ4kf6jfU/kn+QOyz1R/S/KG+ROyn1XdMP1KfSfKh/kLmZ/WnRIf6C5mf
1S8SP9Svkn5QP0vyoX6V1h/qL2T9rP5Cxrf6EYkfrD6U5gf1oUSH+prRSf0s
8UN9JekP9RnCb/WRND+o/yR+qN8kfqgvkfGt/kL0t/pO4of6ENHP6jck/rX6
Shof6g9JPtR/Eh3qJ2l8qH8kOtR3yPhW/yDjW30h2U+oDxF+qz+k5wvqR4kO
9a8kH+pHZP2t/pL4oX5mdFKfSfKhPkP0t/pRGh/qR2n/oP6V+KG+kvSD+kPi
h/oPoVv9JOkH9Q9iv62+k+RD/YPQrb6Q7j+oDxWkQ/2B+FerHyU61L/I+lv9
KK0/1F8SP9TPEh3qM0k+1GeS/lA/SvKhfkT2z+pfiR/qI0k/qK8QfqtvpPGh
fpP4of6S5g/1ITL+tD/Rf2T/CfUdot8Y9W9QH0njQ/0gyYf6TaJD/SOND/WL
xA/1mcQP9QsyvtUHjJ/Ud4yf1A+I/7D6T6JD/SrpB/Ufsv5WPzF+Uv8i87f6
SpIP9RXq/zC/UDrUf4j/sPoViV93pPYL6gdpfKjfJDrUP9L4UL8g9sfqM/n5
ifWLND7UB4yf1HfS/kL9IK0P1H9I/mD1q6Qf1H+SfKifJH6ofyU61FeSfKiv
EP9o9Z8kH+o/1P+z/Effa/hUvB75xy3ursv9U933M2j/sn6v142mq1x9Jf2r
/ct63Wj69rR/Wb/X65D+8vWTdnjq6t82b/rpLe/Y87BcvztWvh9/Q3cd0hft
9fD0ZX++Vdvx5/jzWPlerxvNv3t70ae+/Ng7nsrxhX6/UK4bzb9Fe8U1H7vt
9R/K+fWV8v1CuQ7pO23xmjtue2Ar4ff6oPz/U+8y+X5HuQ75xw3X5f6m03PE
+ST5fkyuQ/q6//rEZivvfbbpxs/9ffr9WrlO6ZpfXDyUP03WP/3/n6z/pHKR
XJf0v/+Pch8V/fP+6/ednjn/6tZ/V9m/bJ/0+7PlujT+UQuPvnbd+vzsb6/5
pxtnjsiP5Pu1R3bXIb1MX/6eC5Zt3Z7x2NwfDhbn+vnp8v1tch3SZ15zwA4/
nbJju3DKo3dM+HDGB/R7vQ7p08+c+d3+pK3b7x123s6vX5Hry/8h3+t1Sh8L
8qe1O95/5Cv/Zr7HX+pfdpbvF8l1af3mXbP/Tgt+3Ry77NJfvvWNY4mu36+b
212H9MXXfOer960bNDsNx3k50fV7vU7p8vt6vbOHeu3eXjjcJ89v7P6U7xfJ
dSj/pPNWnX/WDf/drDpl/ifHVub91+/fIteN3r8Zsn+5/0G/1+uQrv7h//X3
kaL9Z/QZlfrJWIU+oyJ/jNK753sypZ9x5vErfnHMH9L81P79f0P7sR3V74ht
z9rspN0OpHSRn/yzxu8HH7XqExf1X6brK/Kp/tu8/b7zV/x2M0rv+A+g+u01
78XxU5/8PY0fOvs1M/GD/vz3Nbr1p+OL/vz+G/JvSecn+tP16/SfneTD/lbu
ny35/n57n1/OefVUSpfxa/vD789OPqXL/lB6Z7emU/o3Hpow68SDV/P1G9qv
Pen8hnblM6+mdJGf7o8Xg33ftr174/Kp/isP3/m+ewp/vjv+I6h+H7vh3t/P
HP980k/td2c/Zyf9QP/C9Jf1p+OL/pTe8e9E5yf6p/1T/Q6f+Mxj5x7Gn3/Z
38r9sxPlP/Wqcw8/9BWTEh3Gr+0PpYv8RIf9oesf/VvV/xVGl88k/1D+sdr4
VP7G85dNW/VTjD5e/BzS7xT6m8SPVeSn+E3p6ueUPh7o6scYv/qpinxKVz+1
cf4Davolfl0f9XMV/Sld1p/S1U8xepdfZHwK9s/omt/cFfSfzfdX/FRl/LYi
n+6P+qnK/tD5qR9j/OqnGP0c8XNKx/1XP1aRT+8v9XNKl99/7d0j9B3FjzF+
9VMV+ZSufmrj/EfU9DP5L8H+LhI/V9Gf0mX9KV39FKOrn6vsn9E1f1S7f4T4
OSZf/VRl/LYin+6P+qnK/tTWn/Bb/sPkF/2M9HjdGJm/5l8ZHxP8TuTrC+nb
V8/PyOe0/4If9Rh+JPhZg/gZ4Dstw3cEXysMXxN8ryC+B/hXw/Av0asw/E/m
VRj+JfhRYfiR4F89xL+ULvhlj+GXMu+W4YeCf/UY/iX4YcPwQ8Hvegy/k3m1
iH8BflcQv4vrs0Vh+KboXRg+J/hmQXzT5t/hRz2GHwl+1iB+BvhOy/Adwc0K
w9cE3yuI7wH+1TL8S/C/wvA/mVdh+JfgQoXhR4J/9RD/svXr8Msewy9l3i3D
DwX/6jH8S/DDBvFDpYtePYbfybxaxL8AvyuI3ym/jFsYvil6F8TnAN8siG8q
P+BniY7XjeYfo/mLvFfq/2N0fMC3Eh3wm0QH/CXrF/E5Jp/SAZ9i8ikd8DnC
vyUdH/AZoxN8j+lfW38+fsQvCf8BfP4RvzI6wT+J/rMr+h9A6YDfsfH58xHx
OSY/7S/BLxM/4FuJDviN0Qn+kvgBn2PyE53gU0w+HR/wOcK/E9UP8Jk0f8D3
mP6F6Q/4H9Of3v+A/zH9+f0d8U+2v1Q/wLcSHfA7Nj7lB3yOyU/7S/DLxB/9
E8WvaP8X5Ccs/6vkD5uWCv5SEJ8C/KJU8JFSwadKBV8rFfyoVPC1UsGPSgVf
KRX8qCC+Avl1qeB3pYI/lgp+Vyr4U0H8juwfnV8F3ywV/K1U8KmC+BuRT/cX
8TWy/pS/gr8UxKcAvygVfKRU8KmC+BrgF6WCH5UKvlYq+FGp4CsF8SOin9EB
HysV/K5U8MdSwe9KBX8qiN+R/TP5eP9U8M1Swd8K4lNEPp1fBZ8siK+R9Sfy
rb+LzE+/r/a3Jfny3tTwK8W5kA79X2l9of/J9CP9S2l+0J+Wxof+sESH/q6c
v8f+rcQP/WuJDv1baf2h/4msn/W/pflD/12SD/1vZP2tf4vwW/9WGh/6z4yf
9Jel+UF/WaJDf57RSf9d4of+rzR/6H8y/Un/Upo/9Kel8aE/zOikvyvLj/1b
ST70ryU69G+l/YX+p8QP/W9JP+i/S/Kh/y2tP/RvJX7o30rjQ/9Zth+xvyzN
D/rLEh3684xO+u8Sf8SfxpL+UB8g9DFKH7fsZ0d/ZfD9htFvue3aOftf9QKl
d3ZzB6pf9/zvR+kiP9VP1D929mFyTT6dX8SPGP++VH7ErzK9s/+7Jn7Qv7b+
VH7Ej0bwn7jZvAde9yTnD/hVpnd2cy8qX/aX69+NT+V/b8rH9z/3Er5/Mn5t
fyhd5FO67A/Xf/u7dv3S2sfp+j269atO/PQZL6X5qX3o7Nfe7d2Ev4v7DqXz
F/lp/DXBPkyn/CKfzi/iR4z/ECo/4ldOV//W2a18/4D+tfWn90/Ej0bwf/a/
L37Turx+oD+V3+k/L+0f7G9h+yvjU/nfn/zEV668aAK3X934VL7sD10/kZ/o
sD81/6D16bJxOo3fW/UTjD74t87PIF3nfaz4kYp8kv+MtepnGF39CKNvHP8x
+ZTO8Kc7hb5Q/ExFP5M/HujqZyr6U7qsP12/jeNPY+3LJ3R+Bumwf6Z/xJfG
WvUzTL76icr4TUU+3R/1E5X9qa0/la9+gtFXb9f5GaXH/HxM8oO96fzVTzC6
+hk2v53EjzD+jeM/Jp/SN44/Kf8hNf3o+i8UP1PRn9Jl/en+bBx/GmvVzyid
7J/pH/GlsVb9DJOvfqIyflORT/dH/URlf2rrn/hBDpNf4vUJnygMn4D+mjx+
7G9KdOgPSuNDf0/ih/6lxA/9PWR8658xftL/lPihvybdn9AflejQ35XkQ38U
WX/rLzJ+0h9mdNJ/lORD/1HSH/qjkv7QH5X2B/q7Eh36h5J+0F+Txof+pkSH
/qB8/8T+nsQP/UuJH/p7Ej/0zxg/6X8yftJfk9YH+qPS/kF/V9IP+qPI+lt/
kfGT/jCjk/6jJB/6j5L+0B+V9If+qLQ/0N/F/COtzwJ+kuiADyQ65PeJDvgP
k0/1A/yDyaf+AfCfzB/xjUSH/N/oBD9i+tfWn9IBHyP8+9LxAR9JdMDXEh3w
EzY+pQM+xMan/ID/MPlp/wg+lvgBP0l0wAfy/GN+n/WP+A+Tn/Qj+AeTT9cH
8J/MH/GNRIf83+gEP2L619af0gEfI/yH0PUBfMToBF9j+1sYHfCTRAd8iI1P
5QP+w+Sn/SP4WOLX7yv5fUH8A/LjUsm/K/0vYwXxG8gPSgWfKBX8plTwicLy
d6UjPkH0o/wVfKhU8K1SwYcKwzck/y2ID5H9S/L1vqzgZ7S/CMavyafz23j/
le0PXT/Ev5Beye8L4h+QH5dK/l3pfxkriN/g/VXBJ0oFvykVfKJU8veC+ATR
L/Hr/lfwoVLBt0oFHyoVfKMgPkT2z+QD/lIq+Fmlv8jGr8mn86vgXwXxG7L+
Sf7BZ635wtmfebk5RN6RvuSmtX95+JGzWt3v0fy7yLroy+lv6/3kwYvvW9k7
dfju9kn930FDfjwXgvI3L911m6f17+g7tQuGr9sT/yXPrtnq+5OflfdsHzt+
vS+9v1XtY7cu40p33ZTELxNevOcxa2+6elK+/94m85Z1IPNb2XTva42u69ON
v7us/71p/bv92Ub0y/+PpPO66w/XveuvluXzYatOes9H9/nAxHbl8N3v3+dl
/t267y/y8/8ndd9PFXrGN7rvZws9n9+f8rXlV77id6ua7ncU16b1OW/ZsTed
dOCa5oMnX/TQ3sfl+3PRi+++au4F+7d3k9+HPW7KZaetnDar7eQ/nNZv4ZD/
hd6vn9vyuo8fnf8/raPPbE/f7bAj5x3zQOLv5M9vLyK/r7vf/Kc/eV1vcnno
tK/+5hdL8u8bDPkXzBT9VhD9Vvb6f9TvDr9/9f7c4lvv+t3p9+zWnjHU70c9
pHfrs3Vh/581brj+P5ffhxxL9MknH/iRbz8+oW2/8atZs36Y7dvE+95793bP
byL65/v7uhce+dXVP3ih+c6T35x986I1id7Jn93eBb+vvFL0//BQ/93l/wFG
9DcNx39c9M/391D+GWPt/KH+Hl89J/InDcc/tFww5M/+tdufVvZ3VtrfW997
2Iy7pkwqN0/fplwyJf++Rbc/88rO8P9jis9OkvcrxM6ifLAf6f7o3sctjnbY
/dt4+Tzazpp9bcW+pvmp3VQ7inS1u2qHR8uf0h4sdhTp4gebaIeT/2jQfyg9
2l194fhrxb8x+7tlq3YU6S8P9btHrsvnQ1eL3Xxe7CjSo911/6L2Ve2q2tnR
+m0mdM+fIv+M9hCxs8h/ltjN88WOIv0Ksbsv/Utnh5Wu9++9Ylc/InYW+fti
NxeJHUX6F8TuvlnssNLVPn1I7OoisbPI/6DYzTliR5F+sdjd48UOj9Rvvd1c
JHYU6UvE7qodRv3UbqodVbo+X28Su7u52GGUP1/sptpRpKvdffFfOjuM9JvF
bqodHa3/yma82OHR8rdvF4odRf319+83ETs8Wv8XGrWjo+Wvv7/FDit9QqDv
1W4idhb5bxK7eYvY0dH7O6vb3/V2GOm7iF3dUuwsjg/xU1o/eb4bfL4h/hH7
5b9/DM9v0etQfoyb/PnXeFr2odl4fKV2Nftf/Z7ZX7FrLYsPwf4R/j30e3t+
1sn8xb/gdcCvz5W+kv8aF68bNOoXrxx+v22rfkrpa8L+bC76+/mPJ4X+Z0P6
POHfpSg93h+7lEPkOqS/dnj/79p+Ef7fU/XX/8eZL9ch//xjT7v9+v1ntT++
cdszt/rgQ7Z+L4t+y+X7Vq5D+Z39emWL//+g9TX9Xq9D/idXTf3Qib+c2c7c
9H23vecHP7Px9f7bVb7X65D/Ivl/o8Wf2v3p1//81vR8j326+16vQ/nn/vjx
97//F9u1Z7xxznFbvn1qouv3eh2O363rbi3+f63u/6HyfSvXjdZ/b/n/RMc3
NP/W/wXR65S+Wuj7Lvr89Onnb99us/L+F2+e4vmfjq/fz5HrlL61jP/Y0D/q
/vn5mGgfty2/lutQf8h/y2i65a80PpQ4KfFDfk7kW36X9Ie4Mo0P+R+Rb/gD
4bf8PtEhfyX5seEXtfyW6Gf5OZFv+Xfil3fNvxMd8AmjE/wh8UN+S/Iry9+S
/pB/JX7IzxM/5LdJf8hPs/+K+WeaH+TniQ75Z9IP8jMi3/L7ZN8gfyPrb/l/
i3TAL5J+kP+P3j/PXxM/4B82PslvR+vv+W3SH/J3G5/k50k+5Odk/Q3fMDrB
LxK/2vGN54+TC8ufo13UV8q/SiX/Kph/Qf5NcE6zfz2Gv0p+2WP5pdpFjP9I
fGr6Af7QMPxB7V4lfy4sf1a7xvCDaBfz7wuo3WP4geRXPZZfSf7ZYP4J+U/D
8h/JPwvLPyV/7mH+DPlhw/JDyZ8Ly5/VLrL8UPKnwvInyQ97LD+U/Klg/gT5
ecPyc8EXegxfkPy8Zfm52jWWX0p+3mB+DvllwfwS8IuW4ReSX/dYfi35Z8vy
T8mvC+bXYX/X2zWGP5hdhPwZ8IeC+IPyS3zVYnxF7FPSv6NPo/UF/V6vG82v
ca++cn4Xr0vxTcvqK4AfEvq2Kb6L+mt+nX8fAPJrEj+vTvZV85fOro6Jfqy+
NLnV65T+fJj/3sKf63N/Jt8fJNch/ROn3vS61164RXsnxG9Wn5Xvz5XrkP/c
Jbd+9oTTZrTvPWXqv29y0/+1+ev+vFu+1+tQ/y4u26PF/5eK+enWRa/D8Vc8
vV3/uht3aLeedOM7vvVO7z/V53db+f5+uU7p2l/U2a+d2stJ/PdF+X4nuU7p
mwh9zefv+fmKb01oTx/moV7/j/nppHb8F7rrcH3OG67rVrL+z6X11+/PletQ
P40bu+u8f1rn9yP5HuNL9d8Lnthr7n5TJkl+6vGBjq/fv0Wuw/E7+zSrxfhK
11+/1+uQH+IX8vygn0/5W8H8jdiHxB+fG1qfFvq4xUiH+gKRP7XF/FfpgK+l
9RP8sTD8UexKYfmtxE0N5odx/FmF2T/JXy2OQ/0kLlW5o/OTafPT/ad0yf9a
zP8g/2hZ/iH5X4/lfxLXFcxfIT9rWX4m+WuP5a+Sn/VYfiZ+ucfyF4lbCuZn
kL+k5wvy48LyY8nvC8vvJT9uWH4s+V1h+Z3kxy3mx5DftSy/E/ygMPxA4rbC
8lvJ/xrM/5Qu+W3B/Fbpkv8Xlv9LXNfD/DWOP7Ng/q90yL+SfpC/JPmQnyZ+
yG/S/CB/TfqNkxfi21G+5a9JPtQ/CL/ld4kf8rukH+SnJp/kn2R8yz9tfUl+
nfghf0v6Q35i/CS/SPyQf6bxIX9L9wfkX0k+5FeJH/LPRIf8iuhn+UdaX8hf
jZ/kJ0l/yG/T/QH5edIP8luyf5afGT/J78n8LX8brb/nb0l/yE9NPsk/0/iQ
f6b9g/w9rT/k50l+tC8sfto29fdBflI2br+sv4LEX5o35PjrlRd+8fq/vmpC
273n/8ccXVdM9b2ycfun9VGPH6C+WLTOgvyq99995YQtVp2S8ad9RW+Zh9Eh
PxT5kxP/VVsf0Htq6e4S/z+W7q/uuVX8Pq9PR58t/Ln/c/XJB7/7gWmDHta/
lD5l9anvPG3u5DL72Tvmntnz+0vzj84u7doeDPU3W59T/ij/Xhofdc/Vi12e
eEf2nzMvm7fwy9c9QusLS3b52nPnfXRiGX/9IVP3nJv16+77We0h3f8zm376
/G021H9umTG0U/n+uHq4/g3Fv+967dnjnlywthn/8RVnHXN5vr+H+zdnt0r9
Zbzg938wfvv92TUH3nvpUQe0XR3S+ycn6/4M9/fQ0tm5/Pt9Q/3n/EWL9Vel
P3vBxL0PfuLF5o1bv3Tzg7e4f1D7eMRw/JkF68u2v8P96Ql+P+L3w4brv0rs
vO+vrv/ZQ/o2pfv/6Px8Ab6R6PY7zxvFbyy/SesPz2fiHycv7E8l/QGm3zrZ
P+2vY/0PanfUDikd+hckvsq/n6h2hdnHaJf0lfCnonYI6fPFrmwidgbpPxG7
dI3YKdRf7Y7aIeTfW+zKJmJnkH632KVNTunslNIVP3qV2B21Q8ivdkXtDNLV
Lk0WO4X0cWJXLhc7g/QlYpfGxE4pXZ/fncSubCl2BtfnVWKX1E6hfLUrd4qd
QbrGN/8sdmr0/v1B+rdy/+ulYpeuFjs1Wv6eXXx7RsbP7xS7dITYKeRXu/KM
2JnR8me2XxU7hfQLxe6oHRq5v0fr/ub41uyS2Cmk7yR2Z6HYIaQDfm76kf5Z
wj+N9pcB/mv8BP9N6wP4dRq/e1+d8iuCTyd+wPeJfMPvEx3wY5s/wU8TP+Cf
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
/Lld2i4fyP9P0smfVM7t3tP6dfS92iWX//H1ncS/zwen/9se31vV+9LPjpuw
0105vuz41a5kfHr8cF3W++3he+7vkgkvPv2f7n7mHz6Q8TWd97u6dUj6Lf2r
k574X//+QtO95/7EFRd/8bwDd3ul/P6l/7+oxodvnb3fotf8alb51yF/vr90
XkvuGL/3sqsyfvTUrdOOn/z5sfbV19/x/bd9IMcfM5d+c49/WfFnpVun/P8/
nX4Ty5zfPPXApxbm/Wnf8u6jjpn7SuHP+L7ep/E+o+uX40tZ/3gfev6xRu4r
vc+QX+6vVu6vgvQvy33zCrmPkK73nd6HStf7R+8bu49Gz7+J92F6fhp8fpQe
7zt94f21prlB7jOljwX6Vu1b5D5C/Y+X++5+uQ9Rvt43eh+l9Qn3Xe5f1vtK
7zOk632l95nSJwT+bdtG7jOkw/OTnm+ZX8PmJ3q1omfST7/X60bT96Hzj/u/
D+HX+yrvv36P9x/YhxbtA9l/o6t/O+ePct8wR+1z8i/yfHV6rr9utP66rvpK
z++4eJ2Pf8PHzv3x5w/Yo12wauwLe7/T/bPq/xb5fqlch/KH+3Kp7p/3x2r/
tH6/u1w3Wn/zP2U03fwHtU/ynCZ+8I+JDvbV6MR/pvHB/ib54P+Jfzf/mujg
Pwi/xQ81/5L0A/9Y8395fjKu2KFEh/ggr2/0/4k/+q9sv3Vfmf+K94W+kv0r
FftX0P6B/+sx/2f7TuI/3Vdq3+W+QPujdLCPbP0a5v913yv+q6D/Un7x34X6
73Bf5PhP9535b3m+Wny+yP6k+XX7OzPFd7p/+r1eh/p1+6p9d/raQH95xevS
/d1ifEvil6T/uKHcXVtcP6XbuchwHfVvaX31e7y/9PzS14f7v534N68/6vot
le+XynUj9+/r+8j+ef+f+h/9fr5cl/SLzw+x/3ifJftZ0H6S/Un8YndKHC/l
Z0LPv78D8WWSL3anRf9D4gujQ/xVMP6K+u1VmH8R+9ygfY78+r+i+f4T/9FD
/wH+szD/CfYvjQ/2I/GDfzB+Yl9a5Af/keY3Tl5xn6n/MPkk/jV+Yl+TfmBf
k37gH5J+YP8THex/so/g3xJ/J3dC0fe0ftF+jY6fvr5PQfsA+jWoXxxf+y7y
8zfuxR++d/7rxtpxq7/96X892etLJP4eHT9dqvFTPv/Vxc0vNl2c/GKSL/F1
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
pcwf8wkq3+a/XOhThB7zlcwf8yWqH+WP+RjVv7b+Nf2p/Jgv0f2j47+03Yb5
WKbHfIWOT9dH5NPxY75C94fSY75E43/QH/E5p+v3G+fH/APpMyp0zD82GH8Y
r25J6YceteoTF/VfpvrtNe/F8VOf/D2lH7HtWZudtNsBdP6dP9mO0kU+zQ87
+QdS/s6ezaZ00Y/OX/Sj9NH4zwb0kfgirv9kyt/p7/3HZP8oXfaPjj8aH0v6
0/0V/Svr7/11SN/m7fedv+K3m1F+2d/K+syuyaf0Lv/ZidI7e+n9LUj/2A33
/n7m+Ofp+nT24gi+PkN/smdNPt2/Tv6r+fpNfOaxcw/jz5/ox9e304/SR+M/
Th+NL+L6I37m9M4e8+dX9o/SZf9q+lP+0fhr0p/yi/50/JWH73zfPYU/P7K/
lF/2tyaf0gl+hvgc4o8l8id8rAA/7R/o3hP+BvITfmZ0gn85fjEa//H8eDR+
Y/EJwedq+Fgb5Sd8y/Qn+JWvz2h8yugE3zM6wX9g/RL+B/hSwvdsfgSftPUh
+FUvyk/4lckn+JvpT/A1x/dG42vAn/BJoCf80egE//L1G43/2PwIfmP6E3yu
ho+ZfIJvmf4EvzI6waeMTvA9oxP8x+gE/wN8KeF7Nj+CT9r6EPyqF+Un/Mrk
E/zN9Cf4mt9/o/E14yf4pNEJ/mj00fkF2mekO75J8pMaP6XHfCDTYz7hdPmd
V8hHqHxbX+2PU/wn5hOZP+YjmY74GpFP9RuNrzg95iNUv8Q/FugHUv7R+GNa
/x7lH4k/of4zEx32j/KPD/lOpsd8gI5P+ceHfITKr+1Pbf0pf8wHMj3mE07X
+OGckI9Q+XT/Yj6R+0dnhXwk84/G15J8qh/iKzq++qeYj1D9Ev/EQH+18RP9
a+tf05/Kj/kI3T/Kf07IdwbNPUJX/C3mA3R8qv85IR+h8mv7U1t/GD/1hwE9
9ZcZXb7H/gycH+Un/V9GJ/1NRif9Sa7f6P41o5P+L5TP5z+6P8vopH8N9aP8
pH/J6KT/zeikvwnWP/XHGZ309wF/6o8zOunvQv3p/En/F+pP5ZP+NqOT/jXf
n9H9a0Yn/X8on/KT/i+jk/4mo5P+JNd/dP8ayE/9Xyifzo/0Zxmd9K+hfnT9
Sf+S0Un/m9FJfxOsf+qPMzrp7wP+1B8H+vPnl/QHov6V8VP/F+pP6aR/zfdn
dP+a0Un/H8qv+Af3L/Gd1keAfzLw6yv7H3nH/iHTj/QPNax/6MqAV7H+LLd/
pL+qjXTvD4l4Fesf2x3ke36zKOBJub8s4lG0/8npo/ufYP28/hjxpNwfF/Eo
2j9m60v6x0w+6R+D+SO+5fUr7K+KeBHtryusvy7iVbn/66SAF9H+IdcP+oe+
G/Cq3J81M+BFtL8K5Pv8I16V+8ciHpT7h6YHPCn3l0U8ivY/GZ30P5l+2P+0
OOBJuT8u4lG0f8zWl/SP+f0/un/M9Mf+sYhX5f6qEvAi2l9XWH9dxKty/9fo
+D71Tzl/9471f6OT/huf/+j+m8L6m4h8qh/pTzI66c/y9R3dX4PyKZ30d5VK
fxfqR/eH9B+h/rX1r+lP5ZP+N9w/Kp/0f5VK/xeOX5NfKvJr+0PlY3+W9N+U
Sv+N8WP/jf4+BOtvIvKpftifhHTSn2V00l+D8imd9HcZHfu7iH50/0n/Eepf
W/+a/nR87H8j+0flk/4vo5P+Lxy/Jp/SSX8c7g/lx/4s/V7fR/uP1L9kdNJf
ZHTSP2N00v9idNIfBfJTfwLKp/yk/8fopD8K9avMfzaVT/qrjE76Z2D9U/+V
0Un/GPCn/gXQP/UPof5UPukvQv2pfNI/ZXTSHwX7k/o7jE76y1A+HZ/0Fxmd
9M8YnfS/GJ30R/n6je4vQvmUn/T/GJ30R6F+lE76Y4xO+quMTvpnYP1T/5XR
Sf8Y8Kf+K6OT/iHUn95/pL8I9afySf+U0Ul/lNFJf5TRSX8Zyqf7Q/AZ7F8x
OvavEPzA5BN8p0T+hH9g/wniG8ZP8BujE/yjhh/Y/Aj+g/05pj/pz4H1S/05
iG+VyJ/wI9sfgq8YneBjsP4Jf4HxE/4C+FTCh4yf4EOwfwnfgv6ShJ/Y+hH8
wOQTfMfoBP/A/hPEN4yf4DdGJ/hHDT+w+RH8B/tzfP1G9+fA+qX+HNDfnx+C
H7l9GI2vmHyCj5l8gr8YneAvNj7Bh4yf4ENGJ/gW1u99/NH9HUYn/R1GJ/0z
KL9sXH6qn5dK/4/xk/4NlE/ppH+oVPqHUD86f9LfgvrX1r+mP/Y3GJ30V+H+
JfmV/iLjJ/1FOH66/yr9Myi/tj+Un/T/GJ30dxgd+zvw9zFJ/wzKL8jP+l+U
n/X/SP9GqfRvoHy6PqR/yOjYP0T0o/Mn/S2of239a/rT+w/7q8j+pfWr9BcZ
P+kvwvFr8un8SP8V7g/lx/6fg89a84WzP+P5R3wfNAcN6R6/Hxo+K/8M4NfX
oFly09q/PPzIPYDu/n2/C794/V9f9VyvL/Zz3+Fnxzc7+Z6/LRi+bu9F+m4g
3+sH3fien3TXbw7yp9jvE8tno68+6T0f3ecDnl88P/w8Efi9f7t7vxfwKz+/
8HdfOWGLVaeMA36Pb7rPfv/H9eg3c7r1gvVfa7//esjw80oYf4P+qT9c966/
Wub1y47f6+vdZ78/Lnl2zVbfnzzZ+jc/N/z8LIw/D/h3AfmOD3X3k8cXMy+b
t/DL1z1i91f3e/NrvX724ruvmnvBLJv/AfD74s9eMHHvg5/w8wXHbP3SzQ/e
4v9vc9XWB/SemuP3Ryf/YeM/Ys2B9156lOMT3e8rbvD7BMPxV9n/Q/Sf2/K6
jx/t+z+Uv3R34H/M5E8++cCPfPuM2UB3fPTqoX5/YXT8/fZOP8e38P+vluzy
tefO++hEw4fHXX/I1D3n+v+Ddfp7fvfIH/W/w/VfffLB735gmsfvd8L/e23x
rXf97vR7tJ7Wh9/zX39/DfevZ+vf6bdBfXI4vp9v6X6/3p+/4fo87ucz2m/8
atasH24QP7z27HFPLlhrvy87/uMrzjrm8g3u71P+qP+9Hv8Ox/f7e8uh/nNh
fL8/u/2ZYP2L3fjPxftnaQP7M8v2Z5Mhv/fH4P+HbbL61HeeNney0fd+9o65
Z/Z8f3Tf9Pk6JNhjal9s/cfL55eD/ZoG/NOBvw/2cyegrwa691eJPJt/vL4P
8tR/TC+q30FBntuntUF/9E9+/iPyKX17oOvL7Cvo7/ZVLlwc6Z6f6vV6/x0S
5A2a7nf/n27Whf3bGvj9/Af6F/0c5aN/mA38nv/r5+i/PD79xKk3ve61F/r5
Lfz/ubvks46/OFw/aFY8vV3/uhu9v3TrSTe+41vv9PxxW/ms/PeH6wfNuUtu
/ewJp3l88N5Tpv77Jjf9X8eX4PfNO/0cXxna2zvc/uP/X8Tr+yDP/39j7Yb2
2+QNTB/9/4aor66fnx/E/0fs5Pvzcxn8v8hJT+w1d78pjt9ts/L+F2+e4vb3
Mvh/kyhv/frK9bq+bwny/PfpdX5R3/X24Qv3/HzFtzx+OOONc47b8u3Of3r4
3IfrZf2P9v25CP4fRD+v2XB97Xoav7j/6N7t/onxIns+fX9WSTym8c+qEK8N
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
fV54/qk3f27XVunxfdAsWDX2hb3f6fXpt4TP6+3L4a+d9+CP9gR+fQn9DXOA
/oSNv27Vtz/9ryev7m0m9HUv/PC981831gb+H+1l/Esu/+PrO71I3wf1N/oN
Hzv3x58/wPPLbj5bgvwJdn/LZ6O/+vo7vv+2D7xk6/fUrdOOn/x512/Ob556
4FMLvb+iq2f5/6/LQiw2/Z//m2U/vHadxzd/ddIT/+vf3f/cMPy8we9PvLjh
eqyf3+rhehl/d/0au7/+dfj5BRjff39yyR3j9152lden27e8+6hjvr6Pjd/N
3+tnX/7ZcRN2umuC3V/7fHD6v+3xPY/PZi795h7/cumfAb/X7/cdro/n//df
/MXzDtzN6z9ql/X5HB/uR7q+tr8nyGfz7+F63V/8fb8+3D97Ad3xF1kfo8v6
GD1e3wd5g+YcuV7t+18Eeb4/4wO/6989n/j7NU80kY6/H6GvQbO0u7+Mnu6v
7rV4TVh/t+9L5fq14f7y+GJM9NH5rTt7Q33Xy7/m66+5dzMfv/s8FehTTf74
cL2s/1z/fYBufbx/Uz/r+jXhevr82P53uMjj5v/OCfYqP7/R3g3MHujzEe3F
QOyl4yNLgz0y+9OC/SlxfLw//P6J9jDffzeIPYj2wfF1sr82vtjnhtlnef4a
9vxFe5fvz2hP+s2XxN4oXZ6fFp4f0y/as/x8rwj2pi/6OT56jtgrXZ/dgz2j
/gX8X/IfkT/7v5p/8Ph6tH01+cR/Gp3YX5hf8q9gX1J84PHnaP9h8kn8YPzE
vxid+EeTT/wf5p/o/5x/dHxgdOL/C8hv2PPZrbfbL4wPuuudPi68bP+Njvsv
Fy6OdLd/cn8XuL+NfrLoo8/XiqCv6rcv6Ff1n8Yv9s7nD/FXvD7bL2I/gR/t
477OP3u/Ra/5ledn3f3i9Yul8tnqK+F6Wf8VuP5eHzhHPq/ecH1X+PquCM8b
tT+4P0YX/2X8xH81zH9Fe0Ltr9GJ/cX4xfRbEJ7nnB9IXNFj8V20N9R/9Sr+
qzD/pc9rxT8X5p+jvWD3f3o+MP62d7Q/cn+ZfLy/yP4Yvbt+EvifSUD38zHd
u/8+EIkvo32f6/gSxl8kvjD+z37xK08/vLM/3+/efd/f3XeP23+JD319u3iw
RLqfX+riQ5cf59NvTv+nu5/5hw84/n1i9zybfHn+ja76qP7/2OlrdGK/XD/V
K6yPPx/EPhid+Af0/0bH/IrEr67/aPtWgvxs30x+957sM84f7a/Rif0F/uS/
jE78k9HjelP8Au0Txh+lEn+A/h5/SD4A4/vzJfGw0XF/SXxt8iV+s/FJ/Gby
SfyG62Pjiz20dcP4ZnG4n3L8KvFXj8VfxL62pp/IrfhvGx/9N9HPxifxvfHL
/dWrxD90/XD9u3ePf+T5b1l8cH+4n2l8CPL1Zc93YfEL8V8mn8Qnxk/wlaJ0
Ep/U/LPJj/Ppw/NE/XctvjB+El8YncQXtfjK+In/sPkRfALGT8+PzU/wlR7F
V0au3wbna4K/NP/ZRPrUAviL6ffZ4A+z/yb3n/FHf0zw4YzP1eInmF+KH4xO
8BmYf4ovaH4u8zH5JD4yOol/In6a4z/jJ/FdHD/jk0Yn+GqJ80/4WwnyM/7m
6y/rA/ih8RN8EMZP+GCJ8hO+CvSEnzp9tP9D/AbxN5sf8Y9GJ/7d5BP/bfzE
f4N/SfFNLX6x8Ql+ZuOr3Ar+DOMn/Bno+jL71zJ8Nu7Xn+xfi40/2n6ZfIIP
ov8zOvF/iG/a+AS/dP1kPiw/IPit0dVeVPwLrq/xR3vF9mdSy/JHEr+UyJ/2
r6nIB/33Bn7Xj8RHmF8aHe2rfr9x+5Dub5NP/K/xk/0xOokvffzutVjHj+tB
40/0X+jfEf/E+JqN38P4GsYVup8PjNfrc6svpW8GdNd/0eves8nZb/2Nyb/r
1eec/uWrvD88fu734vWD5ruzvjXhO3NeBP4x4//z/3z/tRfO8fG76x9tovwx
oPv90/Hv2kb53p91c5DX78XxBs3d4XqlO/7Vfd4R5Hv+dXf4rPw7Gv/y2J/U
u/Vz1zR/e4rHj7eEz/3ecug/iv1Cyu/nd78nn+X572F/UezXUv5fG/9//mT7
iQ8c6PR/2POoc/7rxkeNrucXld5d7/j234Xrle7xx+1yvTxfPfz9gVuCPkp3
/uWhn031f8bWrxvPfv+j98gbfrr7IV93/C6eN1b9vH/l4XC90v188e3h+n4P
zy/fIvqMBbrXb2O/pMqfCPLt91t62F95Yfx9FuH3/rj4ud+7EPonO3zN/Euv
ywc8vo6f+70TwvWDZpeDLjnq2r+337fv7Tr87L9/rp8nBrqfHzr7M79d8vLd
fv/+Zuvlh7zwpaeNv7M/O9j8T7x82b3Pn7kO6Pb7/mLfvL8+Xq90j8+XyvWq
39Igb9A8FvTp96K+un7+/Hb8vj9dPjVT47de99nra5083/8PDz/7870gXN/v
LRB5kd/H/1CQp/NbZee4o766f25/u89jQB+z9d85XK/r7/ZV/IXNb2n4rOvj
9lO/B36jR7yR+iegJ/9k8tE/if03OrH/baS7/uJvQP4Y8I8Bv9t/kVciv/un
u8D/oP8UecDv/kfmY3TiP4Hu+xvPE1H72Ea620fxPw3zP/r7t5E/+Q+wj27/
xT+afugfL4znn5J9jL+Hnf2n2HejE/veq9h3WD+378vj77Mm/y/+sa34R1sf
4h9BfvKPRkf/KOvVKh39R/y9cho/GB3jB/Fvhfk3sY+2fsQ+mn5oH8X/NMz/
iP8w/Yj/gPgZ/Yf1FyT/KPYR5Lt9FP9pdPSfYt+NTux7r2LfTT+07+L/Tf5o
/79FW/GPtj7EP4L85B8L849LIf9A/yHjmXwSPxQWP8h6FObfunfMr/z5JvkR
jL8J0PU1aGb8/aue2fnNdj6nmj/F61n+NWb8nf338e/d4nO7/uht36T5E/Ev
bZTv/qkEeerffH1G50/o/6aB/Fr+NM349wv/12H2y+iPgH+aB//vEc+rKr+f
H34ofO73LobzrfG8cPYfnf3bGujPQP5k+HnyT98L1yvdx78d4nv8/4lbRB99
vvB886XxfG7yP+KPYX0cH4n/15D928PhevPvoL/nN/Pg/x8w/70Uzv/G/3NQ
+WMgXz/3e1+E/3+YEc7rW3xRIv+2Wv/v4fn+44f2xO1fZ5+8Pzx+7veOC9cP
mh89dMTgzXtto/hc747h5+ft/oif+0L3+kBnv/z+Qv/R2R9/vjp9HN/s6P58
o3+6IVyvdH/+MP6O8lS/Z7U+Jvr5/Xv98PrnYP3c/3Tydtfz2+Lfvb5x2Okz
L3jTc27/0L/F61U/74+O1/d7hwZ5Of+9Lui7/vn9j4/0v/qG3xm92x/3//Fz
v3dBuF7n5/hE99nrJ0vls67f0nA9zX/Q/wBdX+Z/KH4n9h3yo2Tf20j3/R+d
f40B/xjw+/01Or/h+RH6R5EH/Jgf+foQ/2h09I/xvCC1f22ku/0T/2Lrj/7l
wnh+j/kHsH/O/wjgV+j/ZoTzytn+xd8LzP4R43div219iP2G9Rsz/fcLv8eZ
/fvtkJ8Q/9dU/J/JJ/4P5u/+T/xDy/xDPI9M4wOgPwPr6/cf+i+xfzS+F/tn
64P2T/wL2C/3L2LPS+RP/gHk+/Mr/s/0Q/8n9g/ku/0T/1iYf9T4XfmJ/bbx
if0G/+r2W/y70dG/Y/xP/F9T8X8gP/m/wvyf+IeW+QeJD2x9SHxQ4vgeH8h6
GB39V/ee6k8l0lP9yeikPtNGeqr/mP6kvgT2P9Vn2sg/BvK9P4bUt0x/Uh8y
OqlvGZ3Un0B+qh8ZndR/EN8x+mj7meoXNn9Sn0J8x+j/EPA6Wt8pUX6q35h8
Up8xflLfMjqpf8D6pfqX24fR9S1bP1KfM/mkfgP53x4g3/EpUn8y+aS+ZHRS
XzI6qc+B/FR/Mzqp/yC+g/UPmx+pX9j6kPoU4jtYH0L8Cus7JcpP9RvA31J9
xvhJfcvopP5RovxU/wL7n+pbbZSf6nOwP6l+A+u3K8j3+gepP8H8Un0Jxk/1
JV//0fU5o5P6m9H1e9Df6KS+YvMj9R3gx/xjzPhJ/ahE+Xp9tt+kPgXjp/oN
+j+jo/8j9akS+VP9B+xTqs/Y/El9wuST+lGJ/JNNPvofUj8xflIfMjqpr6D/
Mjr6L1JfAv1T/QLtO6xfsu9tpLt9J/Up9O9GR/9O6m8l8qf6Doyf6juwPqn+
BOuf6k+9yJ/qZ8ZP6jM2P1KfMH5SPwJ6qq9AfpHqJ8ZP6kNOH11fQf+F9Qma
vxD7jvULtO+wfsm+t0pH+07qU+jfsX5j8kn9zeST+g7sT6rv2Pik/gTrn+pP
tj6kfmb83Xuq/xid1EfaSE/1F5q/RDyO1kfayD9mdLT/pL5k+pP6jNFJfcno
pP4D8lP9xuik/oL4C9B5f9Q8+P0uUh8qUX6qz0D+kuorxk/qJzY+qY8YP6kv
GZ3UH4xO6k+Qv6T6kq0fqY8h/mT0L8Lvc5H6ickn9R/Tn9R3TD6p7xg/qY+B
/FT/MjqpvyD+gvUHmx+pH5j+pD6E+Esb6V6/J/UV05/UT0w+qY8YP6kvGZ3U
H4xO6k+wfqm+1Eb5qT5m+pP6Caxfqp+YfFL/gfml+o7Hb6PrO8ZP6mOwPqn+
ZXRS3zD9SX0F+FN9w/hJ/aZE+Xp9ts+kPgTjp/oJzU/Qv5H6UIn8qf4C8XWq
j9j8SX3A5JP6TYn8qb6B9gn4k30C++X7T+obRif1AVs/Ut9B+210Yr9h/ZL9
biPd7TepD6H/Brr7b1L/gvVP9RWjk/oK5Cep/mP8pP4D+UmqX4H98ed3dP9q
qg/Y+KR+Y3RS30D7BPY72ScY359vUt9A/1Qi3f0Tqe+g/TZ+Yr9h/ZL9Bv3d
fpP6EPpvrJ+YfFL/MvmkvgL7k+orTaSn+o/xk/oP5CepfmV0/V7fa/1jo+kz
KvQxSpfv0T/g+GXj9BkV+hilj7v/E5utvHcypb/pp7e8Y8/D/P5B+hlnHr/i
F8f8gep/xLZnbXbSbgdS/kOPWvWJi/ovU36RT/enk38AlX/Rp7782Duemknp
oh+dv+hHx9/m7fedv+K3m1H+vea9OH7qk7+n/N36b0n5O/3t/5fZ/lG67B+V
L/pTftGf7o/oX1n/2XT8M769zy/nvHoq5Zf9razPzJp8Sl98zXe+et+66Vz+
317zTzfO9PoV0r/x0IRZJx68mq7PzGsO2OGnn3k15d/p/iNf+Tfzt63Jp/dP
J/8Iyr9wyqN3TPgwv39EPzp/0Y/SVx6+8333lMmU/rEb7v39zPHPU/279d+J
8h8x8ZnHzj2MP9+yf5Qu+1fTn/KL/nR/RX/KL/rT8U+96tzDD33FJMov+0v5
ZX9r8ikd/Vt8Z/5pDPgnA7++sv+L8qj/LHF8xw/jeMw/zgC65y+1/CheP2he
vn7SDk9d/Vubf2dPvb/l2PB5/fxu2PD69fnZXg9PX/bnfj6443f8/tjweX1+
Fq5Xfvv/994V13zsttd/yOO/nbZ4zR23PbAV0L0/peO338ftdfbS8d3L5Hr5
f8PejkGe2lf3HwuDvEFzZdBH6V5fWPdff/QP9v+oop+fD7h4KH+a4Y/d+vj5
+2497zf+Th+Pn48N1yvd+6fi9f3e+CBv0ER9+r2or/q3R2H88SB/g/0P1+v6
7wrr7/Fx/NzvnR2uXz/+UQuPvnbd//j4Q3vm9an4eb3+R254/aAp05e/54Jl
ji+d8djcHw4We//X6eFzv3dbuH7QTD9z5nf7k5z/e4edt/PrV2xwfw3tj+Nv
nb/w/H9ov6Y4ftXZK6/v7hiuV7rvX7y+34vyBs13gz793g5BX7XPHud3+vn/
03X6767/79m7eLieXl8ZN++a/Xda4PW5Y5dd+su3vnHM5F8Yrlf9/fmI16+/
P4I89a8e/54T9B00J5236vyzbnD8dtUp8z85ttL3P37u9xaE63X93b52+nl/
YPzc780K17P8Z4zS5b3ZOH/qPwZ6dfwaP6XHfMXxQcU3Yr6T+ceHfInKR/zO
6DHfcbqOH/OlzB/zCSqf0mO+kukxX6L6Uf6Yj1H9a+tP5cd8hek/m9LHh3zJ
6fL7Nr2Yj43Y35Cv0PETP8in/DFfoftTW39Kj/nKCPkh38n0c0K+ROXT+y/m
O77/Wt+eFfKlzB/zCSrf9LtH6PL/gL2Yr2T+mC9R/QrSxwX6ES2TH/MJuv41
/ZN+6r9ivkT3L9HHB7r/vyTyx3yFjp/4QT7VL+YrdH9q6w/8Kf6H8ccoXb/f
OD/mH0jfvkLH/GOD8Zf97OivDL5P86/OXup56ky/5bZr5+x/1QuUv4tP96P8
XXyP+XGST9enk78v5e/yl10pXfSj6yP6Ufpo/Mfp7xuJLzp93ImbzXvgdU9S
emeP7fff2f5Rftm/mv5U/vtG4q9Jf0oX/en435vy8f3PvYTvv+wv5Zf9rcmn
9HHb37Xrl9Y+ztd/aC/t970T/dGtX3Xip894ic6/w1cOpfydP0F8Kcmn+nXy
D6H8nT3j94/oR9dH9KP00fiP00fji04f99n/vvhN6/j8Ov3t/zvZ/vH7r9u/
mv5U/mj8NelP6aI/Hf/7k5/4ypUXOX5A9pfyy/7W5FM6wc9q9asS+RM+VoAf
1wfoCX8D+Qk/MzrBv2r4j82f4Dc2f4LP2fgEH2ui/IRvGT/Br3z9R+NTxk/w
PaMT/AfWL+F/gC8lfM/Wj+CTpj/BrwA/TPgVyE/4m+lP8DVfv9H4mvETfNLo
BH80OsG/aviPz280fuP6j8bnSpSf8DGTT/At4yf4lY8/Gp8yfoLvGZ3gP0Yn
+B/gSwnfs/kRfNL0J/hVL8pP+JXJJ/ib6U/wNZNP8DXjJ/ik0Qn+aPTR+QXa
Z6T7/Ufykxq/0e8UuuIrMR9w/mh//feZkv8J+QiV32P8V4R8YkT/dchHMn00
vpbk0/UZja84PeYjVL/EPxbo+1J+xB/J+tf0p/JjPkL3j67fuhM2zHcyPeYD
dHyqv8hP8wf5lD/mE3T9KX/MB0boH/KJTH9puw3zESqf0mM+kekxH8n00fha
kk/nPxpfcXrMR6h+xq/9r9qfNSvkO1T/2vrX9KfyYz5C94+Ov+YfN8x3Bs1y
oSv+FvMBOj7VX+Q3FfmUP+YTdP2BP/WHAT31lxldvsf+B9SP8pP+L6OT/iaj
k/4k1290/xrIT/1fKJ/Pf3R/ltFJ/xrqV5l/6l8yOul/c/ro/iZY/9Q/Y3TS
3wf8qT8O9J9d05+uD+n/Qv2pfNLfZnTSvwb7k/rXjE76/1A+pZP+L5/f6P4m
o5P+JKOT/jWjk/4vlE/5SX+W0Un/GupH6aR/yeik/83opL8J1j/1xxmd9PcB
f+qPMzrp70L96f1H+r9Qfyqf9LcZnfSvwf6k/jWjk/4/lP8n40/xndZHgH8y
8Osr+x959/6dgBfR/qE20qcB3c+fjO7Psv9/Yf1VDeuvOjbgVax/bFeQ7/1D
EU/K/WURj6L9T7Y+pP8J1s/7nwR/Mzr2x0U8ivaPNZGe+sdMPukfK6x/LOJV
ub9qUcCLaH8d0J+F9d1g/6D/K+JFtH/I1wf6h04PeFXuz4p4Ee2vAvkb9McF
vCr3j80MeFDuHyoBT8r9ZRGPov1Ptj6k/8no2P8k+Jvfn9AfF/Eo2j9m60v6
x0w+6R8rrH8s4lW5v2p6wItof53Rsb8u4lW5/2t0fJ/6p3x/unfKT/pvjE76
b0qlvwnlU/1If5LRSX+W0Ul/Dcrn/KP7u4xO+rtQv6R/pf8I9a+tf01/0+9u
2B/S/4b7R+WT/i+jk/4vHL8mn9JJfxzuT6Kz/izpvymV/pvC+m+UzvqbiHw6
P+xPQjrpzzI66a9B+ZRO+ruMjv1dRL9Er/Qfof619a/pT59P7H8j+1eQPi7Q
U/+X0Un/F45fk0/nR/rjcH8SP+vPUj59H+0/Uv+S0Ul/kdFJ/4zRSf+L0Ul/
lNFJfxHKp/qT/h+jk/4o1I/yk/4Yo5P+KqOT/hlY/9R/ZXTSPwb8qf/K6KR/
CPWn+0P6i1B/Kp/0Txmd9Ef5/ozujzI66S9D+XR/SH+R0Un/jNFJ/4vrP7o/
CuTz54v0B7n80f0/Rif9UagfXV/SH2N00l9ldNI/A+uf+q+MTvrHgD/1X4H+
qX8I9afzJ/1FqD+VT/qnjE76o3x/RvdHGZ30l6H8P9k/xHeKn7Q2v9H4ges/
Gt8pkT/hH9h/gviG8RP8xugE//D1G40fmP8n+E8NX8D+HFi/1J/TRrr3LxD8
qIavgPyEj8H6J/wFxk/4i41P8CHjJ/iQrQ/Bt6C/JOEnNj+CH9j4BN8xOsE/
sP8E8Q3jJ/iNjz8a//D1HY0f2PwI/oP9OUYn/Tmwfqk/B/T355fgRzV8xeQT
fMzkE/zF6AR/sfEJPmT8BB9y/HA0voX1e5//6P4Oo5P+DqOT/hmUXxid9L8Y
Hft/kE76N1C+0aV/qFT6h4yf9A+hfpSf9Leg/rX1r+mf1qfSX2XySX9RqfQX
GT/pL8Lxa/Lp/pH+K9wfyk/6f4xO+juMTvo7jE76Z1A+1Y/0vxgd+3+kf6NU
+jdQPqWT/iGjk/4h1I+uL+lvQf1r61/Tn45P+quMTvqLSqW/yPhJfxGOX5NP
50f6r3B/KD/2/yy5ae1fHn7krFbp8X3QHHzWmi+c/RnvLzkkfFb6LsCvL6Vv
DXSvr7yt95MHL75vZU/3v/vs9q/j9/rwguHrdhh/OsjvA93jh+7zFJC/uf3+
mHw2+iXPrtnq+5M9vus+o37e/9693wvz9PMLex6z9qarJ/n93a2/99938hz/
jeuh6+P/v9Ttx0r7ffDu81qv/4X1WJ8f/eG6d/3VMq+PduPtD+P7/x+tOuk9
H93nAxOtv7H7vBrWdzbwzwD5U4Hu8e2Ury2/8hW/8/9n6H6P0fVf+OK7r5p7
wf42f/x98fOWHXvTSQeuMf4PnXzRQ3sf5/fncVMuO23lNL+/O/kP96L8mdb/
eupuhx0575gHgP6C/f5n/7ktr/v40f7/aUP5C2aC/BXGv8W33vW70+/ZDeT/
qBf4p803/ovg99sXDcf3+BD//2q/+U9/8rreZLMfvzrtq7/5xZINfp9nyO+/
jzjU/w6/fyfe9967t3vef9/6Mvh/r8knH/iRbz/u/Tv4+/jjhvvnvy/a6T9m
8jv9N8ivh3SPnzv5jj/M/8avZs36od9f173wyK+u/sEL9vt7Nz35zdk3L1rj
9/dQ/8dhfL+/NxnKPxTG3yuOf4b3L7bD8V+I98+CFvZnlu3PlsP9dfwF/z/s
1vceNuOuKY5v3Tx9m3LJlPT7ez2t/0R7TO2L6TdePr8c7NfuwL8b8KN93Ano
+Hz78yfybP7xeqU7fn+QXK/500FBnurft9/3RPvTrcceoJ/nLx19JtD1ZfYV
9PfnRy5crPQoT+e/pf1+aZRnfsx+fz7qq+N7fxr6l0Pks/JfEa7X8ecB/y4l
0nex+CleP2i658nrD5fB/89dIZ/19zWbcP2gaY897fbr93f7ufzGbc/c6oMP
efwhn/X+jdcPmidXTf3Qib/0/Zm56ftue88Pfub4Evy++eJP7f70639+q+nX
2atXGh3//yJen/8/UK/X+lmUN2hUH13/qK+unz8/B8D/I3byHb+9E/5fZPGP
H3//+3/h+OEZb5xz3JZv9/z6Tvh/kyhv0Jwu16t+5wZ5/vv0So/6rvcPiz4/
ffr5jn9ss/L+F2+e4vHPtvJZ929OuF7W/2hcf/x/yW3LKuF/JFxP4xfb/+6+
e7pZF+IX73/p3v35jPGmxmeTTf/PhXhNn48ptn6HhHjQ4r8W4r8Sx+83awPd
858Yj2b7d7DEY2Nh/JVgX5N9sfE13mPxsdj/HrP/Md7M9nF1iOf6vecl3lO6
2O8W7LfpF+NJ5l8cvzwoxINKnwHrP9voZ4V4rt87P8R7/v806r/PDvHievsb
4sl+b0KIN/X+9vhnkcR7Sj9T4kGVv0jiRaX/H4kn1b68OcSbar8m2/wWhXhs
0Ows8dzaQHd870GJ55R/jsR7Sj9R4km9vzeXeFPpF0s8qfodH+JNXR+NV/u9
GM8Ompsl3tLxr5d4TOkaz+n6LAzx3nr/IfGc8sd4T/dvlfmPGG+q/DHbn/Eh
3hw0l0u8qvxjIZ5V++31X433ovy9LL+ZHOJFpfv9PT7Em4PmphDP9Xu3hHjP
/19D13/TEC/q/mg8Kftj8SbNb8G+pfy1RHrKv2v5KfDPNv3keTU6yd+BP+V/
QE/5PcR3CZ/A+BTk7wbyE37h9YXR+S2Mn/Jzk0/yb1jflH+DfgmfMDrBH4xO
8tta/gb0lH+Z/iQ/r+W3Jp/kp6Y/yT9r+bnnf6PzT5NP8rMS5af83ugkf4vr
n/P/Gn7Rxv1L+b/RSf5q4xP8w9aP5LcRf8j5rY1P8ncbn+Tnfv+Pzs9LlJ/w
DdifhF8YXb9n8Vn32X//oHt3fK6jbw90fZn9MzraP7lwcaR7/KzXQ3xj9NHx
2zTg9/xR3mv5O8zPf98A8c94PYtfU/xsdNl387+HBH2VfwzGR/x0MsgfA/re
wO/49kHyWdfvoHD9oPnEqTe97rUX+u+XoP3Tz6p/vH7QnLvk1s+ecJr//sN7
T5n675vc9H9tffWz5s/x+kGz4unt+tfd6P1tW0+68R3feqfXt7v73fcP7V9n
j/Yw+kXw/yqXwf+fRHn+/y6qX5S3Pv8TfXT97w/66vr579fE/3NW+XsA3fsv
xn/hnp+v+Jb7ly7/9fpavD7bv9PD9evjryBvff4h+qj+i4O+g+akJ/aau98U
5+/yX89vtpXPyv+WcL3G7+5f0T7p57Ubru8diN/5+V6S/6B9MHqMp2j+3GP5
c4znaP5n9w/J/xC/A/29vwDrQ/J9w/DNGO/R/LlXyZ8Ly581XqrgA4XhAzFe
y/ZX8pteJb9pWH4j+WPD8kfJ/0ol/2tY/rckxGs5/70pxDM0fyksf4nxEs2f
G5Y/x3iN5ne9Sn5n8yP5XWH53VkhXqL4QsvwBcmv20p+bXEKya97lfy6sPz6
4hCv5fxR46UK/lAY/hDjtZz/kvgE8x/7fnT+4/2j6N+JfQL+KWA/pwDd/Xf3
rvEarS/A/Dx/GI2/J3zP5Ox74Rev/+ur3P/NGX72/3+S+gDI9/y9s7eOzx3a
fab5+9995YQtVp2C+KY/XxJvGX0/0acv6yf6Gv2qrQ/oPbXU60+dv34s5o9n
YH75EtAn2PPR2Uuf/+qTD373A9O8fw3x8y6/9PoF4u+brD71nafN1fn0e3s/
e8fcM3uev828bN7CL1/3CM1fu+dpFsh/yuSPO+WP+t1r+mH+0uWXc238Lh7w
+6OT7/2fQ3z8Dr9/l+zytefO++hEe77HXX/I1D3nuv7D9Z/j9QfM749Yc+C9
lx7lv9/QrZ/X17v9a4yO+d0wvzwD80s//3PXa88e9+SCteZfxn98xVnHXO73
d2dPHR/r9tf7s64e6v8XML7bv05///0RrO88e8HEvQ9+wn+/75itX7r5wVs2
qD8P97cH+eUG/afD9Xf8ptsff766/VkF+T/al5Q/GV2/h/zT6CQ/AfkpPwX7
k/JPWz9SPwH5Kb8CesqvTH73nvJD4yf5H8gfA/mTYf1S/mx0kh8bneRntfzE
5kfyC5NP8sda/gbjp/wL5Kf8yuST/Mn4Sf5pdJKfGJ3kp1Af8fWL//dN82eT
T/KrEuTn/Arkp/zQ+En+Z3SS/xmd5M+u/+j82Ojxeaf9c5gfIf5cKviz6Y/4
c4xHcnwj9UCgu30h9UWQ7/3rBL83+QS/x/Wx8QXfNjuK+PbBwZ7l+oXGWwx/
F3zV+Am+2ka646uCX7cMvxb8GeKDhD+bfMSfJV80/RB/F/yUxh8Sr4N8vz8E
vzd+gt8Xht8Lvmz8BF8uFXwZ1j/hy7D+bv+lvmH8pL5hdMT3BN9vKvi+jU/w
fRg/4fswvuengl/b/Y34tdQ/QH6qfxRW/xD8vcfwd4JvmH7KV8FvTb/R+G16
PiF+SfV94x/dv5bwb5Cf8G+g+/Mj8VfL8OEYT9D6AND1ZfFVYfh1jCco/tkq
He2TxjMMX47xBMWH7f5DfPhOqL8j/h3jhWxfYryR8fHTQ7xC8dteBb81fsRv
Y7yRn3+NVyr4d1PBv0F+wr+B7vHHTtDfgfjwihBP0PqA0dE+SHxVGH5N8Eu4
vxM+bfykv9TmR/DpGj5r8seFV8ZXCH5bw5eNn+DLRif4cg1fN36Cz9r8CP5o
dIIfmnyCLxud4LMwfsJXbX4EPzX5BF82OsFPa/ii6UfwaeMn+KPRCX5t8gn+
bvoT/LqGv5p8gt+bfILPxvEzPlvDn42f4MtGJ/hyDZ83foK/G53gh7Y+pD/Z
+En8Ds+39Ymn/upx4ZXxkYMCXmr4qcmV/muzn1cEPNbwW7s/EL8l/t/4Ix6b
44eIh/Z7mwheqvTlgqe+tOH9e4bHTz8JeGy/d03AawdNxEPXyw946fr9EzxV
7dPmAW9V/+zzXxfw2vXrL3il7t/lgmcqfUfBQ/X+2TzgpXr/T4T738/P7yd4
rNYfzw54bbYPa0/eEK/N9mXzgAfr+v/B+tcinjloLhQ8VNd/UsBLB826/93h
ocp/t+Clcf028/+vDHhttg//HPDaQXOp2Jc/yPjXBDx40Lwx4KH9XsRLvf9d
1z/irTr+zFbl/3PAa9U++v9PLBK8VOk7C56q9//CgLfq+H7/bxrwWno+pVY/
Mv1I/cTopD/cxif1FbA/qb5i8kl9yOik/gPzT/UvkJ/qW0Yn9ROjk/qA7Q/B
900/Uv+p1U+AnuofbZCf6xuAT6T6Ty/w5/qGzY/g/zY+qR8ZndQHjE7qSxGf
yPUxv79H15dg/1J9pI3yU33Nxif1E7+/R9dPfH1G14fi+Ln+Y/JJ/cf2h9TP
TD6pjxld+n9NfrQn9HydjU/OX5UoP52/Avnp/FiJ9HQ+zOjkfBjwp/N1Rifn
54xOzm+Bf0jnl2x+5PyRySfnyyB+T+e7gJ7OZ4H8dP7K+Mn5KuMn59NKHD+d
XzI6Ob8W6yP5fJqtHzlfZ/LJ+asS5OfzVyafnB8zfnI+zOjkfJjRyfk6o5Pz
c0Yn+D/Ez+n8lc2P1AfayJ/qGyA/1S+AP9UvwD+n+o7RSf3G7evo+oCNT/Bv
oxP82uikvlGi/FQfMH6C7zdBfsbvTT6pb4B+Cb+v4duxvpDrIzX829d/dP3E
9CP1H6OT+kkN/7f1IfUj2N9UHzA6qQ/U6h+2fqS+Efcn1zdq9aFa/Qfi63R+
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
2QcOT+j/XNqvptZnMd5efiL7oFU+9Psu/Ln5d7jOv13YiP/VJmjPyXcu8u3w
o6w/Lj4f9Jf+9ZL+lepPHV+Pi/0VXh/zV4I/HW7P7eL3bYL+wm/+/oW8dBC8
g2t/anC9jf893n4o+uf3/8fb/+G//YLrHf+450vwj86Pw38VrOek/qqm9FfI
J0n+dfKd4F+1X1z/6oL1HPsHVl5J2Xch3yT1V7VEf+Up/WX6OS/Rz3lKP4d8
UcO/qL0+lH9cufKPyZdrX+UrMT8OL65vJ/qnneDsJ8fvB0rYlyG/T1R+9/ZX
wr7wz7/uiZP2P6Ctb/+zB38x9Ts+Pj65sPdc+2YfuvaL//v4aWEvrpPx3eD8
zSen3f/E3Z87vKlYz659W/+u/c8/LfrT2fDP17b21+EJ/vK4lQv/OzzBDw5P
6Af1rxyu/lXCfnXtJ/gtD9qP+c21X/xG/OzqJ/hX7h/xr4xfpL8cntBPDg/H
Oxm/UH5S+yMvsT+k/97+MH9A7u/Xl/mvDtf5TdjXrn2z39z9E/abaz9hv+n4
uPsbHzo5juybszeUp9h+NfurmrS/avNrBs68l+hvd3/V34n+iX0S2feuvslX
pcT+SY6fjn/x6+fP1n+Wsg9CeU7ah9I+f2595yn7JaG/XPsJ+8TVT8RX3PMl
7JMy/ezHN/hz/rVrP6G/y+wLVz9hXzg8YV+U2VeufkJ/uOdLxCfk/tH6cc9n
8ZVKKr5Se/x8/tjoQF86/enat/hLLvEX1z/T325+VX8n5M+Pf6CPY/lNxOfK
7Cf3fAn7weGJ+Ix7/oR9IfIV2Rdl9pG7f8L+CfV7bP+5+gn7zuGJ+KS/v5Wn
1kci/pYH7cfxN2k/ih+6+on4oMMT8cE8bD+KrwoexU8dntB/Gr/R+Jt7voR+
dHhCv7v2E/rb1U/ob9EvkX3j8IT94vBE/Mzdn3ZL4s9y/yj+LDh/jv+yVHw2
nK+N1q+ufoK/HJ6ID6r+c3hC/2l8MwdPxC8dzvOk/INE/Nbhpl8qJfpFx9e3
H/BVin/bZSn/MWG/5GH9aP6qJe1nIb6j1Pf9S9hHnp9r6ye1D1S+w/7H8l2m
f8vmx+EJ+9Lh9qCN3D8cj6T96cY3od8dnrCvE/evayzsEZ8/tLF4WM7fxuPn
HPBvHc46Zlnl2eHjT/7tbT7/ApxyrlP8zNbyRZWGuT+8e8JgjS/WNRbl22XW
TvT8C6yc62rX72T3X5S4/7LKgkT/KT8z0X/uu+B/2L+Jlif52LV3VP79uLVR
+5RPlPx98CJPoktWXOffP1n83t9MOddp/QmWBzP36W71Lw31+d3g86xc8x/D
+l2y5pr3r2ucbuUT5P4FHzzcYO1n1eI5vX06+Z9/TzfMtvIn7Dptv8jLWlEp
+l8f4ZRPtOtq1/9HpTkx/pTr+Qnrf3NJ/5v/f/X/5kT/y+ZvjpVPSMzfpNb1
3WL+QEvUPuWTEnjPPf/jwLv/b9esV+vvapW/Bsq5TusX/NIjM56R/ucNk6x8
kl2Xun/PmvcHj+9f6O+nGqZau/fJ/U9u/XuigfKp//L+qyvFb9sE3jbrYdfV
fv6WyuQvOf7W/+aS/jf//+p/z3/Z/9T8Of2RT07c337rVD/V1jv8leOhvqmr
U/0U/r+uTvVTWf1QX1Hf65ey9kN94NrPwc8M2qurU/0Y6htwr1/K2i+rH+qb
ujrVT7OC/zc13CT8GOob6nv9MCv4v9djG1t/bsCnrn8OD/murk75sTm43uHu
/vOC6+c3q/6T/tdp/8vGr6z/Id/TP68fpP+Ntftf79q/SfSHzF+zzl/Z/aX9
Rm2/bPxlfBt0fEO+q6tT/TRF8CbBQ76vq1P9hF7AzlD9UFYfPivsgDublf9C
vnP8Jjj/B/f8CE7/VP9J/5u1/2XjJ/0zPeP7F/J9XZ3qB+l/o/Y/vL6uTvWf
zF9j7flL31/ab9T2N3b8GT8d31Bvdc5S+kmvA4fv7beawKtc92Vx+Np+o/sX
fP83fqP7U492FMffOTPR/wXWrv1+6f6V3R8+hDcVN3ub36h/pi/4jXD4O7fr
FIePOBevOHxovxFu/OfsbsXxK5oT/addeDbx/NVqYnxM/1TRQ7Xb75ajNxTH
3+FcUe3+v1ttTowf7XKfxPhX8sT88PxzE89P+bzE+Jfdv+z5jZ+q8FQCr9xj
1ylu+oLfFF7tbdfVbn9wZr9R/0O7vG2ETw7qDU7wl/M7ov7Rbi+7T2p87kmM
T+i3Jfkzya9T7f9TE/wa+nXx+JXxM/PTOzE/PH/PxPNT3utfjn/6/mXPX/ym
428b6/+oHwJeOy7n8dpxty9bX+NuG9+/2nEzj9eOG258/8varx2X8zj2s9j5
jeC143JaX+Nyvj689Jj4KRvbPnpF/Qzw2nGjL90/iSttfP/Lxres/7XjZtr/
9PygV0O/xeNl7ZfVLxvfsvGrHZfz9SkP7WZfv3ZczteHP3uFfo6rj/0c+gVa
P91+7biP4ho3+rL9i9rf6P6XjW9Z/2vHzTy+cfOjcUHF0+2X1S8b340bP6+X
1H86X/wS/BVw9XsS8S+n/zT+9EfxK/BjwIeL30B7G3v/BeIX4ceAnynPd6Y8
X9n9y57vMbH7NT6kdr3Gh9RvScXXBJf4k7ersbfBrxG/Rd8P1iz9a5b+TRC/
Sfcf1G/T51e7Pow3ef4M++/jXxPFb9H9s2YZn2YZn5vFb9L3K8wqGX/2haYG
/ffxL/UbU/E1eX5Xf474Lan4mtzftY/9Tn2ND6ldP9WuB1e7OxVfA+8d8JTn
L3DsbXD8ltB/8Pv3U6V/k6V/of/j6mfyfFV5Pu1f3hT2LwvbT9vvkwSfJLiO
j+6vTArmJeZfHf/eMv6UN4X3l/reb0nF15r+5fyk9QP/b0o8P8+lcTJtX+Ng
iqMXnhX+Lqu/sffXOJriGscCbwrxSD+U4WXtq15Q/pwU4hXVH6oXlL+U11R/
fLn24/4p76n+Ub2k/HiP4eipa0Q/CZ5fI/qn7Pk2dnw0jqTzq3EolT/bd4ne
zyh4RfVP2fiUjW9Z/8qeT/RGtfb+gtcrXKe4xskSeFX5saz9KdI/3T9X3kvx
m8aBVL6mml6ZKvpJ8JzrUs/XK/F8PUvGJxVf4vknhb/R85XEp8r4PTk+Gzu+
Ze2n+ie8XVm5y13LHv9VmwinvGR/v1H39/FvTnjwugH3d++WWTu54pRznbaf
im+BWzvVKYnno/x80U/4J+gF3b+T+pH+AF/81vFXP//2x1H+GTjlXKfP37Dk
lL99/dPNIvv3vKD+u1Wuq12/ZzbmG4PmvHuXPz8JTjnXKT751KP3HvizLbJH
vzP59i5zVlUVb7ZyrlN82FFtDnyieevs1n+/bMcVL23i7v9/Df+NlXNd7fFb
av2M5Y9yrlN85JVHbbXneUsrRf/j+pRznc7/c2f/tP7TvTfPNluy5KffH+e/
332u4R2sfIFdV/v+f47yz8Ap5zq9fzGuO0T64/yg/hd+ml2n7X/Uun5WRfln
ZwXy2+Ku0/uPHX1wp7Ne3SLyP5A/yo+367R/9Y2fXNH97W3MzuoU9Z9yrtP7
D3rp4O0ffHLLrP27ff7z169+Eq3PeivnOvBLDJ9377YPDz65T3ZnddVeHS/y
73e92PA/WDnX6fjdcM2rQ+75wTvWj7oIp5zr9Pn6DLt13tPvLq/MbW3f1wef
Y+UD7Drw0w3/nvHeJ8KP4JR/L8GPc/s1X7b4N0ui/DNwyrlOx1f2j3PFJyf4
T/VCQj8k99/L9j/K/Av0hegp1//iN28G1/zkVXY9+HdlfHle6X8u/XP1dXzg
e9UD4MTXVY+AjzC+D+t7/UD85SLRI65/xtfUbxZ+h4/BbxH+HmH6AjlQ/TLR
rgffQ/id688L+uf1zyzrz4XwlOiXbxpfh/33/P4n42PwjsLfS0xfhP339evt
eicfwu/H2PXgr4r+oT/gB4l+ge9VD4ATnzo3qO/1A3wf1o/jU4yf6gf4PrRj
4vyvsw1fIfoBvqe+6gf+j54ZK/oBvqa+8vtc42Pw24W/25u+CHnK65c77Hqn
J4Xfh9v1qqfAN7H+gKt+6W98fU7Qvuf3E4V/Vgn/3Gz6ItRzvj7XM/7KP1xP
+9eL/qE/yE9f0S/wveoBcP5P/cdFP5TxH/8/PZgfz39q96fiT6n40kbmFyf3
Jxjf78o8gRe/efOCmnpoZaQXE/GvXMcJXP0CxaviF0T3F79AcfgfPXG+4Hsa
H8PrUf+Nb9ELit9k9fYQPRH2z/sdisPv3Ef7N1r8EsXh947C0+DoB+Vh8Hqx
22vPj/c7FMdvOEj0EDj6Ab2guPoFilN+sOgJtz7EL6hd3/sFOn7qF9SW3xbH
+4qrX6A45ePsOj3fBR/D61pf7X7F4XfVE25+xe+IcGt3Z7uP9m+E1VM9Aw5v
qJ0I3l/sfsU/kriG4up3RPNr7fYTPRSOX12GXojqi1+gOOWzRU+49V3Cf+oX
6PhhP1zyzdN/ceOT66L4I/2fWPS/qvrxiPsuf+gbOzxTyez38YlPXnvdkf77
UeOtXeJ+6p+W5S8V8jPQ9b/Lf4/+8MMR/bR+jh+i+m3G34Ztcd/6jhaX+DiK
z7/R+NSsq79Zn1NuPOnqY/8X/PZa9Y87XLbN6kVtHT7F1rXpgTyy/42fKD/h
pokvtjukTtp/t3pzK4+/XTln6xM/enmM9w++cfbiX5/2Svfsz+99dNiFh7fL
n/vFBc3b/vIV1/8jTpsxpNvvNsvOPnbJvXv/8tPqoB16924//ROHn/rgoFcG
D++Uf3Num7Ed/88/Kp9tnh1y7TKfP3/Kj4588eVD1lT7X1P/ynXnraiM+W5d
rwP28/b182uffeicpi/sqBPPmLti9VPVJw/8+gVntNng/QNtvn9k103erx7R
b+mus+99p3Ji/fRVh03w/T+luH/2yzsOP/bwAWuqXV6495wPe/jxt/tXxt2Y
3bn/fouq/Xb+y9AXt/X292umd42nq2qfo59c/KbdIV8bflp3h1Ne6KkV1Qdn
zT5k/wF+/+HMMW8N/tMPhmTGz7na7y2bX9X/8J8OcPxu+sbh2PeFHt8kazw4
H/3Avd6/+qPZLcbz0f4B+XmUF/Lt54fywj57o1rgXv7eWrHdgCHD+mamB3K1
/9cdcNqTl/26g9MPts6FX1ZX/3L0N0adeOcHlfqFfzr/b099xbV/dsc3n2z3
k+2zYh12MDt9rmt/2xe+ufNp+29u625tteBj/32rMW/ftffIBftkhZ2/cz7y
k2e+ctJl/vx4y+prXrhjSt+s4NEtjb/89zHG3nbpPnsNbJ9//b+Pe7TriHWV
rx2y9ZvXv+7X572vtut79LDPqo98ftx1mwxZVWl6dOp9t3/d8wu8Ds+r/i3j
F/JzivjRS9Wi/+0Urxb9X1nZ7frO+z/0Z79+rP/Z+F83TftOl5XVHstHd1+6
u39/jvW/8vZPf7/vXl0WV//0x11+99Pevn3my/REVf2D42zenf6Y1uHFfld7
/4Tyi1vbea9aXO/fD1PM7y56fsHNz3at89tb9YvuP1ncri4b1To+/v1Os00f
HGT64UD7BUef8Huj6RmRT2fnoE/Ay85fFL/p8+tdbb7bixw4+TV9oHrCzb/p
g8dET4CjP1QPOfk0faB6Ahx9QPktpifC9t+tqh5y/Tc+h+f7Gs+D72r64jDR
I+Cfmr442fTIAaZHwF8wfaR6Cvx7pg92FT0BDt+jB443PQC+pemLk0WPgKOP
FpqeGmd6CnyU6YMxoifAHzJ9QPkC0xPgxH9eNT1k8R/V77nqCXD0AeV7mJ4I
2++W/0T0EDj6QPWEGx/TB5SvMj0BTvkzpofMj3D4RcYvqifA25o+oPxF0xPg
lpdZfVv0kJNf43PlefC7jK/vMR5/0Hgc/ETTJ6pnwIeZPkBP7Gt6AvwC01fo
sfamx8DRR8eYnmowPQW+u/H5AuF58OeMr+Hx5cbj4GX80tP0geqJsP/LKmNN
j62Q+BX66BnTU/1MT7nxN31wvOgJ8LGmDyi/xPSE65+VX2hyYvEn3f+pbit6
IuzfVq5c43OUqx4CN/3m8gMuFv4nLxi9oPHNsvxV5od5YZ7Ai9/0+03gf3hf
9QP6g3L0CLjEl6rTTU+4+TP+h/dVP6A/KNf4O/Gn4aYXpkj8Gf2AXkBPgMP/
+A9mz7v+42+cZXrjcNMjbn2YflhkemF/0xPgfY3/jzPeRw+A40+gN9Aj4OiH
X5lewN8ARz+cYHoBPQGOPwDvq35Af1Cu+yvohwNNL7wq+0Pjjf/hfdUPM01/
UI4eAad8kukF/BVw/AF4X/UD+oNytX8kvlR9Wvbf4H/8A9UPtu5c+VrTI+D4
FycY/6AnwOH/h4z3sefBzzT9Mcf0xjrTI+D4A/sY76MHnPyY/kBvoEfc/Br/
w/voAfCzTX9sYnoDPeLk2/gf3kcPgOMPoDcWSH4l/gC8jx5w8m38BI/VCz/B
//D+M5Ifyv77B6Y3jpf9i+ON/+H9aH/a9Aflx4t+59wkeuEi8S/hf3g/sX/N
/kCOHgGnfITx9lmmJ8Abhfc1v2yI+Rv4IYeK/yHn4hr1/SGal6r5S8xHF9Ej
4PC96gFw/ALJP3LygX5Az3QS/wK+Vz0ADt9LfpJ7PvwH9Myt4l8QX4Ln1T+A
z+F5tf/RJ+iZHcX/ID71megZcOJL6IHDxX8gPgXPnyj2P/oEP2Os+BfoC+JS
6l8QXxopegCc+JTkD0X+g+oZcPj+UdED4PgFso/gcMobRc+Aw/eqB8CJT0n+
UeQ/4Gd8LP4FfsPFogfAiU9JfpLrP/oBPfOK+BfbGV+fIDwOfo7x8bnG02rf
rzd9cb7pEfU/4PuRogfA0Ud3m556RPyTcaZvVA+Bl/HDOONj4lIfiX1PfEn1
SDi/f3N6YCex/9FH6KkPxD9B32wvegic+JLqAXDiU5K/FPkP6Jnx4l/A97JP
7J4fvpd9DIdTjp6ZI/7FzbJvofsXqlc1/ld2frrs/ILxQ3Wm8Dy4+g26v0D8
aInoEfD9jM+nCs+DTxS/QfcXZonfoPsT8LHyNPifxa5/QfYn+hjfn2x6YLTs
L5wtfoPuX5xpfA7Pz5f9B7X7t5T9Bfj+JNMDO8r+gvoV35P9iyOMz5cIz4M/
J37DQ7K/oH7DKNmfsHnLlefB1W/Q/QX1G3R/YpXx+bPC8+CrxW/Q/QXKn7N1
0FX2J4j3KM+Dvyh+QzvZXyB+1CJ6xMm38fF3jKdHyf7B18Xu1/2B9mK3nyn7
F4+I33GX7B+MMH2jesiNv+mTFtEz4EOMj+HpUbJ/oHa/7g+sNn1AHpPu38Ln
Fj+rLJT9gxES1+gq/DbH9MlC0zNDZP9ivvF5o/A8eKP4DWNlf4Fyyz/Iz5X9
CXjzbOH5cHy93zBS9hcoZ59Czw/sK/s66j+VnU+T9wc2Kr/rvrDy+2uy7zxT
4juzZN/5dYkP6b6w8vt+su88VeI7s2TfWeNDui98qsR3ehp/w9snSXwI/n/J
eF/jO7ovfYTEhyYYf8Pbp0r8Bnt+vsT5wY81fofXT5L4Efz+feP1wRI/gr91
H8DVl33nJRLf0X1njQ8NkX1h5fepsu/8E4nvzJF9Z40PrZZ9YeX3VbLvrOd/
7DxxZSvj9efE/11k/N1O9gHAdd/5LYnvYN8TP26R+FCD7OuOk/gN9rjG6cEf
MP6+W/YRwOH/M2UfwM2f8fe5sk8R3t/va28v8aNLZV93nMRvBhn/w/t6fhf+
hrfvkfhRWf4p/A1vL5T40vAS/oO/dR8AfL7sOzeKfib+A6+PE/8O/tZ9AOlf
rvsAoXx2Zt++up3Eh4S3eU5t35Wn3h/LulX+Bpf8oFxx49co/yes73g4UX/L
XM8XgBNX5jp9PssP5ZxYhFNu58dc+9gHP2vlp52yQs/smit+rpVznbZv+ZnW
/6XR81POdVq/4M8B0fmpfYP+7+Cu0/4V/N07X9Cqh719Ck75g3Zd7ft3j/aH
ub/wfK44eajK7w1Bfcfj0fhZfCba3wWX/KCo/xeHeXbR+pf8n2h+Cru23tbZ
oginnOu0/SIP8K+Vh1dtMeuK+k2j53/Eyg+068Arhh/ayg97ZnMX/+aV84/Z
y9Xfj/Gz8kPsOm3f4rt5Kr57RJifGPW/iK/0juxL5pfyr9p1Kl8p+5r76z6w
3t/iK9H+LPeX/J5ofFP5/2X5oV2FFxP5L7nyIDjx6ZAHPD/Cd8qD4LwXU3kU
HF4Dnyr81mh85MZB+Ou7xpfgar9xPXij8Bu8qzwNbnnzufIw+CHGV2H/Pb/B
R+B/FP6CL8P+e37levCHhN8s771K/44R/qU/1B8l/Grxijzksfh8VFjf8+N0
4zvlQXD+T/+UHy3eIPsv8ft7hgfrzPMj+0PUT52PAtf8gsz4Cnya8Nso4yN4
YI7w14nGl2H+tefX2Xa900PCbxfY9dQfJ/wLr1L/UOHXIcZXbn6E38ryH+FV
8Ez4tSx/grw/+jdH+Jf+UH934VezK939lR+xP8HPFX4sOz9L/iL90/xQtQuV
H3k/2GjhSXC1CxUX/zyq3yh2WXR/4xt4MXr/gdVTngSHH5cIz7nxsXaVh8Gx
V8cJz4LDb8pT4PCj8hD4s1bvIeHJcH7a5PBi7f57u1HxV8UuVXyU2IWKw3/K
k+AzxS6sXd/bhYp3Fbuw9vuRvF2ouJy/iMYH//xi4Ulw+AieinDjG3hRcerR
juLw45nCc+Dw22HCw+DYpeOEZ8HL9t/gR+WhcPzT+XvwI7wYyY+1qzwMflCY
nxDh54pdWHv+2mbnCU+Cl70fAP67QHjSzc9f7jnw8iXPu/ORKfvvcLsuF3zf
pjOOXfLd9vL+KT1f/wUv2nX6faphZ/z9+rOu3D477MMZ9/2p3VaRf172/i3q
0Y7iRf+6u/cGJZ7PnV+dJbjTH9aO9r/s+yhv99h7xcg71li/O0X9K37zhhsS
3087tXXcZ7v3vNbuf6fsLbtPVXDe23qEtaPzt6y13jIX/0y8vzJ7267T9otx
6+H4L/F9GPfdKx3fY61fUxLPR/kQu07vf1yvw3+43UEdnd2n9eE/rtP5K56v
f/Z8p4+vveKMPlH/1/6q8swL4zfLxm7+k/Z9PlwXtb/Q6s21dhRvO+bCLa8f
1jWzdRK1P87aXWf30fEZbvXaWTva/+mPNfxkzEltskJOno/6t9zmbV5ifqlH
O4oveeqdsWMHz6h81tq/9dH8PGHtfmD3UZx6E60dnb8rLxi1vPNlf3XxR62P
/fcfdl1qfU9OrG9dvzq+/J9+wYcy/vJ+wPj9tMwLPAde9n7Brxlv0Q/4TJ+P
+vr+M+VNeFCfn/4xDvL8Ve6v+W8hf9F/v39T9v5z+Cvsv34fLm8Av0HeH8j1
4fzMlvnzvLrU+gu+TOQy5d+Ccz14k/FWWD9+/0dzMH7++zvHyvOn3v8BPlKe
7zvGW+Cp99M+avjxdj04/EV9eAwc3mL+4UFw+Iv68Bg4/NccjE9/d39bDzn9
q7f2wI+z/oC3WH/Bl8v86fuTlbfgM3D4Cxw+Ah9r1/P806w9cOW9adZeSn6W
i/xcKbyV8m/Br7LrwXX9p/xb+p9Y347HqjX5y/PacOEv8AZrV9/PJ+/3zveV
++v7v+EbbZ9yPd+HvQKvHS786OxTsQO1/SPEzlCc9yYrv9A+PAjf1O5/p0z5
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
Dpz5Up4BZ957JtYP6+oq47F1Yj9pXqPyzxLjE8rV/qFceQwcftneeEXtm4vF
74OnnHwbv5AnAs+AN4vfpvoZfmFcdPzgJ3gJe0ueL/l90j3Fb4OnVD6QC+wp
8Cbxq5R/avtt/K2UfXt4wu/fwy/wivKP+m0fSX38s72Mdz40HgKHX5DT6P3k
4retE/1H+RXGO/AQ+JviF800ngnl1/tdGv9Tv2ma8Qz4TPH74Clw+OVV4xXs
KXD4CV6Cp5z8Gb/AKzPFPm8SvwueAp8r8jNN5Ad+utF4CZ6S/mc3Ga/AM9J/
5xfeZTzl5q9k/Vwlfhs8Fc6v21+rwkPg6ldF58fFb9P81ynit8FD4Phd+GHN
4n/9WJ5L/SPyc4njrBf/CN44VOJE4HX2F+Yn+PlXXtD4KryjcR6Z/2yQxJHA
77P1u8rWtcYHlXfUf1LeUf9rT+MF7BO1f4YZ74TxY/3+crp/2COrjBc0voy9
TZznaPGf4Bf8sE/F/1pi67qvxGlc+8YbGocBf1/Wvfpnk4S31D+Cd4hDzRT/
TXlN84tZ18Rp1D8qky/WfZPEicCHmjxNM7ldJ/7RROEd/Hxwvlf+sfHaFPHP
WoQXNP7M+uyVWJ+sW+JIGt+7xXhhuvGCxqfxm6YG8WnvP3E9eVwa/8ff+Uz8
IO2/+jngGtdR+6PO/uANXT/wA3nmOr/MP+Vqf1AObwwS+wV+gBc0PjJV4iZq
f9SO2/Dn+QG7TfkDfpkkfhA49smTiftfJXEV5Q/4hfJVYn9QDm+o/F1t/PC5
8YLaF28Yvxwufgq4xk2axb551/jlKfGDwvu3yeEFtX/gF+Lbmr9aJh83SdxF
7Qfs3/XGC2rfzJG4T5PYF/DDZOOF1WL/YNc8KX4YOOtrXWJ9wS+9gviM50fK
4Y2jxH6BH7BTlD9ulrjNdLE/NK/xUbFfmu87ofO4zZZVptuv2SuuPvmU7GvZ
8+rzZz+z6/T9yOQj/NHySnX/sfjl/NmK6HyExRedf1PEgf33OcPzYYuMn/z7
uQp/aDfZ3/L8YetF9p82eD+cld8d+GGe/7AHT03kd3O+L9x/8vxM+aGt9R+A
b1x95OH0QA95/jjnN51/cd7jW8r+kz+fH+Y1f1ZR+UNeiK9bfMG1P/Kdb799
zX91Md5dU7VxlvjpXob3d3FA8K+edu3TQ/vtbOfPupud7PfXCz5pl89vXZ9t
skmyPl/Zb+tND919ffXrO1737ff7/L1ywXG3PjF5hOffN4t8d85dwDeuf88H
edHdMs1/ID+ryDt+Az5z+OyS/W/rf/ax8eTsgm8q0v/KxKsuOqPjsHsrPc/r
fdmm3/Lzy3wRl1f/psw/gD9+ZXqk8JP8/VW+o+9ntM5vX9l/8vExyvc2ftf8
vUZb9+afZbr/3Sy8As+Aww/wwguSfw6/wCtXSH43/AAvKH8Uv3kD5TdIfAj+
gDfeMh4BN7vbnd9V/oBfKK+9/9TNyZ/m78AP8ELqfAjlp8r5BsrhjYONR8Dh
B+PxaP8afqFc9y8phzeONx4J5aeLnftYVIEnwOEXeEXzB+CHG40X4AnwEcYv
+Oca/4Yf4IV9jSfA4Rd45SnjGXD4AV5Q+xZ+gVdOlfOZ5Kdg9+ybyP+EV6YZ
z4D/1fihh/HCXcYT0v8MXvlQ4s9q3yt/wC+U6/5fuO/xiZ3/ekb4v28GLyh/
sD4mJ9ZHuD/UJdP9vZW23smf1vxF1v3lwjPgNwfrmfirX/9LbD2H+zMbvF/X
ys0uzReKfTEs2P/ZLUs8n+zPePlx+bcyTuDn23qeKesc/Exbz+H+zLpo/cMj
e4p9QdzsSFnn4KzncH9G7dPVVXjkUrEvWI/YAar/WW/zbB1qfC+MK3qeAGc9
6zoP77+mOsp46HWxT8zuzeEZtT+abT1Ol3UKvjyIr/h1GM7P8yZnayL7o25C
sZ5flnUu8uHOdal9gt3h8gjF/mD/rVHWOXjoX/p1Hs5vOj8DuZ6WkF/8vnB/
xtsHlB9sPHKj2Besb9a16vdw/a6J/IOba/oN/Hn9jn2AvQDeJHa9rm/1G+AB
HR/zD4jTOZz1y7rV9X2++A0za8aX0e+bWn6w92+x68P4lV/fPxK/QePjxBfG
m/yca+scnPXL/iH6NHz+/m5fDn3t5EPsdtYx+ELxOzR+jj1wva3bXW0dh/O7
pvqmrXvsEfDlYpezjsGbxe6fKfnXS0wfs26x58P59X7H68YD4Hp+iHxVkR/y
1iw/zZ/vbBS7Xtf3Z+I3NNb0/8ibjfPTGsSu1/XN+alwn9XL9xTxG7AXwLH7
Z5rdP1Psf/Tto+Lny/y69a32+TxZ9zeJfc+6fFj8IB3/cB/T6xeef4DEEcC/
ZusS/avnk7HLiSuOEftc1/3pYt/befzK2eLng0+Qda/2OesbO1/n/2ZbV7vZ
uhou9veFtm4X27pV+9r4uYL+RR+DNwlvqP19q617jUOAW3wuz4xXnhT7/++y
rjR/XdftLLGvWXfo3zliv80R3nhP7G/W/Wu27s8Q/0B5ZYbY/+jbHyb2N39s
6551fLnY51x/kcmJ7i/Z+0yqB4ufH/bPr3vd39F1r/tjrM+3xc4GXyh++SzR
v6zfcN3y5+0j8jY1/t8kfofqX9Yv63aA6G/W5xG2LnX9sr4pV/3L+v2R2PHg
6jfr+lW//BzRv+qXa3z4QvF7/yr6Fb25j61r1Z/hvlubSL+rX6/6lfU539Zl
JvofvR7uA3r9zvqcbuvyr6Jf9VyK6s854herfmd9zzY5Uv3K+mRdqv6/1dY3
ev410e+szyvFzgZXvzyVH4Uev0j0N+tT7Wzwm8QvV/1LOftT02V9hPmV9VH8
LDx/ujZa39hrof8bn19k3nV/UM+d1s6vbME/i+5frJc6p/8UJ7/5LLuu9vmW
gVnhv+4U9X+z10+58rGLOmRFfsXnUfvUC+OsHi/0aqesmJc2UfuHWLud7T6K
U28Xa0fxxfa+DXhH8edl/11x9i+WJN7vwrmoon+fRu3T7qJEfvNmVu9Ca0dx
s2vdulGc8jPtutrj00XiT1F+bj4ysE/i92/xq+cXHgnkuz6yH8P4LnmYnt/0
XHfqfLWe81b5Bk+9X5r7n2vXq/xSHzkGV7lFnlV+wZFH8BGybtQ/GGXX07/d
rT2Vf+qzDlR+wXV/eLHIrerfS0TukGOVf/Al8v4alXvNXycfLowzePv1RyK3
qfPV1Dd9Eu2/UT91vjqcH6+fKX9EeFrlP4zzePmdJ3Kp9pG+P0XlF1x5WvHQ
/qmL7o8cjhL5mydyuZvI1zyRq1Ei/+79ysLDiqueUJxy1a/gl5rcbCbyB065
ypfm72r+ZbjuOkTyB/6q6AnFKV8s8s/9lacVD8+ZfBLVV55WXHkanPM1El+X
+uTdDI78kw/l3EPt+L3P/1P/osgH3lHsC4+H5xd2jNaX5fPm5OEqPrJV7nbI
LrL8K8Wp1xzERzx+6mPDf/q7uq+idyL8kiCva4fo+ahHO1qfuL7lBUft8/6R
8P0tG4yf1aMdxddYvj3ncxQP3+/QL8LJV/ubtaPP96vgXFHbqH6Yl7NthG/s
/hZ6T+/P/58QOQ3l259/TtkHeo5H5ZP6KfsAnOvD8dvB1b9I8oeJl3P/9ZJ/
qXKDPIGvF7lvFv9f5Zb2wH9m/eH+37L+qvxRf6boH5U75FjlD3yU5D8iv9x/
P/FvkT9wPT+i66JJ3n9wlchd6v2c4FfJ+ZWy/A7is7oPCT5X5ErzH8O8qBYn
r4ojV5rfGD6X50ldHz+0eZ8h8kP8xuyX/BSRD+ofanJxscgv+AXCg9q/GcLT
ev91wTktL7/41Wtt3g8V+aF95GSNyIe+F2VWTfupm+U/v1tV+bG4Rt5gcrlC
5Jv+U677M/QPntT8Re4fnuPaNqqPHGp+osql+gfFb94Mzyn/hfJY16j259LK
mq27bNvB6Wet774badepfDfu843dFs/vn72/+94LNzuyb8S/7AdYedQ+9WhH
8fda8S7Z+Fa8PtF+S5X4Zu3+1efvWzuKh+/LqKvT9u9t/f/7VWsn6l/xe39D
U2L8GfdJCfxn1m6z3Ufnp2z+ivjMm86urD1/bbNBdp3WL8a1m9PPifmz+Ynz
u8nfpt3PW/8WNoO/aXJDuyn9yvggZwn5Yfxc/UtFbpAn8Hdt3sGRI5U/cOQw
bL/e8fcH1h44/eH5df8L+Qnb9/GT2nLBn5cf8NT718HvTshPOO/z3fyoXNNf
lS/wlP8NvoNdr/I1JRwfN/7w3dRgfvz+EfWUpxSnfGlN+UEuumSNMv8yL/l7
Mr/IN3kOU0X+poTjG73/+p6gfc+TWl95UHEkIsXvqfnl+keExxLPnz0g8z8l
eP5YPrV/TdI/8D7CU4pT3lfkZ7LIRW358XKl8lPIwzZOblL8s8yuU/ur+D/2
Rt6g9W8fPmjhh1d3zwZ8Mx877I7lUfs2LI20o3ghb32zGbu+NvasXbaM/A/a
5T7av5lWz+QnPh9j8mTPF7WPvPLeCMWpRzuK7zZ65dmPP/0PG4f2EU673Efx
O6ze7tZO7fptnf+Zwnsl8Omt49PHyU3i+XOu0/FTuUGedP7BB9p8qfyE9+XP
zz/4dJvPUH7ud3IXyuPKisoN7YHvZP3hueivzr88Z2TfyTpx/Rsq83abzafK
D7jy2x0iN8iBjL9rX/lV5SKln3on8Bk279K+ez7+z/hxPTjnVt+XdQzeO6i3
Za7zQ/07bF5UfujXTsID4fMxb8iFl6+eIne9RH5of6isY8Up30Pmp6fMi8qP
ypXOn8rFUpEv2l8qPKT1lQdq379ttH/QS+ZV/a/QL+qc6/yH9g32u9effTe9
54obB2+S7Wi/tz7ZZsD9t/n4Mt9rQM6u6z/qi393OP196y3//JvUMFWuAy/s
ix55YZcOtX70iNoPn8u//+foeT12Wzdli2xM6+9HlbpFN9zRkn8q9lt91v2A
b181pdLR7Be/f1D0b0bz1Jr3WWntdcjGHL9w7EXPtLP7fC76ZaDZZf2j+E0h
9/79cUMK+ZP10dblt9j//f3teXWcU+M/uvXvTjf+91j5Nq3PP8j6qfHLHllR
7+FmPf/G/N9i897P/i/1+W6H8cNQhxfje0sD46rfJ2L+mDc3j4ZPCfp3Z8NU
6Z/5N25eu9k8R/Nn8zba5lHHl3b1+yPMH/Om87vU5t/lX5ocgMu6jvILw/G/
s1nnt/jN3fhp/8RuzLvbPIMzH8xP7fWFXU2e1fuRfcF9//rIj7/4N6VZ+08/
VX60PuPt5p/5sHk6WtbXsSYPR5qctJH1vbXNd6PIATjzofMk/cvETovmb4DJ
we6yfvW5dP662XxIHKJkfO4X/8fxXp2uH+aP30vFf6jNDw836Pi7cbd50PvD
D3r/rYVX1T9TXj6K9V57/OP3IwmvMo86P8xLf5sn8O7Ce2X8WRf8lY//rcKL
yo+MC3poa+EneOnzPxfjfozyk43baNVzIj9TJv/zb2aD8oP2W58fXkO+1f5g
Xiivbf+0zVQPuvEp9GtDSr/CW5Qrf+m86PMxft8RHgF/z8a/u/CEtq88Bt5G
9NJokd+wX7F+Y/x4P4aOr+qVASK/vUSvLBP5bxTe1/EN7a+4fwl+rgMP6xHH
3MB/aZX3tyv97dfWg8ML/n7deOXTiupf7Cq9LuxfS6WQ76ebNf7LfPF+N+UP
4lo9Azn18sH47t467i+Z/+vz59GfjP/G8cf9Tn6Yj/sS43e0PTfjUvCAf37G
1eyvrI/9X8cnHJfZTn+MCdbFp5XjGGcZH8ZFx4/xpZxx1vHbycZtFxtHHR/G
RccvtE/Qj54/QvnsHPGPtdscxtE0ftc5s/GP3v/LuIyVeQAP30dKHMyPT397
3nD9fhaND+Os8V30m44D+KTwuXOVH12/xf7FNCd/uu5OkPmnvanhb67Px3PV
jk/ouuPP62eeW+PPk2Rd6PPb/oh7P9L74l9w/Uu//K8v/s1vmBTIm9PPbt3o
+lka7gtG9v1O8txfFfnW59b3H6D/6FciPpOpnOvzKQ9p/3YVOQRfFuw7tI3G
n+vDfvv503Wn/T+59e8JZ/c3yfjrulb/kPiIxkm1f/3+ZXysq+tX7fh857x3
EMeM20/FX2mf6/51fI3+a3zKl2t9cMavh9QnXiTyEd0/3H+O8alyHXid/CXk
T+c/mt+U/J5zwL91OOuYZVV+FT/Tys9M4AuGjz/5t7f9zf0m2ne/ijfM/eHd
EwZvl/H7ZfGNbD/n98vizxbPVeVXcd6fdXN4zsPhvF+CX8Utn4S83AjnvWj8
1m5/Ld8Xj+7PucdqAte8TcX1u5pftj75Mvm/rF+v+dNyf/dd9Gh8qJd6/yXf
T9XvDIPzPV1+E8/nzp9/WZz3LVwdvr9U+09+eBKfl8DhjTA+pvsXq91vIj7u
voNTmz8GZ+Gv4uxLx/vT5C/ck8DL+En3x/6n9Xsn6qteS/Rf94Gj+in/m3r3
JOpjX4kdqc9Xxu9JvLj/4JzfRP/Rj0n8X8dHNS7DXzmO3qGk4Fkfnyn0ziKH
Fzztzw8sCK4H387hZe2X1UcvSP0cPPx/XR16aGPr2/NIff9+lLL27f0a7vlS
58cMjt5/jv4B1+/nhe9zp33Nn/ffJ6/dPue1mhpukvevlLVv/XF44vvADtf3
C8j9m/X+ZeMXvm+N+/vzGeH7qOY36/cDZHyj7xOWtR+Oh8Pl+d39G/T+ZeO3
ce278W3U8dX931T8nvoaH0QvWfyoQe1zu971L+WfhbhvP8zni/OHytq3/jg8
kR/icPUv5f6Nev+y8Zsk/U/mv9r4qX8t49us47tx7bvxaUz4L9y/ufb90+NH
+6n9NRnfRh1fmbesLvhLxqdc++eLXxPqi5WRX8P/wdUvOlPqq9+S0C9JXP0a
5f8yfLj4NaE+Wln5o/g1+DkbW1/9muaA77x/BK7fd5kl9fX70OrX6Pvx1S/S
98+r36P8Ju/Pic4Xqd+i/Knfh62tn7q5uKaeP1K/R/WP+j2qH9Svqa2fou8/
ZuH9u8n9vf5Wv2ii6M/E+z+k/XoZ3+j97w7X99Op36Pf/1K/pqfwA3GbVPxS
6/eW+pp3i58Drn4R/wdXv0fje2X8lMh/0vzHqvQ/ap/8Yt3/V78nlT/reF70
g/o1uv9De02J9sv8F/WLJglOeVMCV79G8wdsvvLwPv58Dtc3/cv65f7Ns+Jn
gON/hLzvcfyf0O/xOHysfsLGtl/WP9oN9crG33/j6nfKQ7/H4+H5f/d9OYdj
v4e86XH0i3w/vHFj2w/faxt/Xwn/IuRF335ZfezzUG9sfPvwobyfyeFl44P/
8Zj4cRs7foybfidP8Fy+n7zR9//ftl82vmXjF/JSvP+u+yMJvCL5sxvdPvZx
bZ7x/oWcn2jc2PrY56n88bL24UPZnxI8PT74H6nzSf/D8YueX/OENvb+/9v2
y8a3bPyYN9mnyMCbQjyyz6kv+xiVL1s/dX9pv6L+A+Mi+zSRfSL7UFH+VArf
2PZlnyIaP4njR88v+xQpPHq/0ZdrP+4fOH6R+heCV9V/YnxuCvepUnhF/bOy
59vY8YGf1T+ZFOIV9c/Ij+Y7MNeIfyC4u25jx6dsfMv6V/Z8ZfsTjL/sA0Tj
l8p/FTzaXy/zL8r6R7mek0ngVfW/Nrb9sv6VPV/Z+KTOhwsenf9FvqaaXzdV
/APB3XWp8dHzK2H/0+Ob6t8UeT49vwsfEufS/KRzpPx84U/ZP2msvT+zrIpe
0PigtB/pjzL/Q3l/5S53LXv8V22i+pSrfuB5TnjwugH3d++W2XW54pRznbY/
8sqjttrzvKWVR78z+fYuc+L7U8512v7kU4/ee+DPtsiK6/z3/8CbrZzrdHyL
8h0i/UF9t/9u1ynesOSUv339082i+NR5hlPOdXr/587+af2ne2+ebbZkyU+/
P26Fq3+u4R2sfIFdV3v8/hy9n/CcoP/1Gdcpvvit469+/u2PK8qv5wT9X1vh
On3+YUe1OfCJ5q2zW//9sh1XvLSJG7//a/hvrJzrat9/aWXMNwbNefeueP4p
57ra498zK67rkitOOdcp3mfYrfOefnd5Ze692z48+OS6CJ9j5QPsOp2/QS8d
vP2DT26ZtX+3z3/++lX//i/weivnOsUlTp0rPjmxvsHHjj6401mvxt8fR/7c
+7HtOvDTDf+erctPZP2CU/69xPqd26/5ssW/WRLlR4JTznWKf9Ta/qro/Rpn
BfzWUuE68EsMn9c6P32yO6ur9up4kX9/98WG/8HKuU7vf8M1rw655wfvVIr5
qYtwyrlO5aO+8ZMrur+9TRbuN28gn1bOdeA3y331/kPuu/yhb+zwTPXE4rfy
+MQnr73uSJ8fXxZ/KvMvLvnm6b+48cl1leND+Yn2f0zOZD9/ZWWV6YXvmlyk
9keK5x6Yd/nv0R9+OKKfq8/52fFFP5wcg4+9Mbtz//0WVU760ZEvvnzImsqO
O/9l6Ivben4jftJs+uGEmya+2O4QP35/fu+jwy48vF22/9mLf33aK92zF35x
QfO2v3zF9a/PNfWvXHfeiurJRfvV0d+t63XAfptL+2urSxqfmnX1N+tz4xGH
TzV98JMxbw3+0w+GRPpjj1a+28T5H40H56MfuNfz336mD2hH9cfEVt582+mP
c7Y+8aOXx3j9cUS/pbvOvved6q5tvn9k103er36vfvqqwyZsgBvfLzHeVv1Q
6B3//ZCHZs0+ZP8B3n95zerN/NuwLe5b3zHa/+jYqpdec3rjjztcts3qRW1d
+2cfu+TevX/5aeXw02YM6fa7zbJBO/Tu3X76Bt+POfGMuStWP1V5fu2zD53T
tLIy/8CvX3BGG39++Vd3HH7s4QPWVE55cNArg4d3yrZ84d5zPuwR7d9nLZtf
1f/wnw4w/e/565tz24zt+H/+UT21qJ9/tnl2yLXL/P4s/hT6YVS7Q742/DR/
Pnu1yfeJJt9ninx/8NPf77tXl8WVe15t1/foYZ9VFv5xl9/9tLfPnyfu0HLA
aU9e9usO2cW23sDbt66LDtnZHd98st1Ptrf257r5f+Tz467bZMiq6r1F+9W7
Hp163+1f9+sDu/Q5iwN3bV1f/vlY70X7u0T6xfSd8x9GfvLMV066zH/flPX4
1ortBgwZ1jfSLy8e/Y1RJ975gdMv7Rb+6fy/PeW/bzTC1n97W/9dZf0XenVl
daHFNYZc33n/h/7s19980xeNNm6qX4ry91x50d/P3fiuMn2B/av6pZjfN5ze
KfiprfR/bWW7F76582n7b54V9usG389q7f+WWcvqa164Y0pfs+/99x+GtNoL
L7l97lGt4+vlY/yvm6Z9p8sX43zbpfvsNbB91mP56O5Ld/ffl8BvK+7fO/If
9mvt387Zd96+a++RC/bJivZ3dPP79f8+7tGuI77g1aL9/GuHbP3m9a97/sKf
G1fMc37utA4v9rva63fjZZfHqPZDWXxL8r8aVf+g32abXjvU9Fw4f97v+K7Y
H8Vv3sB9VP/sa/1B76CHwudf7fQOegj8WNM/6B30EDj6B73TLP5LT9Mv6BWr
79pHP71kegk9Fba/Fvs1e930kBs/0y/oFdU/U8WvQU+B32z6Bb2i+mc/8Wum
iv+D/vm+6Z3BpofA0S/oFdU/R4jfskT8C/QLekX1z2vit6CnwNE/6J0jTA+B
TzD9gl4xPeHwE00/oZcWmp4C53sp6B30EDj6B72DHgJH/4w0vaP+C/oFvYKe
0fVxdmJ9EPe40NYxegj8AdMvd5tesfbd/KGf0EvoKXD267cyvfOc5F+iX9Ar
qn+Gi9+DngJfZPoFvaL6R/0e9JSbH9Mv6JWFifybFD+gX9Arqn/mi9/TKPod
/YJeUf2zSvwejf+gX841vYKeAW8w/fRd00vbm54Cv9T0C3plnOkZ8EGmn9BL
un8xWeJW6CF3f9Mv6BVrPw/7t3M20vTSMaanwMl7Ru+gh8BtPpx/o/6DxMWS
+V2p8ysWj8qJT6Xyi1P776YPc/Ojovis+XP5xMLPq6p/Z3Zv1Xim+qTYv4MK
PoVnKyeKfY/+MR6vqH+A/jAerap9fmahD4hrRe93Nj5z5WpfT7F6FtfKVX+Y
PnTl6p+ZXZ//suDhahex708xfTmu0MPVfuL/Gf8T/4q+jzHa9KaLf4l9P6PQ
F7nFtaL9hTcKfev0jvp/6Avj+Yr6F9b/Sv/CDqiMEf+SfK49Cz2eqX/4jcIe
yM1OyJ8T/9X0WW56rqr+FfrlT4Uerj4o/h35iUX866XqSLFPDTceWlnZTexz
5P0vBU9X6sX+H1Os97zg2Z3zkWKfGp/lxnO2/rx9hH9TrM83qmqfm77Q82Wu
feMrV677l6YvctMj0fvl1hX60pVfIvyOXW12fFXtd/y2tws9Xv2T+IfwhsXF
ovOdx5l+o/wcsc//aLxkcbFo/2WB+D1dxD/E7zA/oaL+gfUfP7TSJP4n/PmR
8ef5wp9l/A1vz7P46ijxP83eyIt2Olj73j/ettB3Nv9rq98V/wz/pvC736se
J/4h/qiegwTXct3fUb2T0h/y/E4+6+wPfIHYT9Y/V7+92CfExcEL+3mpG5+C
77u6+oUd3tvV51wkuPGzw7/b+v8tpX1vnxf6ZleHF/y1kxsf8oOx89S+nW76
gfqqf9AX4KpfXrX9ANo/phgPV38q+snwIr4zwOHEe8L7b/D+HuP78P5eP7xq
eiMcP//+wCm230T/bB/K1T+k6I9rX/2rgq97O9zm0+HEv2hf98/Y9wrb9/aV
zZcbH5tPh5O/FY6fj6/jt4Nn4r+XyS9xBfCLxf8u4m71rv3wvNoX91/8m1fO
P2Yv9/yFftnTPT/5weAWH3P3L9t/wZ4HV/1wkMUvaH9OMR5evgo+c8+/e6v+
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
i6tn5D1rfL3IB9k8J86v8X+La+fEiZdLfBu7kbx5tR8tn5I8y0zj/3aeLCfv
/0GJP2Pfcn7gcYl/w792Tq96ipyfwH8fbrw7RexX+JV9mVPkfITtu1TPMl4+
XM5viP9enS7nP8Ybv8Kryr8zxa7V8xvwK7yq/Kt2rcYf4d8TjHf1/IjtC1Xh
VeXfUWK3qn0Jv8Krifiq49835PyQ7VtVFxnv6vmjvsavxxmvniLnn2zfNIeX
d5XzP/j/k4x3z5TzR/AvvHuKnI+Cfw803n1V7FfLt63Cq2PlfMOWxs/kJyXO
f1VOMP54W86P2L5Lzr7LWDnfAD/Dy9vK+Qvx76tPy/kO+BVeTZz/d3bvtnL+
An4l/1r5d7zYvWvl/A/8Cq8+I+c/OF//gfHy8RJ/tn2dKrwanf8Xu1f37yyf
O4dXlX/V7tX8WDvv6HhVz5ecbfy8ifGynl+CX+HVe+V8le3L5vDyAjk/BP/i
J5wl55fg14eMV++V81VnGj/PMV5eJ+d7yH+Ddy+S/POVT70zduzgGdXjNv9J
+z4frqscb7/g+v5f8n3By97PuO5XlWdeGL++OrZot1q0v6nrH/z7do+9V4y8
Y021uJ/n/2Fn/P36s67cPttpyA6bzD1kty/9fq7DPpxx35/atctoR/l3eNMZ
xy757ifufPz6np2+NWCcft9udfXyC0Yt73zZX6s/+v4tszu+5/lB3k/fqPy7
pPW5Fsl3VDz/Fb958w32fi/l31P/cs+Bly+Z7XhZ3x90ySOPj1/19srKoTNH
jtx75RZZY+v/fXy++b4TOo/bbFl1evFbeXZN0/e/db/XL1cWz1X5sT2Xvr8b
+3f6VXudt/OagYn337bNrX7ecuH3Tlq8k98/Ir5q85ov7PTxtVecscH7S1qf
7/lqMU5rKvr+s7oJF53Rcdi91Zf323rTQ3dfX+lxXu/LNv2Wl0/iq+f8pvMv
znt8y+xSex7w4n512bTW/m9j77f2/sO+O1737ff7/L36StF+9YLjbn1i8oj4
+yjI6Z6tcrSpPF83az8en4ZW+Wrv7N8J8n0B5OnIZYvvmnJ6r8j+Pb7X4T/c
7qDPHP9e9ZfzX9j/OW+f8L7q4jn75Mi5ynfV5LtF5PuzppaJ84e+U220cYvO
x7eWP+PKi/7680Hnm3zONPlU/i3m9wHHy3u09s/PH+th1Dvffvua/+qSvW7r
Jex/9+yrp1379NB+O9v7rTd349v8WMNPxpz0RnV68B5UL9/L75u36s+XPld5
4ozP5s7cuV02e8DQAz7Zx/cfXju49f59sxvl/XpF//pn+00ZMKtuq72i918/
NaN6UON2bfJ5Rfv5XW2vPfnhJ/z5pV4l6wP7tkqcQeK78Ce8afxcDeuXfT9k
rePVpcaz4GXvP0SeKIeHQ/n+xPGm8iv8y3vaVT6Ra9bBFcaz4CF/ronyA8re
nwt/wpvKr8Vv3kz5DcI/441fxxuvHmI8C/5zWzfw5o9FP8C/8C48HMpXt+xu
m4dHjEfAe5v8rDO5QY7AsW+fN159zHjWjd9VBX/Cm8Zzsj6fd++dfN14GBz7
drw957nGs27+jT/hTXgUHP6Fd+FhcPgVXs3l/Y3wJ7yp/Mr5ecqnyfgdZ/wJ
byq/IneUw8Pg8Ce8mYt8sy72NLl+zngYHP6EN5Vf4V93/lv0F/wJbyq/wr+U
zxT53tf483rjzV2NR0P5WVN509bZSONhcPgT3oRHnXwb/8K7M2u/35TvElRH
Gs+Cw593G29a+2784F/e0z3CeBgcfl2fWB/Yr5Nu3/7Eof/Z1ebv5Si+O8vK
uQ780aB+v+j7ENSnnOsSON/fcPfHnkaulL+5P7z57YJP3f3RH5Qrv6JXLE++
ot+XqAb94zsUXr5c/kSxDrNmkS/3/izOT9h1isv7yesUp0S/vzQruP8nFbXP
wSnnOh2/eSZHxXXbRPP3dyvnOn3+v1v7DdI+9Y0n3HWKf3DaledePrFb1tKq
zz9w88/4U851Kh9v/vZbQ+a/0Tt6f6f4ZznXKX705T+/es0fuvP9DXd/xof3
qI226/T+yPUTIv/gT5TIf2H3fO6+16rjS/l6u25j5bNMvrl/g/HgjFa+WlXV
+8+0cq7T+ua/2jzG7VM+VvxnxvfzH+z479OG98mK+fH266xgfjfPuS58Pv99
nPB7adH32RrVfmtqnY89xD/23z8ufp9rRr/W/v5Y/zz0j/36MbuoOsrsIvNH
XX2zd/k+ofkPnp/3DPz73lH+f9n7qwv7civx7yP9l4f+s18/F5td98n1PRet
7dYV/9n1H71ydav9sG30/Rp4feWruzx23g49IvmcdVvjnT94cJP80eI3MzvQ
3b+wS7Z150sYr7D9erNrOmRmTylu/snW2FnR/lOqPv7zykue/0N19FZmfzzj
nr9YF23yZvMf9P3j/2iV1wy71ey0oa59zmcV49PZ5sn7L+bf5egPte+WtK6L
3cR/9v4X9hP2sdp3Be8NyEP/eVtX/+lW+2NVFftjTmHneP/lgd/vdNtDHfPV
23z0b/MeaJ9NvHjf3793v39/tbXn/He176xfec+E/CM/H5n8qH3H969C/3lT
7b/ZZVtl7xT2mvY/63vSU/Me2HOb7LXn//CVFzf3+a8FX+9h9x+c6fcJC7t3
YD7DeKe4//Yyv51dfGWifH/Q7IYc+9nsRFff9JXFh17GThP5bJtjvxfj+bnY
b/i38feTQ/7rH52PKvv+C/XgPeXH4nd+M+Ua32E9M+8qH/AnvKn+Zdn7/fcM
/PN6x6Pg8J++Jx/8cONP87sqaj/Cf9sbT0wweQeHP3kOeFTlG16EJ8FZj6wT
jT82G3/Cm/Bo2H59Dq9NN54L58/j0wSHP2803oRHQ/lbXbnCeBGeBIf/4D3z
P518wZ/wJjwKzvsF9jJe/NB4EvwN478J4XfYXPvwJ+Vqn8N/jHP0fhrjT8rX
SXwK/rvJeA8eBIc/4U2Nf60rkf+rAr3aNlP/G/6D95QfkS93PkrkC/571Xiv
j/Gg9L8Cb8Kj4PAfvDdT7C/jF8eb8Ch46P+uqGj8A/5rMt6baTwYzm/7HN6s
vT9BfOjzKD7M+fyiHz0i/xX7kvLwOzqeX60fWVX4Dxz+G17T/4u+j1WnOCX6
/UL691ZrfGJZtL9NfcqX2XVaf3QR56rksj6oz3caT7TrwIlHwYvGl9H4Ua78
SftHFHGaKH4Dznf5TrTrFMcvUf9P/IN8X/Ff6P8HNi61/aO1rnypjB/yU8Sh
N4viz9SnnOu0PnF85S/R2/nwmv7X2moRx4vjd+CUcx04332ZXvBw9mOLdyr+
IyvnOm3/FxaXVv4K7982+7nEr5182Lzq9xfD52+pjJb5fzSQ7/7ZQokvUp9y
jV9Qv8/Trfu8FmdYH62vtVb+ZLEf7HDsvg5jLtzy+mFdM+w5rU+ctp1dB76i
4EPdn3X1C97r5+wqxScF9uXAaH8C3rqH94AJXvgl24j/uMH9C75zdpHi95l+
XmV6ReMfjDd2tN7f9kvghej58ZsmBXZe9HzmXw6O7l9nf3x/T+sX498jZ/+j
dvv1ZjdtE9Xnvux/Kb6msPdy/H/FQ/9yxwhHv5pdFD3/qY8N/+nv6r5qdtU2
ET5Z5qf2/A/MNU/APV/RL2cXKR7Gj/tF/Td7Pf+b2b16/18F/n3bqP6HNj9T
EvNzidnVxX12iNrHnrBxitq3ecs/knXo5N/W38zE+pss60/vjz1r8xjdf2TR
7/wi8xNqy0fbHL8i1T/Ka8enuuWh/bKB/2f/5zrdX1O5qh1/6iH31+8H9Hft
Yw+C8z1h+qf+D/4C9TU+BX+ADxP/G354Imjf259mD0v7Xv8Uv881g+v3ueEH
cLVfWf/go8R/pT88/341929Wu3mEJ8BZ/3J/9/zrjT/A4RHwKTL+6h/o+Kt9
Aj+Aq/3B+qd99X/ZDwvlo5/D8cvA1b5YIfOn9uM04W14APxnxh/071vGI259
yPqaKesL/pgbjJ//vtoU0bvTZX0Zb7n6F0l+ku1Xu/o2nyIfbV39qyT+MC9Y
l+77gRrfd99PU//F9mty9nUUZ/3CC7Xzx9rL9wc9/mgY14r2/yyulMEjirPe
LY8i4r+y7yOyn4jcaft8f7fO/qLvK5pfWpS/HI0v/IBdq+M3R+6v9ckLZP9E
cfiB/Svt/0PFvo3b59b6tp+Ss78Svd/I5ndOYn7xz/U7leDWL8cLqfzClkR+
jD13Tv6l4rYf5vyO2vNb73hB8cIf+8DtP+r4LS3GJWPfSXGze3JdZ6H8+vWT
kM/sDduX1PbNr83Zf6s9Pt1y9kcV7xnGP+Lxs/6591fJ/i39QW5rv5+3xd03
Ov8ZrP93o/x51ndoX3n/jLi37RNG+Qdl30eFH8APk/wAl78ZtN/PtR+ub9p/
OeKH1Pe5kb88GD+vn4gLUF/3T+lfnuhfb1v/jxt+lOxPs75pX/dXHzZ+ANf4
CPM7KzG/rH/qq33A+gdX+4D1TfuaX635x5qfafvmDlf7gPF/LDH+rG/kS/eX
4YdZwfz4/IOy9TNJ/Hf1D1j/M4P58fsTrG/3/JIfQXwb+Zgm+/esf/C1kj/A
vsFMy7ubKfl3lo+cPxr4nyqfa5xcFHFIfz6wavXesrxK4ohufML84Si+x0pC
TxNPASef6WcWV9Lv67G+yDt4QeI36N8Blrep/oPlleZjg/idjw+h3+nnTbK/
Z/tPLv+Y+7n7274AeWPvyf4k+95HWdxf87cs/7NKfrDlgfr4e7HfkJM3Zvlk
7v6sb/LiTpfxJ9+T/F9d3/Cfe/+cxLevsnk52/Iidf0Xfm1H//65Ih/R3Z99
odcs7/IMiT8T98ePKPJX3nA4+4s/TOyvFOP5iYtPXi77+1+zfRXkTuOTe9q+
FPHJMUU+osNvtX0z4kfPS34B3/vOzO970vZTwbG/8wS/WN4q+fmVWUU+q8M1
PqHxsWJ8N892s7xH+AT8wiJvNV9seat2HsC1D79cZHmZnxb7ZbI+1tj5lUWR
/oBfKOccBDj8MMbksvb+RCfnX2j+dp39EefX/EH44Y/GC5qfxHoL9zl9/Jr1
DG8MkPzvscYfxJXHyv4A/BHyBn+eHz4M9t98fin8Mtv6ofm19JvnOEr2D+GH
p40XNL90mc0b86j5r/DHj2x+NL8WfoAXlD9uMn5x30eU/Ff4AV5Q/vh5yPvV
cyT/Gn6AFzT/9lbjF8vzrrwm+d3ww5XGC8ofLSX5K/DDEcYLyh/wC+Wa3w0/
zDdeyCQ+RD5TuL/v40/ww3Tjhb9Kfrv695q/DX88mYhfwA/wwl8lv93yqrN9
jFc0v5r4heUpVS6S/O7w/JzLb3P1bT/TnVuozS912QzLa9D9Pa6fFMRpPF78
cv5sRdQ+8RnOF9S2jzgftk3U/sAiH0X2Pzxu+Ro5ekPx0L9YG/Er+4tLEvvD
Fj+vdH79lCsfu+jT6PnwL85qXVd10fMV8a+dZP/J44Ve6WTruk0iftzC+aSo
f8Y3sj+xwffXi37J/kQ8fosS47dZ8dzVCy0OqLieS6g9/+9Wwv0Jjxfxvc9t
fDtE9W1csl2KcYrwxSbfMxPybXKRkdeTyA/NRgb2oY7PQIs775QYnw55cX7y
82h80P9nGk+m1mcYH9T9gXq3LnR/gvULrvlLrD/aeV7OTxa/eTP4DWKfsz5p
X+P3yE/YvrffLJ/M4bX3H+pz2tf85EuCfZ/6jHUI3izreonkH6Dfaf9cW6fg
rD/qsw7BR9j6nRs8v+d39Du46gfW59xw/lz7rE9w1d/2vK59zS+2fDQ3fjr+
rE/qq35mfYKr/z/K1h/t727rEJz1G86Plz/W39yEfC4W+Vf7CHkP58fbV6w/
cNZhOD4DHc46Bmd98nzYM+CWz+Picro+8cslv97h7vs0FjfS/LqJQT408XOP
27l2t45r80M30889ovuH8f+tov3HMD64Noo/sj7ftnWl8YlTzS4k70XrL7H3
A3xm9r3i+O/k3ej4WFzA7W9o/bZFvki+r+yjhOPfUh1i9rf2f1/Jf9T61i+J
z3v8CRsf8qMUt+euTjT/Se9/pZyb1vrHyvk8xceZP0belM4/+XTk1ej42rzl
p4qcgy+39cn6qD2+Xr71/pbfYvZZn2h8i7yhzVz8SHHs3/8wPyZ1f54rkf/l
fjU+H66vtW6d6foM78uf14/NQft+f1jzplln4F+z9Un/DpP8QNYf9TU/kfUF
/pnE38ba+qT9aZKfxvqzPC97X4DPf2N90f6+kr/F+gz9EL8/Ee5/rK2MlPiZ
nq9R/fgdW3/gqh9ZX+DTJH6p47dcxo/1B6768Vh5f4bqR/x2xq9e8tfYlwNv
kfzG5eKfqf/D+gQ/VfIPp4jeUflnfVFf4ys2X07+nq8ZH/Hvz7tK4jucS7c8
e/cLznl2xlXfXwB/WRwoWy/yG8ajfJ4auPlfVc5Xpc4/DbJzDWp/WvyIOE9G
Pjf4UMvHnWbrdl3N/ILV7pyDxvfeD94fsRXty/5o14y8bd3f0Pw0jU/eYu8v
wH/W/F7yyqcG5zt9/I3z5avsXIKe7ySvivOddh7A1Z9o5/I594A+BLf4TP6x
5fFMsfM04JzrDM/Xt43kp1dCfix+VOF8mJ6fG2bvBQjPd/r4Ju8t4P0WM4Uf
OZe+Pji/6+P3dq4h+9jONXBeAHyh+J+6vlm/8IOeH11SnDuocv6K8xRufopz
Ixl5inaexNXHviWuebWcX2M/Eb2h71di/FuC83F+flif4brkz+kXzoXkev6H
9cm6HCTnjzifRF6Pnp9g/bJum+T8CPqNdanyw/p7M8gv8Ocn3rX1+5StWz3f
wfkb4n+an8f6s3M40frk/SPoPY1Pkq90lK07XZ/h+3VWV1fJ+SLW32Rbd6sl
v8/OLVn/63M9v8T8r0vMv57LniDnR1h/yImuT9YveYUr5fwS6491p+dXWL8z
bN3q+7/K4iOsX9atnk+aLPYt6zTs31DLf8kyPb/1hq3fw23d9pXzQ+hX1qXu
PzBud4d5qIrnoV3Jn88vtPfQVMdL/lzo37l9jCi/ZbrtD+j7kWZb/CD1/oJe
gX/3WUXlg/xA/AR9P5K9t4lzKbm+vwn78lDbP0CewMvyM20/xZVPlPPJNh/5
6eE+l8NtP8WVXynxefaLPrb9KX1/FO+7mWj7Dz3l/WTWXnWN8Vft/dm0fUV8
7NTE+aGq2LWsV+l/Nt/2vyYJv7Kv+nXb39D3n71p+43ECfT9bGZvkr+Z6fkn
1t/etv71fKzxpYv/6/vZiL/JPmvkX/7K9q/0/WRh/LNb9P111tclwTnWlWJf
Y6/d1qzxzTD+uaai+SG8XwLe2zeRf8a6nCb7+6w/1p3mD7C+brR1ta/sb9v7
cvLwnLPffw/fv7SucrDs77O+WFe6/srOV7C+eE+Wrj/WJ+Wa/8F+G++vukv2
/1mfrMsPJb9E7R9df1fKua41Yv+zvlhXqfN7lJ8q/jHri3Wl+QWsT9al5q+w
vlhXav+yPlmXp0r+COuP9+rsK/Yv68v2wV0+Azjrk3Wp8WnWH+vuKskvob+c
j1L5A59j5Xp+IqzfLyNPTfFpVq759eCHWt77xTX1Z7fsguD9bj4/Hn3NvoHa
f6FdFL9/DJxzDWr/gVOu5x/Ie2iwffEVkn9Pfgbl+n4s2rdzSJH9x/NTrvn1
1P8o8X6TMH7dwnmFqP4My2NpEf+b/uOXcx242eXZWjtXcaicL6F93puwJvH+
gR/auYgZcn6E+3NO8BQ5P2HnOdAP2F8R/7POwnw5d/7F3ou0R67v1zC/M/+2
2a/6fhHehzDa/Af1/8hvIE6s79ew8+45fqe+/wP/53Ebh6HyfhH23cmbVf7n
PE5of/n9R/xG8h+U/+19CmJ/bfD+GeJuJh97SvyH/TPy958TfkK/TJBzeODk
34T2l99/4vwUea3K/4W8d85D+0vPR79cXWr+aZO834TzaPj9+v4c8+fY38r1
/T53B/lNqyr6/pow/363TN+fQ34Z/pe+38f85Rz/+X3Rr+H7B9LvpySuNFXs
L/PXcuRe4y/wGvGJJok/9Q7soy/8L4lvIf/IvcZfyG+eYOtG9SPxO94/of4b
8o/c6/pg/aTO5yP/Pze51/WxPnh/1uqq2ifI/8JE/scjtn54f8Va4V/kv0XO
mYDb+zjc+pgg/IP8I/e6Pj6S862aH/6wyf9VJvd/l/iXvJcxer8d8j/X5F7j
v6wf1o3yc2gf9Y3iq8i/vQezqvFf3rfKe4Mfqbk/49//u1b8O31/jb6fhvwn
ytX+oj779qNk/xycct3fB2dfXuVX9Fuu+/fglgcR5T+Ah/mLPn+D53vV9nU0
fwCc8sWy/0P7Zn9G8gtOueYHgJP3ofmLer5N80PC8/MDo/wEcMo1vxD8UrMr
NpP8GHDKNX8E3PJgslGS/xLObxt3HXjxe38D61PtO+KvrBM9f0B5+N4Y/lZW
jj5+4diLnmmXHz2vx27rpnwhl4tuuKMl9/KH//lI6+/71cZ9vrHb4vmev8a3
/r9/9t7uey/c7MihkXyyP0u5+vfLKmu27rLtNlmjtaPyOXT0yrMff/ofjndv
Gz5o4YdXt5f+dc7vs1/VX8XzfFod2/p8r1dHF8/r8NDer2tU+ez/zXzssDte
cnGhAa3/9/69zU9zk82L8isjTXl0vrvoX2V0a/+2yMa0/n5UMn95A/igTe+5
4sbBb1e3LX4rtz7ZZsD9t/n1W8zr6xWe+/M/F/dLtf9569801/6lxXzn77fO
b5u82wHfvmpKxet/7AvO4S5tnc84PtlL5FTlD7lzchjObza69e/hZt3/Rz6R
ywdMTlX+pgTP6eXzUpM79u/eNzkG383k73aTO5VP5Jdy5Fjlj/E/weRQ5Re5
nSr9Q/6QO5VP5Dcs58/L36R/KZ95M+V3C858TZn8z7+ZDfr+qTYmv8gtcgx+
rMmfk3NZf/1Nfm8xue1jcqz3f+mX//XFv/kNk+T+400+u5tcIqfh+LTNkUvk
FBz/7Y7W+e2eDWwd5+ViP6+u7GTlt9t1is/Y9bWxZ+3SJ4o/gFPOdeDYx0tN
jjT+IOunynWKI3eGy/O79nOVT+ojPxp/CO/fNorPgS+z8VX9BI78vSX80DNo
n7iAl9/wfa51deF1vn3TE5XbRT+AU76HXafzX8hN36yYH//9tN7B/G6Zv2fX
gZve471sxjM9XH3896ZgfXv5mxxcX9eo/FTw7SCnP4v5i98v1NPGRfnJ+uvs
u+nyfMX6/Kh6pK1bW8+u/tbFusrhV11fodwNjOSDfvcM5cfVZ9xpR/np3Va8
i/NPWO9h++9bP7rZ+L4v4+v1218f+fEX/6Y01x7/vEHf71Jb/97v6hf8tUle
8NYmmenfXNtHf2n7jEfB7x2z3U3fgKPfkBvVn91NPpALlR/uH5bz5+UD+Vb5
4Xkp7ynrD/lALtQ+NL1QRQ8eJfpB5CN+/6rJBeXIWdj/LjlyofKDfOEfKP+F
9ih2Wg/p3/v8Vi81OUuNr81zw5dr39e/rv+oL/7d4eSrr8mX6ce8n8mZyg9y
09/kKGy/pTre+q3yMSWUq3y8PB84+lPlAzzUT7H/0BTMi5c/cEqaZP7A+7S2
/2bkP4JT3teuq93+omb1H+Fnygv7d2Gz4siNyVM0fpTXli//fCqfk+X+Rfn8
ZsWL9rsYT9ZH96fc1oO7v/XHyZfOv9kjbt0rvmfr3xzzb3pE8sP/0W+KG1+4
da24yZtbt4rfess//2bYvPWI7Ct433gwwtHPOg5h/+H/+xsSzyf6yePM6+R/
OT7w/53Ntcenrb1XuWtUf7rND+W6/nReVT+c3Pr3hNM7zKPOj+ppnZ/Qf/fy
C18wLsxDOH+TmqcG9dP8xzzo/IX2j9+f5HmnhniyfeYhnD/8H8bP9w//lvHr
IfoPu5p50fnpGa6riD8Lv6M9/B3tv6heVPzNgm/dvChe2BXLK/gt6l/MLPQ+
vBbnv9l4L5PnVPkL7fgIz0yOo/aRP5uHBq1v/Tb7aHlifNu671ekxpfy3cX+
13nT9RO2r34289/B4bo+zK5y/VL/wfxKJyfqX+q61/ge8wO+TPw/nof21f9k
fKmv/i/zE44rf358eifGB3sYv179e8YPPaf1i/H5zJV/tYiHuP4RnyLuo/q9
TL/yJKx7jb+MsfjUscRtFtWKn2n7s0V/d3bxUeUv028NKf1mcbF8jMXFascv
8afq6vT9/IzfrjZuOr7LAvltm/BPW6pF/OfpyH5qFLv7XvG/6NfUBL+WtT8m
iA9+WjlO4mein/P3JH7nxs/GbYzEF8v6F+pnH4cIcR8/0fEt1sWbLu6muMUX
K4PMbq8df2mb8f5kxYvfvHl76Qc440l8prb93DnrHcQPVD4GOr1be312zIeY
/1E7Ptk275fgB8aHcuVPjUspP9t9JT7v/Z+pMu7LxD9h/MC3l/UT8ifz6/U/
zw8+RPx381cdruu/TH9Z/9z+T8J/qBA/1vhbGLfpEuGTgvUe+ye2nl07te/P
+ovzz3le/KNEfcoj/Yn9Ncj8OuUH43+X3/SB+D9TgvFx/kWmz8d1Gr+YVLNf
/Pn1Q/vqP6vdHPqDbv/B4epfIh/gO4h/y34PcQGND1hcJrP4SLa17N8YH1aK
faEO2TGiX8Lx8nrS3T+w75P+D/GziJ+ZX+OZaH3Qv+/QL9mffM+ej/i/zl/Z
/uc9Vv6B9Uvjt8Xz3eL8A/Vf6H9oJ/v4FOtyivyq/NyXwMO4chy/K/bLtkA/
VnX/kP7tbvp/oOxfhuPTOeJX2nftSnyY8TK/qkHtJ+5vdkhlF7Hf0GvbmN+o
8W36gx+q/mUYP8D+8/ZHuD/p9KdrX/g38p9toCUu78d/Y/EzD/i3Dmcds6ja
MPeHd08YrPv7dY3ntOLLqs8OH3/yb2/bJMIXWHlRf7sIt/Lc6ueKU2730f1p
69+y6oL/1f07WfuLovbp34JE/yg/M9G//8fae4BZVWRrww00SRwEBEVBkiAo
joIwJhrPNgM64lVAhUYZ55rumEXlM9HqOGP2GwOGufeOOqM2QXRMpMZdEgQT
gmkMoCiKmEhigEb5vWe/b9Wst86eg9/9++nnOc85a1ft2hXetda7VtUu/R7p
wE/znA19PyntyjnIT3le8sNYf+n3jAU59//o+29Qf1W5+kuf0xrkzKPR/Myt
bR/3oej+D8pL77MPcubhav7r1vV/RQ3f7677R2x5vl8rvj/zfHX/MeMmzEvT
8zdt/7R2en6x9u890r/k68vVXzrOHvJzbBw12Ifk34jvU0R/sP7SPFiQ027Q
/BHUX1Wu/tJ+vMrVz/nft4/y0nZUsG95/pnG97eu/7086n/bfsY54vaVthOo
/1+gfePzjPL6V/kt7d+O0r+ovyqvfrG/airMX6S/c/jtFkmG/98W+Ek57Q3q
H35urXySlRdUv2ytnHpF9cvWyvFcKT8pr7XlHT+3Vs765fz+qP15cvYfzplM
NX97oinvzwfaajntJ57TeKvgp7QvOp+9nFzfz6L6p5zc1h+f77S18rzzF3+e
vG20v7ecXMYv2l8p9/fvAd1auYyfu1Xy/yVuUFD+V+WKL1uLD+J/R/MjT872
Z/jV23/mtC/i75WfzpPntZ/jw/hMXv5GHn8yWeSqv0rzPw2j5ysnz/Ov/v+S
S5woev48uYyf4yfl2We+f0M8tn5LkPN3qze0fHPI34jk1BfWr/m59ee3j36H
xf2tv3+58vD7+JyRnHiTd/4V/RmrV4Kc5y7g/GY+f83W1k9/Ju98A+K5vsd+
a8vT3ra4t/X1cz+pvAfHy8v1j7x3L/m5/cdzm+QcQS+352PG76cud///bf3l
+rdc/9He1TwlyiWvMOpf4l0Hg9tbX7/kJUfzx+J+yJPc2vISn4n6p1z9Vi+1
yZHn94/khUTPX67/qJdq7fNJ/0bt3+r7/2/rL9e/5fqPuMn7qH0/AN9F7igf
B3ymXP2Tl+HvUK7+Aa+X8oWtvf8i1Ef5IvGvyj1fufufL893vjyfnrui9it5
HfKyur9Pz81V+1T3l+n5WthvJeecBv9Bz6VQ/oy8j7Tf35/2NuXqP/F55Pl8
+4h/0j5/f+otKw/+B/0pyvX8nHnSP+p/6Hvhc97fmEj/+vrl/Fun/l+dPF+d
PN/sMuNTJ/XXSf36/uq8823lMxF5Uptjn2teoNqn/F5r5YmV+31FEb+l+88m
5rQvz7/g9ZNz5Pxem1O/5H8xT0b8j5B/Wzo+2juxzxHsc/bPpJz+4fX2+XpL
+xomtTn9j/xX/5yaH6LPp/6njk8nGR+Jy/o8ILl/Kvf39SsvpfOv19tH7vzk
gopkwq3L+jz620/9dynv/RyNv4wafmTzC5dtl1x12Ll/vGvBpsi/PvnJ23s8
3q5tsnaPhz9+7sYGieJ3Of/j2Meue+qQzi8VkuwzfW7Cgj/dflyIz1J/cP6p
/qis+eYP7Vb29Hqp9d+Hf/XVwG5ePj5rt/er+TyU15006YHWcxt4+/nkuye8
1WhI6J8zzj7urXeGbCiMvit56OCD3ih02/0ffd9qH/DtkIuW3nbWu+2S1z9f
c8zlQxsli/94WV37G971z/9hzQuzbznMnw+bjjik19zPHm6t9afdb6189/ZL
VqcjTqnY5dCDWnr55DOH7dfzms5J1fIzvt3/u22j9yueP+KT3q/+tk8yCdep
/ujV4NTj2jT5Ij2224o950z9NB1TOX3dMTeH82GpP/od3+Dw5+uauJoj3fAn
pobz+ag/7vmPa3dd/fbKdOwOY9a8MyKUn/Ft/+0e29wsWfrJqFteW/l1xF8d
e9aMPm3/sm1y0YnLp+53w3eFXp07dWo8PZwv9T7KDbr++O37XfJ69H4Ffn/1
oksrv9tvdeHJ2XOGHNzjR8H3jYVmy5dfeuro9wsvd752x/VvNPTlX9v4ylNj
a9cWxow5b97q9S8UFhy+/2XnNQj7o+pb3tR96KU9vH8yK5sPvv/OeLLXu70H
NE9ueHDoiUN7bCi0fnPq2K86hOcbno2ntxsGNRryqwFnhfzFM7Py7rB5Daqb
/duP6fctkyF/+jjw81w/a7B+xsn62XToWQuuvc3vOyhwHVI+dVmjrsP6f19Y
eelfD9y39dLCqy/v8ZdLO4X8hYuafbSg0QU7J9k6aYr65/n5Q/+dOJytn9A+
1J8+s2Xk7U36rEtrZ0157IH9w/r5ZPVOPfr075pUY12p/im3PrP27eF5bdUv
sF/TeVPbP9379LXpXne0OPip1/9pfdBuKMor3OBvXvrFadeG8ymJz/8Ydsjg
MQ99mVYueXXcty+E8+VeBi5l/b8u4sfav3nY7mcd3BLt21g4pThe4fxCjse8
bnXXLv3z8ij/rH79rW8+OPkn/7fYvlbAxw2iPxomVxbr+bwwstiPW1Q/FjJ8
/bCQ9V9Daf+3hS7975v/4mdvFwYVnz+M/07F9nfy/o/6B9X3X33Avj0bJ+Nv
q512Uuu1hQ6rhrdbsXc4/2vEyof3G7TogCTzA3ZPsvp39eOTtde/f8mNndb0
rW63BPsT9bv9/z5yVpuBm9JfDdnhozs+0Pyk/PiKxE1S6hnKy/FfopfSPP2k
fgjl2aero1zzAzj/KFf9xPUt7ff1r8N3yk/B9ZQfVsTFFf75qa8o53fKj8D1
vn1FvbBdYsuH80Fm4/vlkPN6ygdC77C86p8Ml1t6eYbDq72ceoly1U+VuN73
L+qjnPqJ7WN9/vnRnivY/2gv5dRLtv3/9P6Kot7bwbfv3qKea+LbR71k2x/0
0wRcT790H9Rn21+ZXGzG5/VIf7F+tpfy5cXvK+gHw34I438CvrP8Mlxvx69j
Ysu39s/H75eY/uvo6+9exJVV4fkznPVyfufzdcX1lGf2ZivfvsafdfnP25aF
802a4Dv0XsrrKae9xvKqX8bI+lon66vc+ub1F+WsP15/bs76ZnsuhLxa7Evq
Fd5f9UvWf118+x5I1+3b7IpwPib1CuWqXx7E9ePM+IT9Dbye4/Mc6qOc7eHz
r0Z7Kb8HfsP5ZnzC+PM723cHrqe8cVH/7+jnn40DkF9q7ttfiesppz1EHD9Z
xmcO/IUj4D8cDn+CcvE7ahT/y/FbzAeBH1HQ8WW9eflh0I8+vncl/BHK28Ae
4n0bw16ivCv8jZHwP+iPUE5/hf6L6gf6E13hX9Df8HL4I/RP6K9QTn/mDfg3
B8PfoZz+wL3wD1Q/0N+g/7En/BHKx8Pf2Af+h+oHfp8I3Ke/QznxfwBwf7Lo
B/oD9A8U/+lPLIJ/ofhOf+VC+C9D4c9QTnw/HLi+TPCb/BVxfTr8JcpbwZ+4
Ef4F/Q3KZ8IfoX9Cf4Vy+jMnw79ZAn+H8u/gb9D/QP2+fwfDX6H/ovphMfyJ
VfAv6G/48cO6oH+yEf4K5VdhvX2J9TtK1u/D8Ceegn9Bf4Ny+iP0TzR/8iL4
M03g39Dfobwh7H3a/6o/6E/Qv1gk/Pgg+BPQcxH/1QrrFzjiKmX98vqBwIUL
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
B03uMbti+33x/N0TPT+v3PxG/W7hjPSImp0auIkN/3T608+H+C/bn+JT+d2J
D+w8pu9/thF8fse3fza+z4Kc11M+3+Czx3dfnvORcuCsf77aYn3dvFzxlddT
rvOb8366aV83L6d/72z9Xp7Nm8bS/oCv5c7P5fyx7df3fyysolzXD693Znzq
I/xl+QFoL+VYt16u+oPfPT+P6+39uye2fHg/Jr/PNM/Xfavr1/bVS/u+POv6
i6+bEOZPfVFPf+nnzyZ85zmNvJ7yYdf9/pYNf2vny0fnG8r80vM9P/rvo/ss
/LCTlys+8nqXM794PfuH9VHO8/yeg/x4tFfH/9mc8R8AXOP9pxVxKPDLGR5s
8f2r+Pg0rqecOEk5r2f9G1Gfzu/ZOfOb9tuzZnyCnN9ZfpTYd1t+u+t/TBvQ
xT9/1n8Bv1fgO/GH11NeDXuuHvYd7EfBr+Y+frQC9iLl2WdFjcM6U3ygPsS8
TlPBt3NEL/8B9qDMn9zzZeeK3u4Be5Ny4texsE8V/3i+8wjoVz6HvX/Qqzp+
tBevgv1Ie9KWj87/rrD9G+xyPb+WdtV10ONni31cK3bxM7BXKKc9ORP2JT59
/dSHfD8Z6vf9uwT2Iu1HzAcv7wB7bjrsu/dg71H+e7FLaS9Sfh+e93zYl+/D
3qT8cthzB8K+Q/1+fvwK9iDPDcX4eTntySWwL2lvUk57axTsL8U/nb9O5i/1
WxXsO8W/fphvczBPF8PepJzXL8D4TZfx20X8Itqztv5N8C+eiN5feQfsuQOA
W3vC3qP8HNhz18O+i97fK34N7U3bvobJ97AvrxD7n/h3NtbXTFlfc2HPfQX7
jvYe5Xfb850T2ou2/xskM2BfUo/49QF77kXYd7T3dP53zJn/fF/KQujtBPYm
5eXen2PfF0f/M8wf4kVNhiMp/NAIX/Pez9YJ/b8pew53jrSfeJnp3X1QPrz/
Enohhf3s1H6x/v32Uf7/N3d0fGNj2zbJVcBB4KFvf88iHncS/z/g503F9dee
7U/0/WDlzq8mfmbrr110PseaZXs8e0nnDuI//5N9eH/NQ799skkyK/t0wEtf
PluPTRPrP4f4Fs9bviV7DvoXXp75JzskfA7gkb//2qte+1s6fHvxn1/y/TcN
95+L+y+W+1M/Z/O/QXR++eri84f362TjEPQ79IX7sWgXJPBP+/r6OS5c34qP
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
qkPE/1n/sNLp/LB4XlGh778Gb+c2Qv8flcO/k9+lPaHzg3aSzm+273fQ/zPQ
z6XHrz5dLf3L+jfB/pgh+M3y1O/K71IOO8dtEH7ejn/PiN9l+6cBd2olP5Pl
1+SMD9tPO+8M2BNaHno44md5/8tMfKRzJKf+ny3rb16Z9cu8qyrYHxjH6PmP
gv6/UvZ/UE5+9aaS8ZO2HLeE9gjl/vxj8I8an+Hz/AB+k3nslNOu4PrU9cvy
jMNrfrm+n96JfhF+NtH8XOYHcd3+WvLPrX3WBvWH/PfU1F8ZzR+Wp/9cYf6C
nPyH5seyfeRVhkt+MPH6+TLPR35S82fL9T/Hl/xolcRv2X7yj7p+KSe/qfu3
2H7y/7p+WT5v/8nW9j/5Tc0PplziDFH95E81v7zOzO+mTvPbZX4mmv/tzPzq
FvmHtv/aOs1/5/25fjdLfjbLM346Q/LDLe/KfQQbVX8nkgco+MH9YR/78wZs
/20sDEWegOYfZ5/cf/Zj5D9MQr5K6X1+rL958gnsQr0/80ts/CPImU9i4xNR
+z2+qH3C/IkzbZ6Ml49EPoONTwQ54/8TsL9R20+8BI8ZPf+JYr+rnHGhRlle
QITPzDeZn/P8zF/g/kiV+/MLML+0f4gH6Ifo/sxvqTb7BIKc+Q92H06Qc73+
X9idpdtXX+iD/FztX+a7YByj5+f813VC+fOY/19i/quc+SX0I1TO/BQbnwhy
8tuZn7ltPP8Qz+f+wsi/Rj4A8+RnSX4A1y+fY4r49+wvPn/e/hDmb2v8O/tc
XMX1q/Yr99ty/DcJf3+T4TfWp5p/uhvyMbh+1f5m/uY85GEjzu/r32z2B6wv
KL/6DNb/Psjr2Cj2D+Pt8ONZv8fXNcKvKf+ido3qB+bP/h756+pfMx+D+wA0
f5j+BPImo/wt2v3Mz2GeD+WW/++K9gV+pJPh/9snyNNIbP0tEPfZFO1f4n7s
u+C/PyP5Y4z319s4npczvnoz8uQ1PqHzc6PMT9oL+2CfhfJPzCdB3q7Pg6Xc
lVkfzG9ekrM+mV+LvNqUeSyUk+8hPtws+b9Pw++5KcvDSX7I8nDk+Vr4++r9
7f7CjQWVE28+AL6p/B4TjyN/F+TCu0b3535t6nGV9zP8fqcofmnz9iojOfmX
zG9tGvEDS6H/Ztp6vDyLv1UI/x7k235wxvXPXvFd4XL4VSrnfpdsne4WPR/j
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
f2XA+NP/+/5vC/xUedW83z1yc++dEn5urbzWyv3n1sqJH2MP/femF57wccrP
rZXL86X8VDnKFfj5c+V55zOUkzO+wTygWyW/U96fGp/fW0bO/uF7KjU/T9oX
5aeWk9NeyHu/ZDm5rT/e37S1cnk/eTQ+WyePz88qJ5fx858594/ev1BOLuNX
0P0z4l/lxKfy5Wx/hju9E35q+TLxYc9vq/24tfj0r/GxvDwvvrm18jz9srXy
f53/FOT6fihpX+SfTRa5xm9k/Pxnzv0jft32b7487/kr8Kd+POXUB6onKF8E
fUP5ItE/5cqPA94LTvv2ny/y80U+APpG6ndbK6c+UD1B+cvQN6qHtrY89YXq
Ecr1XAo9nyvn/bReLucLR/qD+oJy1R/Mj897/7nm7dcJ/mves+oXyfuO3q+r
5/upfuH7Mez9P5P+bSv9q+eXR+939/LZUr/qF+oL1SOUU19QrvtfdX+7lmc+
tOoRyvW9Ifr+dj1/Ne/9QapHKJ8EfWFxIugPXl/7L8vn6wfqk3LxB9av+kfy
EnyetLTPyfM5ldfmyB+V+tU/0/hcDv5r/pX2TyLPl+TV30nqF/8zh//q7fuN
3+X5hCfW/L+IH1X7zz9fTvtTab8vT7zNcJO8Gv+oP5okFpeDnPoA5SN5ufKZ
vngjzeTNI3m59vG+Vi9p+eaQvxHJy7W/XP3yXvaofXKuI+uvoRznw6UWl0N5
4jHOtUm1vN2/Ep9PUK5+lrO4F+Q8FyTv/cvl2sfzQuR8ka1u/1b2b277ea60
1RtR+dzxof6R86m9vFz95cqX699y/Wf54Zh/tPjn+SNfXvlVLc/fJX9T7h/V
L+Xz62e5vP0JEjeN+qdc+1hO+L+tbv/W9W9++yUvJJofWzk+BYk/iTy//nLl
y/Vvuf479rHrnjqk80tpgs/nJiz40+3HBX6d/gTtC/UvBFdrLM6vLVTWfPOH
dit7ev3R+u/Dv/pqYDcvH3/YuX+8a8EmH8cbNfzI5hcu207vn6s/hHeK4ve9
3j5y5ycXVLgJty7r8+hvP+V3L8f93FVoh9ofJz95e4/H27V1a/d4+OPnbmyQ
qP/x/iejbnlt5dfpoOuP377fJa9H5zOecfZxb70zZEOh+62V795+yep0xCkV
uxx6UEsvP3/EJ71f/W0fN+nMYfv1vMafU+F8+xucelybJl8Uju22Ys85Uz9N
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
eWLfs/4rJc9T6z/W5p9G8y8vvlpuf/PJNi8mVX673P4A4b1T7X/y3sIT+/ZN
AK9NP3Qf4bdnA48vJ08n/Dhx1dYf5l8leG3Kld9m3gjlRwg/PhC8Ndun+Ij2
+PJ1wo/792aY+gM/TvtceGYvJ19i7x/w9TDw4vb+Qc74JPtP8Zv72a6wPLSX
k/cWnt63j7w25fcKv03cvsTUH/jxgeC9bf0Bf18Fr015M+G3yZdQvkz4cfLe
whP7+z8IXtvHEYTfbgJenHLlx8vhbzn7nPY950dX4ccbg7e2PE3wD8mL8/7K
jxOXWf9zwo8Td9m+1cJ/I78vtTx84K+7gxcfa/pPz+dvkZxr2h/4ceIueXjN
7yPvbeOAAX8xXv75HxB+ewB4cYkD+PqZN8jyir9jBB/XCT6SF6f8DuHHkZ/r
90crP0RehDzM4aKfJC5Zo/iKfHLg2uoov568xoU2j83Lkc+evmHzDL18PHgP
yfPzz/8deAvyGGcIf0G+WPIMvRz5/q4reJQzhD/h9bRPPxT+gvh6OHB1meBn
KnHF6cKfkLeQPD0vR/5IInmIXt4VvMlI8ChnCH9Ce/ZZm6foy7PeicDl84Vf
IT4PAC5PFvwm7yF5niF+Ct7jXptnGeY3eA3JQ/Vy7DdwJ4MnUX5kFHiPq2ye
n2/fGPAa5DnaC79xEXiRJjaP0Mtpt0oenh//VrBbJc/Yyxn/+hI4PErwl7zF
ATZPzpenPUscHSX8BPIx3VM2T9P3H+1Z4qzGn8h/EJevKJm/Xu9x+UXNjwZv
IXl4Xs58RuJwe+EnFoM3WQUeZarwJ+RjidMbhb9gvbBDkwuFXyH/cTJwfaXw
J+Q91tk8T4lPbAAP0SrZJPwG8kUT8iTKjzQE7/EPm4fpxwf7MRz3ZywSfgP7
FVw38CQvCT8iee/uLuhLP39s/0f8NfPaBlmc9O2XvGTirC8vedHR/ijmXXMd
g+/07SNeY99Min00Xv6+zYtnfkfgt21edAo+3ctn2Lxrn0dBOfFb9JiXE7+J
c80znAv8FfLmiWNDMxzz/SN5+eQvfP9MtnnbzP/wcslrpx7040N+mjib5XeE
86k/tHnzET/NvH7qYcQr/P2pT6gnd830pMRvfd57xG9Tn2Lfm8N+BC/n/iHB
Of98WE9ukF1nvn2jbV4xcdS3D3jjdB1QzvXGdbZbts58+4jHO1uc8/LNNu+d
fKiv/yqbV8/8EF9e8p6pp7z8ZZtX7fMwKLd6YQv2qXzu5SzXCjj3dYZzUv+3
ikO+/y60efuJ8qfl8gclb7ug+kvy2t1csd+J38TRdzMc9e1jXrTouWB/YF/A
xdDziIf4+1PfMP6A/Q6+/Cab9x7h92jY57Tv14h9Tn1MPYd4gS+vuJyT/+H5
R8Vn2r+nA6cPFXyus3GtyH6m/Xm63ccY2V+wu9LRgt97AnePsfssvVziok7x
VeJm3Ica4TP51SME/8lfyD7QEB+zcdNE8RP7ndyedh9vZL8Sn+8VfJ1v45JO
8Z34LPtIvZy4LPt4ff3EXeJwV8Ff7MdKZZ+wr1/ilhE+E5eJ06MEn4nLo+w+
T99//YG7tPsOFPyVuJFT/KZ92N7uw/TyjsBd2WcY2Uewi9Jugt+0/2WfZMB3
GzfFPvOAn2NtXMspvreycTP45x9G+Mz423OC/yz3EnB+teB7ufxuicsmyn/s
DVxfZPcB+/FpaONy3C/k5RK3jOJn3B+00u4j9XLisuzz9fU/bOO+hScFfy+z
cWun+A1/JZV9uL7/iLvE4VWCv8xbrwaOrxb8lrzhiN8fbvNuo/wcyfuN7G/y
h+ANI/76bvDT+1ieM+K3ia8q74dy4EWj9ktecXR/1nuk5dHz+I1IXmnzuqP2
Sd541D7yr80sjx7iHzZvOZKr3a3jQ36DPLDKya8zb1LrZ3yA12l58uPC83s5
47ZHWB499J/NG476ZyB+F57WyyXvN7o/fwdvGN2f/LTwnBG/7eNvKkc58KJR
+yWvOLo/651jefQ8fiKSr7H7LqL2lYvfcd+25Jl5ueQt552vK/mHcf4e805U
LnnnUf3Mm98d12n57jZvPGd8KsAvrIr6T89tVPuT33n+mp7PmL3v/Q1ctyGK
v83H7/a6IM/ej71zslufzk3mDekU8RP6fnmV90S5/qhH5R9n76P3+W05z4f3
tm+M2kf78wPUo/J77LldFSqfhveO2/OBgzz7dHV32nPGvJzzn/hXun/bJny/
uY5Pas5/5PvXg5zvTX8te4961D68Xz2ZkfN+9axdzZOsfKtofPh7iutUjvfb
8732kZy/74HrVH7VM8+NX7dyeaHFB2dc/+wV30X9ty1+vxzXqTx7L/luSTZO
PaP6zy6+f/wbj1Mqn45yrEflHDeOo8pZ7/m4T+nzuevT6Tnjz/2ry3PmZ9Z/
rYP9KPKlKDczZ32M/XOLP17yXIXHv5zzwxPeR+U87/FC1FN6fJq6o2YOGrTf
2i1R/UPwewtcV3p+VSScx6XHp6l7I2d+X4l5MR6f39zR8Y2NbUN+Te0DO4/p
+5/7oN7uEf9ZZ/w5rv/A/6PeNJunfJ4Qf+xnccsBB738pn+Me/Pgxe3dJrz3
Xt8fMfSrGY+92mj7BPiVEgcpp3+9xPaTlxPfZttzXL38+xsLL705fnM6suUF
jbt8takwqvi5jZeXO18w+1xYx3WQXR/OByB+cZ6vXbbHs5d0Du/foH+dfb5T
mFgcjzA+B9aed+LyU9r5czvVv667v+ah3z7ZxL2yofbUox9vkMzKvvvym9Gv
fP/8zVl/eznG3W3u2PzoHqN3jPK36rPyLsOJxpH/vKmMfOazVReMOK0Bzy3G
fArxwRdnpEfU7LSu8Olj89e9fvXiwvPnfT9v5u4hP+nD/z66z8IP93J6zrKM
f3JXsf730wyndtD607k9+h76zQHfFB5u+KfTn34+nB/x4293/Y9pAxLU39fj
pMxPv3/6uI+XPjz53F18+Y+K7evkajFuMzGOOv6e/5TxZ/wq68ctuF+Ir3J/
xr7Feb+p8FWxfJi/82T+T5P5PwDzh/O+TuZPfXHce7p9sK6Ik358a+snLOz7
qY9fcZ1Szv0dE6DfYQ/I860v/OGywataXPtSYe1Vr/0tHR7Gl+dfZ/ffJvKv
s/Y3xrnMDZJsnobnO+aJv+52/1PNkmWv/e0Xb7VclXY57YX5T/QL9x923e9v
2fC3Ho7jqP418C/huc/Z+PTW+t3dVx74188fb5is33HNv89/IsQHiZvEUT1/
ezxwkTip+Jh9VtRwXPR8a67fW4CTen4gx504mIN/Hgd1fx/LEVd7CT7PQrmj
gcOKv1OM3dU2UXwbBVwlziq+EvdmAQcV/3LOX62w5cO5qrcI/vr9iVgHOv+Z
V8J5rfhIXCXO1im+AjeJo3WCn+cAF4mj+v4pyjflyD8DLr4AnFR8JK7OAM7O
FnzFvE6Io3o+AHGROFkr+EhcXQCcVXzleBEH6wT/6oFrxLmbBd9uAe5uAQ4r
/vYD7k00+lPfT9vQYX0kxws+Ez8X5MxP2iebgYOKf/R/iJ/TBd/Krb8a4B7X
7TrBP9ZLnJ5Ven4WvgMO1wv+9gdu0m6bJPj5IXBxKHCyq+AjcbUKOKv4Stw8
Hjiq7x8mLhInFR/9+frA2fWCr+Xen0M8fdT450GuuKDlnzH+aWVUP8uJnefl
fK+s9a+1fRz3HaPyxE++P1bb39/wA3tF5Vdn/aXv3/FylrP8wD+1v9jv3Zz1
r6P+xbro7Z4X+dP0r1GPtj9rXwf//nmt/zHGFXCd1v8M1vtE478FOX+3/muQ
n/nsgEv/UvFLR7tD5fyd16l8Q+YPucGZXo7k0NfuW1ynz0/7iXatlr/R6O2G
Uf0sx3pU/hX6bXJO/1pcbR+VnyT9r+3HuAPX943Kc3wm5YwPy9FuUnlm7+0q
/rW2L4yvto/lWI+WH1Qcn87uCthXKr/K2F2do/q5PmbmrI/Zxi7pFt1/k7Vr
HOydSH8QfyrMH/kD2v/bOdgDvv7s09URf+6U94cQf8hDga+S9tP/be5WFPmQ
EB9f+8Kn1dW9Z9D/TWmvUS64QpxKKP99Ub+9588ZpT1D+TFFu7FRwnMG1H5k
vY9gHmC+eTnjG+D5Ivv1zH88evh1y+ekxJ9of1NRr32TQq9F8eO6x05uMXrb
j1PYeW569l357RT+rcv8mPdCfB76HTxalB9P+yCbB+8X1D8Cf1z4KOOPU/BM
iW1/Y/inraP48vnF53/Nv1cu43FD/iznK+wct7jYni6+fNWut//6iy4/pJeN
vO/5SQNbuHcP2mGbo/be7J/ve9gdfv8qxpvyzC5t4B7J7EaX2achfj8O40P8
minjQ/zanDP/WS5r/zbksX37lt90xXnN+k9NO1zS6dptjt6Uov2+fu6PFpzx
/bsK9vWczA5O0X4vJ69BHFL/3/q/P4KPDPmVtN/GY95cXOQJw/6HbPyeSDP/
d1Ocnw//kvzHwAxvfXnwQ8kdxfu3TPYs8si7e/nIXYb+bqcjvk/BK0Tx5bqi
3/BhCjvQ4yDlA7B+6rF+nKwf8WvIA/nxW2J5c/onXl4N3KwHjlYLfvJ64p/i
V877RSps+fDeDH3/EvvjOszrswW/aq3ei/CJeP8ycLRa8JP+IOMUil+cn8TF
HoKvxM1jgaOKn8S9EVhnTtbXDxg34mAq48f1xn5QfCMuzgROzhR8PAe4d73x
cxr69n0MXCPOKb4RFy1/q/5Ja0ccVPwjrs0Bzim+3QdcJE6+L/gIf9e9CBxT
/OL87pgzvy8Hbh4IHH1P8PNXwC3yJIpfXDfE2SsEX4l/Z2N8FT/hv6dfGf40
4Nfd9v1jieITcXM6cPQ9wU/od8//jRX8Yr30r6fL+mA52gXqn8O/T48FDur7
rYhrBwDnFN/4vtaFwMlE8BF8gxsFHFT80/Wh+EZcnAGcVHzU9+ZZO+8n/AFv
NMvy9F5Ofp/4pu9PI76B1yXP6+X6/r3ZMr9y3p9U4+e/if/Qvwzv1+Z3+o/g
u6R9nleJ+AdrP7eB/njHt+8YyytG+d03Wd6T/Ie//5U2ruVqYO9Tnn0urrvZ
vofJy8nL0v9DHCuV+yfQ+1F+N+MH1AuII/j2HWN5F/d+xseIfvW8ZLT/sdz4
C+/iJmR8jJcz/gI/M3p/5KYy+DYQuEv9z/VAOfl74hR4fC8nvtH+QJzD39/G
xVqAx9ik+p28o6O+oHw5eE3i0M3y/saJ4J3gn/L9jn78GB8gTnG+2fbRbtwR
729crfYD4xqwj1+S9rfF/TtE+d3kTcGDp1wnlL9oeV+HOFlkn1v+OOAbeYUZ
WFeI82j9Ke136hPKJe7MPIpofs439l3AH35neeSrBPvd5s3gPkE/M//C3j/o
H/avXSfBfqDdZd9jGvr/Y5tXEOGP5O2QZ/PPz3i7vCfV359639b/meCTq6P8
TplfzC+i/BPYU5SfbfMqInwaaPM2nPo/Q2xegkMegpdL3kNkf9XJ+C6X8SVu
zc+ZP3vZvBfmyXj5tjYvgnkUvn7iFuunPUq55KVE/stVNm8Gz/+d73/JG4r4
fck7cWrfEh/8OQZZnoiXS95ThA+St8M8HN8/g5E/xPr3zvrT1z/W5qVE+LBU
5r/al5J3FOnXcu+XL/f+YOID43ManyJu0j7R92/TrpH3O9b49gFP7fvn34nw
eaLNg/H3n2Xww+dJeDnxgHaM4gftkqtsHo6/P9+3yviu2jf6XkjFD/LTHJfx
Yr/A3iY/HOVnIF7uaKeofUK7RvIkfPvozxxo8wy8/GvYJb+GnaL2CfFhLubF
YsEH2ueSB+DltO+JA/ViX5A/mGHzULx8NewO4oTaH7uU4WcZX3wO87Cv2D+M
q0y0eQa+/2lXEEfUvqDdQztI7R/aHcSZ68X+YL2SR+Pbx3yr4bCDbhH7Z42N
G0T5GbRLGJ/+QuwT2jUrbJ6Mr5/9+r3NM/HlHzH+uc/j8XLiFe2cfqKfiTfE
JbU/iD/0o8ZkPIF/PvLL1j8Lz78SfILFv4C/7Dfqyaz/4vyvOoODgX9Ce1LB
V3//X+F5+RzAIf/85JtYP/wNXz/Xla0/en957vtnyT/Z/pvj23c9+AyWL82P
d0msHdHdy5mXxzhqxhOG8zfUf1b8qcZ4sn+mZTgg4xPmxyqZHw1HXN7qjv5t
vPxA9BflG7P2eLnyl8QPym8Sfs3mP29MB0n/LQevSDnyaLx8leR/a/4yx392
zviTn2b/ZjxJyM84UeZ/Dj/t599rGl/AfGb9lVl/+vpPyu7n+0fX/3TgNuVn
Yj1Qzrwiyqdl/SXt87xzsqSk/+DzApLS8ZlKtxJ+CnlMrZ88rfaPLf8x+ZpI
/jzGbYr4D5I3m+d/0K+J+F3rn21I1X+w9lhFxd0l/Y9KJ3niUf8MtnnMkZz5
48oPUi553NHz0U5Q/0Hs1nSprF/Wz/zqweI/UE77Qf0HyumnDBb/hHLL78b9
n5efqX6j+g+UXw37cVvxTyi3/Ky+nzbMT+VXbf83SPYS/8Hmt/SM/A/KJY8+
en7uU1D/geO3zObp+/ZRr1DPan5banCPcT7VrxvBL8+J8Ity+gcDRP+y/uHA
HY2vCP+aHCj4KnnrbqjoZ4vLjZ2uX8o5v1S/5rz/vULlf4Qe1vVLOeP+m0S/
Uk49PV/0s9gV0fqdbcanEvkHYX0St8+Gnp4u+pn1o11RfsVsozcaut+LfgXv
lTaFHh8o+nu2Gb96jHPoX47fl5ifql9ny/irfqXe6/JipsfrRX/b9q9HvDbo
X86voZi/un4pp55tJPqV96eeXiL6mffHfaP1y/o3Qs8uEP3K8aOePkf0s42P
+Py1ML6IK063eRhezvizjT8ofvq4U878+8y3gzhIefbJ/Wk/Rva11Qs+j9ff
n/tejrJ+uC9/jI3bRvwf7WP6lbr/hX4R8i4i+5lxR+Y9II9D+q9d8sssbgb+
uqXvH2v3xP1XcXMWF3wHcU3ECyV+4ePK8MPC+Fi9tyP5e//8Nj+2obczbPu6
+/y0W8R/Zf6EjT+E9u1SZvwmW/8F8ciQn8648XLkHdwj+QMSl050/w/zK7C/
jXkWXi5xyWj/B+s9MovburuEv5C4rLta4sfjbNw40n/M35mPuLHujyEfPxj2
2QewgylnvgTjY4ofq2xc2iHPRuyPtsSlKL9B8j6T0vHRtsnzJg4Z8ou5/i3P
1036N/CLuv6zz8V1sg9B+sfvm+M+EC+vtXmD0f4qyftNStv3bZ21b8L6vsnm
fUb83mabV5owDkj5NbDHWP/RWZ5kbv8rPrC/Wf4gib9LXiX6J/S/5OV6nKCc
eZuUXyH4yvVN+U2yf4PrW+JwXs78X5YfLPtzdPxmyvjRvxY9lNj2+bzXBHms
Xr5a+G1dn+STWD/GU8bH5z0zz9nLJW822v8keb8+Tmr7fzs//3T/KOeD5dc/
E/z2+Z1O9T/X50Cbp+nlYtfW6Ppk+2SflZefY/clutL7J8jfN4rWJ/XyNcDV
XUQ/Q3+nG2yepK+fepd+gepf6u39bR6mjG/++ptj/JZv0h+k/5jPOQH5PR1F
f3P8aderfi3Xf9z38JrNc1X7sWD59aBfuX5vtHm0vn0sdxT0fD/R78yvm27z
GH39yHcSfj3oz4+g18+0ebS+fupVy68H/cp697N5uvJ8630epu5/on9zZo5/
Sl6EvNNK0b/M91oIPT5R9DfjP+faPFb//K8Zv66tU/1Lvf21zZNV/Z1w/77q
V9rbTvQA5Qca/vmz6PzdW2zeDuN7FZRz/53VM8E/5XMJPvnnF7uc9rqz9fu8
ceaT+/Yx3kS5rv+ni/NyncdF5Qcyv/ZLj4NfnnX9xddNCP3D/BCWL50f1Nbn
12v/q/+k9nm2766Lrz+7X8AntMfLM//1yyj+zvtvxH4/yrl+Z5vxCf4z/fln
zfMHebn+5/qbadof9q/yfIbnIM/2sYX+l7yMiL8lr8Hny+IH4XyzLK7VMmGc
GP3p68/yi9r5+nX9TZT9Wbo/Bf3h2H+6P8PaxR3Iw0frcy7Whdqneq5BafvW
223R/labf9M2en8o5T3tPjWn9XOflO5/ZfnL7D4eL2f+9CaT59Q8qp96VPML
WP809K/ap6wf+/Ci/HuWPwp26pVif8w3dldDp/Yp5b+DHTxD7F/Je0hXi/0q
fg3nSarl8/Y/MG93I+zgo8T+tX6F34cVydfk5H+y/7APMzlD7FOWx7hxH1wk
px2r+08ppx24QexT5IUnVbBzVot9689Pgx7S/eFcdz9Azyj/SbnkaVSonOtD
1w/lxLmBgm/EFa6bX4t+YnnqIV0/qcXtSL/w+WdCT1WV5K89rkbrh/fPsz9Z
/nk7T6P+o55R/VJncJP7hLZE/UM9pvqr3PlQdWZ8fR54NP5cP6pfKGfcV/UX
22fzLEL/lstPnG36v2Wi+oVy5k/NEP1EOfWQrh/b/5VO96+IXRHt37X+38bI
fqP9L/npOfkTzV3p8s2R97ghip8yPg87MuJvBlhePFrfjK9LHDnwr/h9Aq7T
+5O3snnyQX69jbtEcuaV0Q5X+Ymyf07lXBf/1+ZZRPZXH9Sj7T/Txl2i9kle
V9Q+lmM9Kpe4Qk77wvkHOj86Gv+pWTR+zL/gvNX6R9u4VlT/KhvXiZ4fcXn3
pc2z8HKbX/hO5F/YfRf3V2l+NPcNV5t2hvgQ89t4jkZpfq8p/M4GyYESv5S8
8gi/JK89yp+hvmTeGPeLUP4M+oPnB20U/d3F7ntIuV+BctlX4fex+/5Hfhl5
ZOaBUS559anazxq/2Sj8BfUCzx9S/1T2VfCcCy9nfDAv/sv8tXn2nBU/vptt
3n4BPFLk3zBvMBu/sD+Q/s3N9pwOL19t91VE/g1xF3GFwjMSf30a9uJNOKfl
hywP1MuZf/h78Del+UW/b8PHge388/taovPrZmFdcZ2p/cT1zX2km2X9ZJ8V
Ndb+Cuuv3p67FfkfXDc41yvV9SPnUjnN37sX64o8mdpPfbFupmEdbZL1w/NT
vsY6nCzr7wt7bprT9XGO4X1i/m451mVXmwfs6ydfZ+2nsD64vsgzaf6onj+h
9gPPH7L7MMP64LyfYuyvMP95/gzzjHV9cl3Q/hom64P6h3FytX+5LrlOv5P1
ST6S+5fUfuO5cpJH7esn38g85Zmy/hgfxblBkf0m5x5G55dOsOfiMc9Mxsfz
91H+J9cb563mp4jdHfHnK6zdGq1fsZuj+Dh/H2l5Ii9/Cn6LzQMNcvgLqbW/
/un9tCg30/J0or/9vozo/qx3k+UBJT5Un8419kWQ0z+Wc3oCPw2/y9pfQT7R
nssTyWn3W/sryG1+eKdofHYx66ZdJBe/Lap/k/U7o/KbZf+tltfzB1RO/pDz
6E3JT9Hz10rvj9rXny+p+z/Ir4NXR557HF+YYPdZ+/J8Xu5byPjDD5W/Z1yc
+7j98zF+dBf2QXOeU369zQtxaj8wfiD78MX/83kBjENE/gXPN7lJ9hfY8zk2
pUdmcRqNz/hxPlD863LnC71m8wKc6p/jbd5BQfdnWPuptVP7eBdjP/l94pH/
Cj0Y7c+abvNaCpqfKnk5PCcgii/JPvsoPsV9K2fK/oT3bF5O+nAW55P4xHbu
dznns9bac1sSnd/cX4999W6BrA+eR3SkjbN5+Vx7ror7XOa3nDuSzpD1gf2h
6WCzDzHMX+brcp5eJ/PzHqybvbCOBsj64bylnTJC5i/XFc5lSFX/y7k26bmy
frgfhTzBXJm/nJf+nH2Znz/Yc1ei+MfN9lyXgs5fPV9L7S/611xHun54fgXX
geYf8vyLpZjnOr/vw7qQOLGvn/shLrJxVj9+cq5POlvmN9cFzvVIz5P1wfnI
ea/zn/Y+zxdU+7/7Ya66/4NvF3oUP7+P4vu74fcOuE7lNQccstfShd2TFYUN
O7Ru3zPSP+x/zrPo/BSUYz0qz/y/j/w8LF1/Q9fN3sfLOe/bop6c9mE8KipK
y9v4+avy7NPV8fzpvPbtktM+2uedcB8dH/ZfJ1OPjk8z12f42ouee/HHqP69
8HsvXKflOd+zcWiaMz5N3RO4rnT/fuE/ry6OY1j/7Q799U2TC70wvnF+B59/
ePHv6SrdPzZifoe9Nk1ek1a8ceeD9e67wvHF78G/+3zv/ZZse1xfx7x4lPf1
j7fzymGeSvs7+PG9vfvgn/4frKP8i2L99M/qU85THd+90c/Zegr+Gect+1nz
24aNWlJ9xUuN3LDic20pZM+p+687yL57/sVy9qOdn4/X2fkX4kc2nllRo/3P
ctk8W1V4YECvJV/dEvzHrP9bu6yfK6P8rq7bPPqHu3o3cfcuaNDj8fsrkm7Z
962+f1Z/Vzdjz/erL9yjVZTfsUNxfjVz2Tg1SGrQDso57zgPlZ9ogHnFeTZc
5hfbxf7V9vF3jsN7z5zz0/9kP39kXboeMj8eRX1fYh7r/GV/cv7p/KFdwHn5
ccn5XZ+iHxOdv9r+7Hfn58999/7P38S6KTnPPwLz9iTMY52/nDfEMZ0/pe/P
v4B//GUXmb8c7y8wD5WfyNp/b93knPbfZ+el0/nJecd5qPzE55h37TAPdf4x
n5fzTvGP32v/pTz0S/T+PegNzq8ov92U6xDJs3UbzrcpXX9D5O23icqz3FWo
p3T93ROL00GO+ejsPAhyluO8VXk2Pl28fs3pX877aP2zHOtROfstw9WHqrT+
bH7NqOP5x3nls++P10XnuxX/5tbV5owP65sin5QPs+uOekT4G2+X+Hlkx6fS
tbM4KvPH1XGcH5H1ZfVqU79PUOcH1gXsiPD+ePRLlZ1/of6rMe7En6x9fRPK
Tyw+7wfQm9+lw7P+8PIMD3f051vm4d/bN/zXT/8L6ybm6D/qHcVf9iTzV1T/
eb0x6X/+Ztbp/j3YZ2mGi40j/6B7EY9WptCfrkv2PfD/9rndyVl/RPqR/a/j
S/uOekTHj/NqBOofIfOL9XL8psr4WvwIdrbOD/5SK/3H56vGOOv4nl78e76O
52jXltTPP41Lsf9frFL/jv0t+BHNjxqLY17O+NQnmGel51f+/fncnN86Px7E
vIB9GfEnI8z6/y4dKeN/n503qc4f8R+dxQnOvyYo38SxPso/g97lOBJPdPxh
9/jnoJzni1D/6fzLsQ9qKG8Lu86OU/D/qbc5vtMzfe7+df2Pe/uNcZVsHNq5
npk949v3hbWrIv7M6o+nq3R/D/0mtntKSXykX9omwgex2+q0/hNh1x6X2bUO
9q4vT/+R49RHxsf6rw2j+4tf7rpmfnbAL8sbYB4E/obrgXLgkZ//4nc79V8s
Psf8AvkDltfxEd6CdobOXx9fVHzQdaP9w3GhfGdjzwZ+hfJfZv2l89+vr8my
Pixue35H5ld9Svu4RtZnaf/xoTqVq59GOex5v750fYB3Sna0PIC/P9fXF9bP
83KOB9eZjp+1X78o6Pqx/ktsX3FdcZx0/IZh3QgPIfXPqMqz/2TepZ1lfRD/
iHtbin9LfP+jvytYXs/ngb5VO8vPT44b6x8v/AzHjfbLJ7L+0C9VMv/UPvPP
x3G08kqf35v5uWH/yEewP1g+yh8vOe/5F+a31RsLff+JXYP1Hp6PctoPHUri
S0O3N3Csp+AXx5d2QA7/Cn7yo4hfFnyN9j8Kb5WHT7n4zN+JM3sIvqhfoPuz
2e/PGD0Vv9+U7db5JeNWo/NHxj0aH1v+jch+0nn/ucyvR43c44jT8iuMHaz6
NX9+sXxtzvykPrb8URjfXrDL2uOTfATlfa3dV7g/swe9XO2XDD+mef6G/Alx
T/f3ZZ+P19XadSbr2/sNSWZvBf6KvOxwi5O+/MfWLo76d5i1692W17P6bP+2
cI8ZHFP7XPnRx6usPJRT+5z9wXEBD+Dl1C92/NR+d55fUvud64Fy8JBePh28
A+vX/hHeJNH1P0nmV47/4qydpOu7RfKYsTOUX1zv5+EDMv8m2nkfrW/qzwrL
s3o55xX9hh1kfvF5xY/3/WN5ybj99I+EJ4j8c64THX/ttxVoB+WCG1H+odjt
Xp9TLrw2/RWpf0cdP/G//brievPz40HLKxQYp9DnrzHzPOYvOI91/mpcQuf/
JLuuIv5UeT+dvxzPLywP6J/PPnfTqP2dzLh6HtfX39H0K+3AMD6d7LhH7ef9
yd/sI/0rvJNbIeMj9n00f/g8U0z/xPaf8DBefg1+rzP2ceSfetxSfoP2fQ/w
+KX9P8+P1ik/6fkjxAmUv9kV9dK/1v5luUwvNHUnSHkMFONGufw669X283fB
yTL6f47a5zX8zOHfy8qr5v3ukZt7N0/GHvrvTS88IZxfZ+U7Ja8MGH/6f98f
4hOU8/es/MdRefxewHXR/Rfhd9wnp307JYty7s/fz8+5f/b7GwU8Z1Q/yhUW
/T+2j+9F1fMZKGfeNfcBUA5epo55V7p/hOWZ/6bnP1PO/Gs9X4C8T7n68R41
n49p5Y/z/dup3Yen5X8saP435XyPgZ6PS7nNDwz2O+XcF6LnC9jyrZO6Mv1/
j/T/1t6f+2L0fGPwqnVz8Nya/7N1/VtRw/OLbpb+JW9brn7yUqXta8obJh0E
XzL+4AXyE7TDouefaPWD8kueV+Q+aam/qlz9mqdj5Y9XERctX6Lx8XqPl6Xl
1F8dcsp3iOxXyqnXJubUz/7vWKb/Vb/8b+/P+APt5yk5z/ev+9fLo/5F/VXl
6sdnFB8mblOu+oN6h3LVP/Z6ygO+l6u/XHnqJSnv22/1QUWF4n+58tQ7tnzQ
P+Xqt+/brqjIO//HyqPzb738bsE/+742Xz79efUTjxbWqf4pVz9xkfLo/U4m
H93rWS+X+1fp/cv1nz2Pwb/fOLH35/PWVt0t+C/9W6P9W65+qy+pp/T9qP7+
dXr/cv0n9Ufvb5b+rdD+tfEO5r8EfLP+FnEq4g99edU/lk8OPLPWT/s+j1+g
nlT9U65+ze9RfCQusn7FR7l/nd7/Z/ZfRWn/M7S/tmT7ff/WaP+Wq9/itddD
vv1y/5rS98/vP6m/QuuX/q3T/iUeEufz9Auv+7ly6gPiuMozPP+Wn1F+Esux
npz757Z/EerFZ3T/cu2j33J+zv253vPON5NzY/POB/fv38mR+31xKqe9nrd/
R8+NUjn9CtrdP7f9xDfm9//c/uH+SOqV0u0P741QOf0d6oG8/puX03/01/Q9
hDo++h4gyrk/qi7n+Xk+hcvpf/o9ee/PY7v0HArKc/hhlSv/5uWyryBPrvEr
L7d+SXz/nPwqLye/OyWnfeXaz3rJ4/3c/snwtzf45d65+Y/E6dL1s1zvqH7d
F5FTv49j5Y3PLv9yfOhXxM/P/u+U0//q1+U9/6M5z9/r7SN3fnJBRcLPu25d
1ufR34b9RYLbEX8l/kWN+hcnP3l7j8fbtWW5wto9Hv74uRvD/q6Rw49sfuGy
7bxfeOVh5/7xrgWb9P6RnyL39/pD4/t9HrvuqUM6v1SYM2HBn24/rllyVPbd
t78mu19ajXYov1hZ880f2q3s6Vr/ffhXXw3slqj/UXfSpAdaz22QnHz3hLca
DamI+K0zzj7urXeGbCh02/0ffd9qX5lU35U8dPBB4fzED2temH3LYZVuxCG9
5n72MPmxYP8ffNHS2856t12y+I+X1bW/4d3C65+vOebyoYFfRf3piFMqdjn0
oJbJrrdWvnv7JcG+nnzmsP16XtPZ78utWn7Gt/t/F87X79Xg1OPaNPkiHVM5
fd0xN2+bDO22Ys85Uz/15S8Y8UnvV3/bJ+gP1Ec59cfYHcaseWfEtsl9/3Ht
rqvfXqn+kas50g1/YuoOyT7HNzj8+bomvv+OPWtGn7Z/2Tbp1blTp8bTvylc
dOLyqfvdEOI/M77tv91jm5v5c1+WfjLqltdWfu3l7+M7cX7Q9cdv3++S172c
uPty52t3XP9Gw6T58uWXnjo6vL+KevnJ2XOGHNzjx8Kiiy6t/G6/8P6R+pY3
dR96aY9kVjbO0fmxr2185amxtWsLCw7f/7LzGjROxow5b97q9S+E8X+y17u9
BzRPWr85dexXHTYWbnhw6IlDe4T3twzPxt0NajTkVwPOapeof3JmVt593zIZ
8qeP2ySHzWtQ3ezf/un9qYeeteDa25omXDdqP4/G+huHdbRG1t/UZY26Duv/
fWHxy3v85dJOjZIvL/3rgfu2XurL0//O5n+bRP2Dsc0+WtDogp2Ti4v1z0sb
F9dLU60/fWTWlMce2H+75JktI29v0mfdVq+vT1bv1KNP/65+XY7COqX8ZdiH
e93R4uCnXm+ZzJva/unep4f3z11YbN8eHrctXgX8bbjk1XHfvvCL5N1hhwwe
89CX4h+0cIO+eekXp127fTK3WH/Ir9zpzcN2P+vglkmGcxuAR8H/fxm4RT2R
9f8/nb+y/tY3H5zcFeOzIc3aH94PdBXGlXpkXre6a5f+OZzvx3pbFfuvYfJ1
sf6wf5Xlsn7bUhhfrO9zL29fbH+nRHHejv+3hez5GyW79b9v/oufve3LV99/
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
nqeX9tfnwgNL+9qU4NWT/n3N580n5cmPr/A8v8kZtx3veXSTk38VHjG+P74X
ntbkI8CfgjdN5OQPj/M8q8lb2/8v/GLSP63tr2wt/kb79lLPo5uc9u1FnqeN
7w/+mzxq9fZZ3nhSnuVYj8on+bzlRD5D7Obq79c2v8DzwPH58Ofp36v8aH9+
SlKe/PhEz/ObnHnx4z2PLu3vZHan2p88l4n8QiHyO/+w+4TB/9YN5V8utPw8
fM/f6fm3uNc9P+79Ofc+265dwk/wXGDin8pZjvWofHrluX0N/1RO/ONztH0s
x3pU3tr5jcNwnzfxr/r5y0sbptY4n5nnkRP/qrd/sz1Hx4f4x3pUzvvEt4Z7
xpP6cf94zt9p+dCufnkov0vSv/yev9P+2yr1V++/j7KWGu177+wrJ/1sWve8
5arsyRemvJfMjy34nr/T59+JcV1cY36c/LN/vWbTH3cy/17lC2V+qPyt//jG
oCVvRv9e5ayXz9H2sdybqEflod92yuc+3PCTMd/fkLSP84b4p/IHUW4o6knG
7+LvfH/53nF/ucpZ78Ia85PltqAelY/b/ifb9H5/C8YxLc/vT8PvVP7Z9/b6
51nDeuehn7dP+nclvufvtP/Gol6244XH/zJu3H5zzD5ejXvlQ73bJv619+du
afbnoa7Pxod6i1D/dvnWynzcauUFtwrgWU5540Uj13S64tXih9+9aUHHd7ZJ
zsfee9Ce7ReNOsDwjfVRTnzjOhse1pOV57wn/mn+26i5I0Ycun6H/LKZj0zZ
sHpFNqXyGff3y7nv+J7/4vnbnIfXy/mz7C/i04Q/333Uz1YskPbx/MBN2duV
8Yjx35lXH3LBPpsG5DxHLzm/9t7TO43vvCp7etP0737jvjb57PC31X8O+pV+
789Df1v9GPfyuW0//M3Pf9wlyR9A+bKlMr93sHPmKD//d51+ccEjXfJ/Rb3q
X78V5pedI3lW5f2fs/a9esTO2x174NasxwW9rtjuG1uy26++5Mcdh9xjcp5v
GMZ9u8S/nl3pn11wrvzrRXiPmB/ySqi/uOi0mx+dMbxTPnSva7/5bu/o34ff
97Z55c8zXp+dtGr57U0/6mn4yP60/pf5N1TmH8dvRo3xY71T/zz5ha8u7ZiP
7Xn8D3Y7Osa/WI56ONQf+akRf/nm6l/9e9d8FeYN55HOP+LYWTL/vnz2b54Y
3Hef/IZK/21fEicpvxLjSpzbNL1l2pLBMb+O9R5c6b8t2TGV+u8v/Pu1zcP6
/ii7ulLfk5lvf598mj9fVPsXdkibfFYFz9+0+h/98aeL5u7TLl/Qf/DXPzr8
o+z9exdv+NPlS61+nb/qXw9v6j+/bsdDcp4TSj0u9Zd3tv3NGQ89+qX88TnF
0Y27xfh4Adx8GzhaCH6OBS4Cf4stgo/h086dTu6H4Hz7KXBSzw8Uu6ZokPnH
ejmvdX8f86s4/08QfKb+7w8cVvy909ldmxN8mwJcHelwNuIr5yvxU/GP81fP
Mffla5+vfgfe9yGswxrrL6P+UXwkrs4Fzs4VfF0G3JwHHFX85LxD/cn+0Kvx
vPOAo4qfxEXgWDZf8JG4+jpw9seCr18BbnJe6v26FwMXlwMnFR9vBq4SZxVf
aT+XNeYfcc3yWwXfDsZ8WgYcXij4S9wz/1rwj/41cVrxmeVmYfwflfG/Ebh3
AHBwmOAfcY1+8BjBtxWYryOBw4sEf88B7hEHfyb4R/yci3n+I1k/xN1LME8+
Efy9Hrh5DHBU8XMhcJE4+Y7gI3F1LnB2juAr5+8Paszf6cBF4qTi46+Aqzlw
9jHBV++fb07i73Lucj5f5K3dbzDU+adrk/rDZ9lwfY37fXh+u/evo3y+m/fb
5Hr/ju0fQz3afs8P7JjUH/D0ObM/Vc5y3s6O8mAXrCq8f530b3Y8nlOKnPi6
GvWofoM9YXpA6+d97ifgd1o/7Y07nf8Y5ZZfid9p/65BuxbXeL9H8f17+J3K
N1f0cWfTzyof7/R252T8ZlfWS5ucdq2WP62Cdx3Fv9b+e65gPdXn707iX28W
fNhY8DnaP9p/2v7FWI+0g7X+UzFuTTXGl7hNu0nlsB8L719r+1qyQXiOzi/i
5v9FPVp+RfBns0+DXZW0j99Pw++0/rZjLu5y3ZBuZldrefBOZTv8TvuX/iP8
xgL2jsnlXjJ8z38R38VOLSkPn0sbiCN6fxfx56/goTCeJqfdtxDfBx7nIJN/
dN0ez2/u3o3+L9tv+uErwBXaYcCbnPKrK/p9Vztfm/qC8uC/97L9q2o/6rn1
mO/S/nro7fpS7xdc99q+D1+wZw/eL52cTxDslg60WxL7rPmWxtu+90D7HHZe
OS/8bXK+1xaMS7BndjX5+sue+2Mxekf4v08m58McUdF7O9M/FXt1fTYL7VtW
o33h/Tqh37Yk+T/kbW6AHTAz4IiVh91bXl2ZN4PLv1Z4otzkd0B/Lwp2QvFE
RX/H/P+tzu/fWKj/t3GXD/5p8f3b5NMuHfqf79zXtjzu/v/c+5YHY/5e2cr4
9nL+767lSRWeMOYXe/+3Txl4sANMHuyOHfM1wa5h+63/P8D8IM4slvnR+/uP
L77/4F3y15/745de3H5Nhvab/ETYlVynaGfu29eSHRTsbMuz9vMnru/Nsr5n
wa7GvYTJ+QZh/Pejf5pj/Zp8JvAoPH/3cnMFBwZY/bS/w7r8LMn/of8Y6m9T
Kr8Q1v3LjIOg/2P+7DneLswVv8iPw76EHRLxCf5gcSxwtFHwk7/3cYqDpH12
LyL6hf+i/cVvFD95L8Q1GFfFL+pPxmGHyfy9FO0ljjYKfrZ2P8s81Etc/Ibg
K8sNBI4qft7Lc1Uxz9W/Ia4QBxcLvmB9l7ujHxTfiIvEyWbBx0bg3gbgoN6/
19rzpwEXiZOPCj7C/yrWAwdnCP5NBa6BZyv/JvjGe2vmAyfnCj7+Frj1IXBM
8Yv9QV76ZMEn+FcF/SDFT+IW9ZbiF3GVOKv+Hecf50mDzL8VwK0+wDHFL/Cm
dm+w8pvvAjeJo4qfXN89a6zvGa3MP+IC/fNrBD9vAu6RX9D974OBa7OAc1sE
3+Bf5h8CJ5sEH4l7VzseIuIfcW0ucE7xDf5x6eN4ER8lvlx4Oy/y87M9T2/l
Z3leyu7JoZz4NtzHMa08y4HnylX/0B7ydi3vi9T4z2aLB1DOv2m/IU5Q+vZt
Nv9O7RPvPz4PPy3mt+3tecWEH0dcoeA5N5yPlDO+9RTse/pxlIdP+vfp/a8o
X9BPAF9rcs7bH7l1EPGNfhPtCr4H5eRdPsQ6A08d5wf676wa/Ud+n/3GfpT6
yyWBd8nBU9vzGX+Bn5ncn3u+5x0L+mu+fWvh575p68G3L96r5fmYiG/BP/2U
9oiun/JQ8Cd6/67wjiXtaMrpz9G+I95RfgR4J/pF17j7IFu3X1jvsYH3M33k
369tfhX0IOIcJtf1rfbdAqxv5gH8VdY3ed9pgffN9gh8sPrXGezyJH+Q8R3a
3WF8ts+l/uKwwPtmiJNZ+WE+b6FQ/CHvWzr7LuIP9Q3vV0Y+gsl9fg3x82Wx
n/rl/vm7WPvnO9xiP0Z8IG6xfbq+JK+hUPyRvJ1C1zfXR+HqT+/v8vXr/dNL
GijX+Q/7u5jn+i/mrzKvguUVn+6U91P/h/kH1DNjBT8lLyfpP/JK7N8Qn4v2
A/MT2H7kKVj7W4tfjfV5Echzif1H//ERyIP/GO0j4gv9D9XvzJth/cizsfYz
r+JhVz6uH47v/BrjS1xh/2yGPUI582dYv+ID109ZY/3o+myR9dni81IS/+8h
n1dTqH/O/KL5rv/j+p4hdket+235O76Hvt9sHye396depH2i92+Tj5N7khsp
R3zG+O9FYn+Qf6IdNF/sH5bj98vE/iEeSJ6KtX897BLm9+j64nr9mc+Dsfrl
fuFGnV+IJ5vdo/YL6zvR5zHY/F7j7H+Lo+v4WHxO8W8yxofxK8UHxIPyxbBT
bhf7hOPB+NkbYt80w+6A/kjsD8QTzc64WuyLibB7Vvg8FKufcRvihOKvnZsP
O+lysY9YjvG3G8T+IX9BO0Ttj4mwK4gjB4l9Qf95ls9zsfrpfxNn1P5gvbST
Dhb7qKfwU2r/cD3PqrE+66YGu+Rln8cj+sHyKhN8+hR2S6PPMzE54tGax1P6
+ncqaeeofSP5r6XiJ7+H31oGnmE/k5M/9P6Z2g8HCf7F+Cbxxedf9JDn1+e+
n+P5UuT/9J5cysVvIg5Z+ek+78h4Eso5r3z9EV/IOyqPRjnz2ha7/ovvF/jx
vax8dX78EJN/gPelnPEV1g+eTfonjk8Nfpz+Gfz45P2tf856eNiFv6/7cuw/
ya9mnJzyTeD9KEeei5UnflCO/jC57W/1etDk4f3j/S+XCD+K9ur8yX39cXw+
kPHh+mf5q4X/a81/4Xph/RhPK+95X8sjNjnjR5RX56fj85vB41H+U/CtfP43
Qn9Z+Xlu/Vset5W3/ZmOX1P+2+xu2C/RPylc/fUJP+ntdsvDtuczf5B55+o/
UP5Nvw+g1Od7fq8+aT/9CPUf5jt7rK7umqr+x1rL31Z+19uF9bnyL2K3Jvxg
a/3H+t/yec5J+5gnPkf8D8olDzuZH+R3R4v/wP6XfQJJ+2gHqH8hfk+u/sPf
O36yDyDT9nEdbxX/onT91yvhV1l/Lf6B5akfVX+yPP0M5VdN7/t9Ckn/Mr9f
+W2vt6lno35d7HCB9qfqV9NLyfzy+eH1uepfX36/ZP4K/5roV8lbLweIflbc
1vH3dkNLpvpV8gLQLv6LcuphXb+UU89uEv26APIG6Ol1op+93k77l/l8M9Gv
Z4p+Zfk50NMtop8fg3wz9Oyxol+93thYqH4Vu488R/L+kieYlP8B9Owc0a9i
F9IeScofCz1+qehvyrl+Vf+q/a3rl+VnYR2pfmX/Y9zK4aKfWf9V0MO6fln/
RdCzo0S/sn7EZfI5op8Zz5D8tYjPiCvO83kYVp5xQx9/iPmn5P+I/9X7x+Ku
XF8mx0JpFDvX5L3c/p4dkvxS7ntp8X64vd8AH7dN7GvaP8wv0f0vfC79JLWf
7/BxR8v3pBx+OfyuAfnBEj/muuU4q/3MuODjiGu+K/mjzA9YCf0yHXYS5Yzr
Ete4T4Ny5s/4+EPMjyXuAv8tD4Ry4qaPP8T8b6/X+yfxR7//7IB8qvjnjBvP
QX7ejeLfMz/Hxx/i+NNu4P5F5ttSzvwMH3/4zMrz/MdHMC8HI5+b8p6tzE/m
30geockZ9/4m4sbI4zE585O4/22prD/GxxgnV/u9t49Ll8izsfGRuD36f7DV
7/ftbc6qx0c3y/6D5wRfLS+U+bDWv9ORl0u5rv/wWTZQfr3wR5wflK8Ez0T5
Kp93msQfJe83U/ue+Zp+H0/0D76FvE+WV3yQvFKLA1IueZPZLNkfeKrwr8n9
NrDH2D7EQ63/6E8xf6E+5FFa+9dI/6j9w/xOyj+V/TPU+6w/8IGR/2N/+X3E
0b5k/i/rV/xmfujDbh3F9SV5sdkIyd/n+qT8atlfovNb1+c4zGe2f5bkr+j8
XiPz+0qfN5vwa+R1m938jPlZ4K2tf4Oei+fzeP6/3j4pl/xOmyfafsmDtPJi
1zbq+tzi4/b5WBk/2bfIfThW/mDH31ueqr0f86Ou8XmuMb8YenmLz5OMz3d2
keXp2fOpt6nHVX8Lb5Psf6RfJ3l6Wr/l9/xF9Df1Knk31a/Id8o9vx71J9er
5LnG/GzoVc+vR/3a09ntO+aNov+9XW55klb/cKxH7p9X/Qr7NPf8etSfyAfL
ySupft/i9w0m88f7ZZanK/kPtOs72j5xymVfQ7L+W1sfzPeSPFyT05+QPFYb
X+pd6mHVv9TbfXyerOg/02u56le/v7k+Wf8zHf9cn9jfN/q8HXzPf3H/ncTp
rLyPD9Yn6/tgb5fnwIHS119n/AD8EZOHuFCdPV/X/3LZf0N7nPJOb5x55cOX
fGLvp/mjkjeQrH/Pz9bnYR3ube8f4mptrP0HVuIkMb4pefHJ+3FfAOVor8Yv
jb+bFPrDyvt9z/U58plM3rlSX/Tvgp8c10fYl7dt7svH9c11LXkeVp7rlu3j
fjzKR7h9e/WJfdws83uFzG+uS9av/injcSxfff/x3tY/yj8Ef/sz6f84PsJ7
Jfwy1xvXhdqnfj3W1U0T+5b6+20/j8vq9ds+vVLLH+/3qSXlZZ+U5nfBTtua
PSb2Ke0a2rnniH3r97ctyHT/K+W0U9uJfTrP20WMg+cq7/1EsFNbxD7l+/k8
uHR/xHt+H1vSP+xXtV9hV2QdYKcOF/vUl2/JRot9yvnD/W1qP/n2t7VzHrT8
sBr+JctzfayU9cPx+6HfB5e8/y/8PrJEPtbv00vky1yeZrRvua68Horrx6/r
Ljn326j8tz5Po07loodKlUuefNI+n2fSKylPPaTrh/LO0DM19ifkr2H+qX5a
7HE12T++2OMy9lFvm7SP+T2qnyi/HHqms+gXyn0eRl1Sv8+T6JDI7XxL0T+U
U8+MFP2i50upflnscTkfKfprscf9RP/4/uuarB+vFzok+kXsCtobSf3UQ7p+
7PxA6BnVL5Rj3JL49HTn/3WvsX6653c7/jXKff6E7fOR8v0s/lO9fN9c4swm
9/Hbvkn7RoCXR1w94X8u87x38nzmL8B/StrPuIvkAUQ5ykkehMn/3vNjJM/C
5Hr+QfX4s8VdkvLvy/45lbMc61H5Vc5vblujfXH/iLaPemeqzxMwOfMveL6I
yhnX+hi/0/qZPyF5ICbn95JnYXKfX7gp4ff8fmHjL0wu+4bZXpMzb97vX4n4
3uzz8m0dUK7nyyl+Mf8MeWe1+D3bd6zxI+aLXodzNPYPeVgmX+P3Pdh+Bcp/
6PdVFPBTTb4Cee9yDkoSX6wVvyNfMwV2S/BPYv4m+UHavdjPYHLmL97hz7mw
8Z8s++NVfzb4vPqc+fyUf+rz9vNGyS/05yttl9Ne1PWxtQb/z/xGnr+o+mWi
3xeSvYE8WD/+3S1utFTs30a/76EGv2j7Norq8fVNxVs4R6W6ft6UrfZ5vLJ+
Vtg+Ul0/4bOusXT2V1x/cu5Wwp/r+ZC6frjucG5KpuuP58ecgHWm9hPXzeFY
R7p+eH7KEqzDXNYf18VsrJNXZX3IuWzMY7XyC/25WYWuz9/6c7lKXR9yLlp5
kqxflmMcX+2Hi/25bHYeHOU8v8jbX3H++32XbZL12dIKf8f19UOfx5zw91yn
l8j65L5jySO2+rlukEeRrJ+bse64Dl+X9Ud78Uqf52v9J+e+Fbp+uO68fxHX
n/D3SXyaf9/p7Lcof07292p5fv98jfMNyP8c63kOk4/ydmlS/3LvtyT6V/yi
pH76rytq8Btilyft5/6Tcz0PmMx/4Zmkf8wvSuqXfTfJ+7Gc8IAmF7u/Rvta
mF9fc//KRM9jmZz8oPCYMr6fZBd7HtHk9LvoP1bv/zblvp4HNPml/tySQvOD
Gb8gD674Pt3nFZgdTzn5de4TB89ucsYXeP5D9f1RFvcvdf8c+fXXsI8b8XKT
077m+Q5zBf+2+LyQYkvV/P3a/rHwNqWeb8N6fw78QZzGynv7aV2m+v0tnxfC
fdZJ/pPdPyz5U5IXYPOc8qt93kGu9iPzJw7Bvorgz0R+0udPfJbsH5G8kCT/
mXh4gz/HwMpLXk6h+18YX6p1PuBcn3dS0M+S+ou/+H38Jmf/4FyVJP/vt/7c
llznN/fXz8A62Sjrg/ttaSdq/t+bmNfH+ziSlee6oP7U9dFa/MXvf9nIcyhM
zvgO88h1/TC+xPmv+pH14lyGrPr5B/F8rXmyfq7BvP0M81jnL/cTM39wvcxP
OXcFfnZcPzzfwPvJcf5y/tP+0vxRlruG80TWD+PBXAeaX7fQnxtEe8zKc108
hnWi64N2o4+fx/m/FvP6cR/HNjnXBfOzdP8e1yvnveI/v+fvVP6HYQOXvX/N
Tnn/I8txQ25dk+yv5ff8na6vxsO/dsDyJf3yVdmmnbvuukuif1aG780+UTnL
sZ4kv2f/18edu29vw2+Vs17Uk7TP5j3qUXn4m/kEZUNyvnOl3g7GD6k8fNY1
sp7q/d/W7HOVs96VeE6t8j1rlD9g9PrzHnnibxjHbRL5rfj+QPxO5e8ceOiy
zif2yedU+qdL0r9z8f27+F31/m2xfVLh+wUNlN9T+f7dIoxvGt9lXG905d9t
DXfJ+huzuMcBW5o+Kz770/W3tpQd8lPGLht3yZPRf+O5M1y3mj8m88rmCeUn
V+p/oxgd6s3DcyI/H/pnsM0/1qfzj/1/UOhnK89yXH8aPwzP3yEP7/lBVvd8
5fkxfwX92uT6l//i+Z2cv5o/yO85j3aX/J7q47fExo/zbu8KDnya7Vv5fCmr
/vz7GtR+6Lfd3T+/Yb/V2U2Ptel/3y11ee/wtz1/DPqd731aGA+rn3zCKqwP
tR/C+LQpd/r6N69uyjrmmGcmvxzz7n7MQ+UnwnM75Jxno2V+oaMb+Z7J/ET7
T8U8wntY/bf6dVkcKPOD8/ZezAs9/0/njc4f+mecl2/L/ObvOY91/t5803//
m9N8F95P9V9r8+NUzNsTMY/byPzlvOH8+7LMH87r6TXmN8vxG80fR/sbeP5s
sn8X7eH6Pl3m181+XmY6P4nLtPt0/u2Mefcu5qHOP7aHuKf4x3rvcuMc5XdK
v2h50RtJ/eHzvgb2r8qnVNrb3eaXyu1ea+kHnV+Nrp4o53yD/kjqD59lc1ON
9rEc61F5mP9vmf9fo39tHev6J74NRD0JPqDcnTXa11r9Yd11zadgXmh5zpd3
8bvq/dvD9lVjHdv8ov4g7kCPWHmxSxinqaOc+Mj52z3MZ6sf49NAvar7u4k/
tB9gT5ic8wPzDDg90OScf00On9/NfPts3Dkfcukf2A8PNav+C+tjgNlfin+s
l+OA8bL2if2V4K9//m3NCf64eZH2X8DHjvkg6AXFlz4VPGqfQ3+WfcPfJg/4
d5ONj+4P5Lhi/uU7y/iK3Vfo+HFejfZ2iuIH7a9kfOlf9nR2dpx/vj/r6rR/
wvvd2UD9pP2L+Wv7096T8Zvh7M/uuc4v9jdxoPr4thiOvSPzj+VWYZ7V0K8N
/7N+/XzcZvz3v7kN+v6cF/0xT9R/bJL+0/G/2c+bXOeP+IXJ/Rt7QC/SjmN9
vnwP6bf7mn3/bCwGez8laf+9Nez3Gb7f+J6NlNO/0HVMOfF4DzdOHeT5tfUr
x/fAYLcUA4I9k/gHGPeEPxO7MFP7kvMrjP8TzdX1T9nA80sVH7T/iYOU0679
lrOz4/sP9n5hcYuMj84L+PM6f2x/asCTuH+dvAHLh/5bk/iflAc/vYv1n/jd
eH5sP8eVekj7B+2x+nV8hLegHa3vn0n55Pk9azw/fN7X4OWRv98b/Ar7D/1l
cuozb5/p8+N76fr1fkOP/LPKv1nNvn11jexnPf9Fy/P3lPfDumA/9Jf1wXpn
OhyO65Pri/Nex3cKxkP8cBs/9K/Zj2o/cd2N836+9p/wOHH8Tsa6ORnrSNdP
9f4pE/zjuOn6YHnaBzr/qq/v28z/CvbaQOEnYv6O75doh2n/836KHjI/qc+U
x6Ac9pm1/12xT8+o/HuUvEQ5XfQT7VOPI7Xxrc79U/sgtX/oL77reS5rP8eH
9sPbMv9Y/lbgmOKXx8e2CT9BOXFI9b/yotXxJeJuDXwq1E5V+d6ex03qZ4/2
lPFHXmO5C+ZZ9fnF+duS6fyqvj7ua1C550m7JeW9/5faTy/98t8//7+EPECp
7WO/6fyc4ef9P2xf1cDHOpGb/+LtjWjf74VP8hGU0z9g/8AeTPhX+o/kWf34
tzXein9TjoY2yjozOf2GnTzPEcuTPwNOwt4Qft/s4lbX97X9Rn7+/1abH3ej
v98D/je5fl6frcV7N7n5F9+f8SHOz6D/lln9whtkewYewNrv/VPDUek/+sct
uI8t8e+t/D3if5C/oFz7R3iTTNc/7dW7fPt0fuZ+fcXxZ/8wz/kumZ9er3e0
OIKOn59HsX9O9nYn9aiV39nztsn84vuKH2/v5+2CHqXOD12fr8485/P/TTb+
0u95Hxn/1uIv1F/8nb4/7QvlMSlf5fi7tjX6P+K7vv8Uv65y9JPJhVfgOMr8
aFEe0NovfhV59IS/5RtNl/lPeW/P0+n8NT9N56/wPjX0n+mNGv3PfulQc373
cOMax6c1+55y8vr9pH/ZPpnHJqd9T72m7eff02vId/J6ObHP+D1/p/qzya37
Tkl8g/Z9f8/jy/hEv1P1YxvPS2bgkUzO+MD+3o8wucTFipOkPAaqJr8m+Jfo
H+p77t9Q/U/+iJ+Xi31TJ/90/jYs+sEdU/fbLefnPyp/ZtiUM/7jlo/ts0b5
kp8qn/j1f+pw7imrCn6q/Hx8f34NeWv1o5x9/qPyp8N7FfxUOffT81Plei5D
LXmt+2mYX3Gj5AH78vHc539UznwzftZon+UFqpzn2hatlF9cozzPb+dnjfbn
Pr8pynmeWPm/LM/8mmt8fpnJ9dysGu+f3KNGOe9j4Gf1+uO9JTXez873r24/
7Zf7z5T/Ef2fyGvxy8Qtj1+J/Vbq5z8mp15N9aviYg39W9zdSvla8RFv/6T+
LfFZPk1Oe6vX/7J8aP9+JT9r2RfKk6j87hpy6m/l6aT9RS3+kN/3qiEn7tbh
X8DJ9jnlz7i/6+r871svH/TC84UvH/PLWqufekPql+ezvrq6893ziP/tRR7v
n26t/tbK+/vQ6upq7d8Mfy9p1vNhbnTnsbB8sr/Z6tf7uVsr3+zyNa19Jvfn
FaT3//rfm9zsW38f6vSG38r5B9L+Rm1/a/0n7U/2//nzdtm+9HzK/7n9a61+
Pb9Xxq9Bx6+150v9yfnArfW/9G+z9q+3R80+zL38c/s/xH8S/kr5uRr+h9Wv
+TGtlfftSeOvPh6Qxsf4+1rx7yYpr/6htL9R2//39h/La/s9n0h+U/MXrf5G
9Y+otzg+NfhJjl9z9fGr/Xypv1nrb63/pX8btX/Vv9D40aB7f/bg1/Z8slgw
7bHfXHtix/xY/C3lrX9UfzQe+aNf3PDYlmzc6GO2Pfe1HZL4U33jRz/fafWA
vOt/jX7//eF981r642nRM5QPfOmY3R94rK7EZ37Dr14bdPf3/pJJeRsHxf/T
H7i2/307dS/5u/X73r7qkasiv3RaaDfjl9mleB/KX3977DXPrf7QzqcZceVJ
Ox58wZ9MfuYPT3zx5VGbsjHfruv59SO2z/f6Vf0r114Q8XNgm++e2K39u9mE
+tkbjpvaOT++78r9F9wT7z/8yZi393v2e4Oi/3DWyYcO+OmeudRf9N3nz4Nf
3LU+H3dDfttXj3jenj/6awMXrr29az6i3aivDDt7p2T/0JuNj8+/5sj6fAx+
p/j11fOW//rsV3Yql/7iouZdf/lK9qd3Pjju4uPj/kL6HU/tecUuG59vm2+7
YsWF3x0f7+eg/nhg/oJRX+3/t+yZ8y6s/+TQdSZv2f7qfsdf2L+c960Zf+i6
sE2y//y5zU8/eP709cVjRx120Y/bbJNPmPDjRes2Pm7lm1Hu9N9Oe7HdqLq8
Fn6fv/OED14e0zm/+Z+v2GvdSzF/j89rPKYcff89O+cHndTmqEeb21v/nHD2
nEHdf9+5HLhnr17bzP4oO+/UFfcc+suYvzjn4yE73Lu1o51fuTzMB5Of9cDA
V/Ybtm3+6fb5qN+s6pYfuajNuI7/5wv5nWE87X6thhVnfnzYJ53j+IbyZdcX
7jn//R6bs1/eevypx/eP5xdt3firF25t6lNOrszfTcWie3Z9aL8zYvzqsjBf
4/63vs1XLP9dPP/kntfa9Tl5yKfZHfPuuvcPh+2Qz/zstGvbD4r3dz4FXuGA
6zp99cE/bZ+H+teb/NyObz3W7if7mt1MHJH6i6VP7fv7C3u1y9+78D+HHtJ1
uT0f6ys/f1aHF/te0z3hL09ZffuhI545vBzx0ZNf+v4Ve6H+fax+2p8BP7ol
+X3nV9q3ezmp0j+Lim0qeNPByvP3XSrl2+YfVtb/m0n+z9hKOz/LplT68x2T
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
J/Mniesqp745Briuco07qvxI2NPEb5VzX/Jw4LL2n+0rBi6r/GDYwzfBPq7e
vg/NvlY590/QPtf6n4U93BH2cfX+j/iucuTLluRBVH4r7OFFsI+T/oc9bfFN
nV+wx/eBfa78N/PJT68Rf2otvkm87wv7vHr+8i4l7V+V056G35D0D/GZuKxy
4vMC4LLKae/S/lV5P9jTeI9ETjxmXo32n+ZFVI8v9C7/APtY66c9TXytHj/e
Fnp5l6R+5utsqIF/jPfZ/WdV+7+uvA72eQ3+oub5DCw/zfezybl+JP/D5MxX
Q5wu0/gc9/8gj477gEzOfDjJ/8gp5/4Z2I1FV4mfcf+W4LjVz/09ghNWnvly
sPsLjX/SPoZdWGh8jc8LOLKueEDiqxORTyl6wN6P+8dgV3IfmdVPflxwKLF/
kceYafyO9m/A0fa5xm/ht5TwW7hPzNrP/WWSP2LlaZf3C36F+RuUMx9S8kO0
fDE+2PXcB2fyMcinC3H+fbiPyPqP+48kP8TK025DHC7T+Bv2R4GfeIn7fEzO
fDbBz0zqL2EXFhofo98qOB/nP/IhYbeVtOd8+9qXgjNWP/wG4PPm4tsSP+Xv
gx31ZqHxM7Yn8MPvFKdJfJb5lqJHct++j4GT67nPzOpnvp3gmL1fa/nr5K//
HOzKrF7ic+SvFwP/Nb+c+ZzhOR2QnxLj08/4uK35I5TTbkccOJsu8V/ar9DD
pdoX3B8m+SmF1F+sDn5B8azEZ5tk3un8Gw77kH6M8o/8+wLy+8KfMq7ly0d+
kfYNn/ua8J/EXcoVf6fB/mb9Bwm/SVxmecVn8qGU3yT8NvGZcuVXyV+AByV/
kdjnvv0Rn2nfU678Keza0rc/4jPtS8o7Cn9O+/gSNz4pfl9M/S38PO1/1t8s
8QP6LyzfJPw77XdfXvcfxfE/Wvhz2DU2/5R/HIa/GfdX/hT7N2z+qf3Bv/n8
64T/JK5SrvhK+5vPXyT8JnGV5RVf+XvK/yD8Nn/P/Ot1wq+yPZx/jwh/3lr+
Xmv53eRdWF7xdYLsj98g/A1/D5440/wytudHbnwjf0T7n/Vr/KA9/p7sxjfy
77Tfz3fj84X8J/zN/usj/Dn5UdqfZ8r+iZE+LziJz5CfRJ5Wcabsj5jr83qT
/Ru0Z0+Hfav7Q2gPgjdO7FPam+fC/jxe9m/Q3qT9qfgo/n0xW/aHEP+OAu69
Jvg4BfYgeOk0fgZ7Erxmgm+0V2m/7i/7g4hvw4BrTYJffN6d+H6i7D+iPQne
2uxNk/u8bbNXKac9+zzsW91/1Af25mmwP8+U/VGSl10oPtKexL5pszet/3xe
cK77o5nvBN4t2T9Ce5L25TjZ3zDR40a5q+y/oD0L3g08adzfgX3xsEveSexT
8tO0L3eV/Re0J8ErJvbpRNizC2HfbpH9P8IPFE9IfJ37Y4ibl4j9RP6a/r/i
ZxfYk9xHpPs7yF/Svkzu34M9S/v2GdlfRPv0dODmatlfwvYwD/Fc2b9EfvtB
2Jf3yP4qyQvPdP/5ebBn28O+1f1L5J/BO1seI+VTfN53sVn29zC++x7s27E1
4nd6TiPluN84w73GeSP+ppznS3nc4b94v7E/hzHev8J7k0dW7tneIQ/3OUd+
nveX7z1oz/aLRvVK9q8f9/6ce59tt2M+BL9TfPX38260+9gpl3MbcX9njN8Q
f3FvMe8xtvJy/laj4u+Wq7InX5iytRi7/U+26f3+dnn41P2nS5un4h73WvwA
7mHNw370l6V93XPcq5rcTzX/lsbbvvdA+3Je+Myf3jT9u9+4L9oPQ8O9sYa/
ej/TVvQX7mfNNX6L8TR8DffcxvvteF8tz1fEPcMmx/3CuPd5W94zbO/H+6T3
qFGe977iXtYc9xDr+OF+851z3kdP+Ypwr6zxAzzHVOov7gj3yua4b9bqx/zi
vc/J/nbcH13ODPfuov7BuW9fd9z73SPJP8a9u+V8jDvnAeUcb9zbi3UQ5xfx
F/dK855pk+PeYN67ndivrc3/T8O9xIW/PzfiL+4PL+dgneEe8dy3b2OGe71z
3Kec+ffrhHuLd8mnyfl3w8O9zWV4Tgfec271L5T7vXFPusl57zTuhc5fD/dF
W/2hvw/ivey5nl+H+92NH+B8kPp5b3s+Ldx3bfLWzr9d0ePQdSNufV7O0Y32
zWL8Tfnb+D3lHp/rE/wkvlIOnDX5qkp9xgsk+MrfUz5Expf+PeWsT+cX31/x
dybuw/bt/8L+b8wHr7f4L94v5du/VvC3bKb8eplfBX7vx6dF+r+7jZ/eP8/7
wln/c7J+uJ5q3S/+MHDRl4/+1zL8vcj1X/SfDjj7N08M7rtt3P/5l2+u/tW/
f+F8GPzN5x+I31N+GfQ9y3d648wrH74k3p/KvylX+yDg9UdWXvFxeAWX97b3
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
dav5597/eb4gX6nlyV/r+mZ5xLVqxr/IT46U/FjKqf81P5hy5gdp/rHyS8pP
SP+Vmr/L93sN61/zg1meeT26fu18bPCbmt+7WPpP1y/l5E8PkPxwL++arF+2
n/tHNH7F8uAJk/VLOXjCTPPLKUe78pGS30459Y/mf1NOflTjx5RfDruys+S/
U27n+0h+Nt+fvMJymf+8P5frVtcv8xnulN9R/hDjEyHunOhvvz9svyS+xJVA
+0rrn458FR+f0Pr75dwno89nfomPf3yhfsTLfXwiaX95t4/zm5z8DXk3LX+V
2//XNnk/+iXIE0jqZ78xP6rW+MyoMT5+/17fpDzzTSRPyeQjkI9widuHEeWa
36vtp/9Ov0XLM7+F+y9rjc/cGuPj92/tlZTX+Ka2j/kuGMek/PtiP6uc+Tvo
x6Q880s+8HlUcXyRT+LjE1FO//Jj7H/V9jNeyvxg9a+Z/8k8+dmSH8B8f+pd
vZ+I7UEeRpLf1Mvxvzsk8eXwWTZz/V4v9iv8ZvL4mfL3tFd5zuU5kn/K/Fvq
D7W/GxDPR95mzjg55cz/tPsnJX8R/nB+XYiDl/uHOLjVvwLxdsThM+aJUs78
EK5P3V/E/ELuH1T9wPxZiXNaeebfcl+p8tfMn0TeZHo+CfCT/PxwyZ/i75GX
anEcyrm+t9YYf9rd3F+s+pn5vdwn8QbyjCg/DfF+v38h6mfmdzJPnjhBOfm9
KZhHYf9SF3k/8v9/K4IdEfMnmU/C/bfM06B8svB71e2jTdlbsFvVvmJ+LfJq
mWdr8h+6/SUbC41Pke/gPsql4r95Xndtcv6G5Fcm+3+4/oHDifwaF48jPx7l
wzwvnDyf+284D7V+z++3S+KX1M+ef49y5pcAJxP/4sHK/Nlg6zxpn+e1Ennw
R9/L3jv7ykk/m5b230LpPy1PvkXHyfdfxAeVf1bh+3qDt9k+KY92lcHvey/p
H67vhY4fT/cnct+2ysnrh+ek5bdK/6uc6znE+XZK+o94EeKIvRI599uEOOiG
Gvxyfen59yhfGfotRz8m9TPfWOaZydFu4d+1/+tL7h+ptf6ov4dL/pPf38s4
Y9TP1JeXuTh6PL+CuMb1V+f+xf1rLW7//BfO38b64/o6TvIfqY99nDXyS8jL
B3+7PfllK3+l531y5Q+pr6m/NT+vWfpvqPRfa/bxq9DX1N+3S/6c9k/1/cOH
lD6PP+a3kTfkPi/Vv8jbIj9cqH/q9e+W7BjJr+N40T64WvI3qc84D6rvH15r
+nOW5M9hX0dJO0z171vQ19TfZwk/2tPx2x1zzd/z/HbXXOMD1JeroD+pT/36
2Wz69yzhx6iv74T+1vxQxO0sb1f33yFv0ta32jfU19Tf70v+5jynX/vlej6J
3d+IeaL5sfMdXtTVXSP5L5QDNzLN36A9SftY4yNcP9+Efq3OX681/QY9kml5
8svUl1qe/Poc6Fst/1e3v1HPz7X9cUl8gu9H/1b5BZbnPljFN9oD1I/Ulyqv
df4C66f+pT7W9qHdNeILa6nnzV5ROfWj7l/141Ofj5P9iZx/1G9oZ67vVyu/
lOND/ar7W/l85s9T3+nzmRc2GvpS+4f7d2rt7yG/o/iq+/KbZH8T8d6fq8N/
iX+b6/qw/FqsH20fy3PdDJD9Tyx/LPidSyU+TDnXj+5/Yf1zwC+1SPzM90/f
3OPFF87Hr+F/LoC8AfzSOtn/wvLgsRL7gM+/yPnv6fl8H9Q4H4r2Mc9ZOVP2
P7E8+RtdP3z+LIyP7n9hefJDun4ohx2Vb5L8Q9b/A/A7c2T/ls9ParF8CH0/
7EvnOFr5xyDfDH7nWOE/WD/zEHT/EetnnFr9d8lbzbwdGP1HnzcS14fP36B/
Fc//wrkQ8C+2Gg5QTjxjfFbPR2L+gD+f4TPBt5eLlcDP6XL+FPf7AR9KPR+J
fAjnv57fRF6c/N/Bsn+H+n+q53GtfuZvMK9Cz29i/J12hdp/jN8/jrj6u2I/
MP/yEYzzYDk/qmcr/Bvjt0NrxDdxbkD5TeSd6PlQzHsBT5bYf8wPYN6Bnk9G
3i7gfv/kfAfv3x2Q6/ln3Lc/B/FjPZ+N+SO0//T8Mdj/OfKAcz3/jPkZ1Ht6
PhvzO2j/XSn2NeNp9J+Xiv3OvKL5Tj9F/83nR262fBd9f8o1/4H5d5QPlfgx
8yp5PkW9xL+ZP8fyn0p8mH9TPkvi18xPpLw6P9nb9DPz0Sk/Vc4vqMFPWn7W
c8Jv+f0lm7MRYv9zfVB+tfinev6gro9xyFfg82dJ/PtbiJezvK4PxsspP0vy
H6iPOD5jJf5Ofcfna34F8ytZv+IveQfW3yL5E2tk/0/1/UUxfr5G4ofMN2H+
pZ7vwXMD5zn7SfP76xqZh6H+F8+necvxPzH/Wuz6fKrkn1PfcB2of0S8x77l
XPOveb4J9cds4dd5fsoM6J+Nkn9OPN5Sg19ZC7wn/mt+OHkDb8fF9fEm9M3x
0D99ZH8C9QfsjGR/O9tzDfPPhF9mXj3xWe0v4j3xf7rkn3N/BfLaEvuL59cw
71H3P/D32FeZ6fkXXK/M32G+i2//YPB7ea77P8ir0H5bL/sbqG+of/R8mdbO
z/Pnn2wsNsj+A+x7wPgwDyDufxBe2PLEKGde1FPI71X/j/FH5gXp+RqtnY9F
/mRJ4E3Io5ic/FHAuTeT8zXIP3n7K+pv8icfIn9RzxchPwheMNEv5BeJ48n5
H5gPZ9XIvyO/xLye1XL+DH9/bODdbL+rrp+rkP+p59u0dn7Bglb8f67HHwnP
Sjn1If0U5W/4e8TRMsVHtudQ4KPuryLecX+snu9TeL1NvLLy5G8PC7xtpufn
kD+kXtTzfcg/evsrxmcZb50WeNtsDznfhvOT5wCo/UW+hutK+RHGB6i/lN8Z
6/Y1rC2U/+Df8MsLPT+KedMsr/P7IfBllGt+9iKnn9P8M9oL5P9mCf/G37N9
tfaXsvxm4ffIx/H51fd3dbf4vPInjJ+wvM7vOyU/R/MfmD/9COQnCb/E9sx1
4xv5Q/J9rF/5Tcb35rvxjfZJa+cz6Plaen7QdOc/tUniy8TjWudPc3/9EuB7
Lv4/94W97/afxfjyb4HHPv8v+s/Ec+yrzzS+zvMj4Bcl83eV5E1q/Jt4egLw
VfP/kHeRH455rPkXnL8/BL5XP7+0rfmvlwh+kE+nfajzl+dbkCfT+DrxFHGN
xP7X+LPmd/D3jKOp/cX20H7T/ECeX4G4GONZVj/Pv/D5h2rfvp75/cfRfuT5
ErOBr69Kfsu/yrkl50t+xc3Ac+R5ZK9LfgfnHec3P7383azx8K8dsHxJd5yD
Ge8HYf/gXCuU47/1Wfevf/Pqpmyg2R+sh/JTF/c4YEvTB8WJlc8d8jbPX39r
Sxnv7w6/75evzDbt3HXXAUn8750DD13W+cTBdq5Wk2vH+uzdirxPznoUn1lu
dOXfQ816vhTtd54zxXGknO3pf2Q5bsitHfMDR68/75En/pZp/eiQRp3fJ49d
Nu6SJz/Hg8p7d8hPrvRD5N/Yk+E53ZL8G19/2aDtJ/9z67CBy96/Zqd8QKWd
a1oZv/saKO+33d0/v2G/9mXv8Jnf/Fib/vfdEvmVtZX+7Wr8z5RKP8f8b63/
1ZnnfP6/yeoP49fH7IvZ+78+7tx94/3HO1fmT0fMm/o8jGfkLzlf6X/q/v5+
lfd9yX4XxinGP/fG35R/Gb/39W/MZH1Y/VMwryjHPDV50I9vWXmdf/y95b+h
Psr5e8r7oD6dfz1dP2wUeTerP7kfG/3u1z3/xfr3qFE/5l0z5bvL+QP8fc8a
/cf2+P6N/EQYn8hPD5L1xb/9+Eb7muuV8lWV/o76n3+zfbq+64BHo4FPY4BX
fvxjXshOwDvfP3WNxCXtf7af+KH8hPf36+o0vsa44V1unSX4xvVXEi+lfMF5
h/Vo7WN7VgF/dX7efNN//5vTfBeeo/wE37dpxn//m9ug5x/uBTwiPik/MQZ4
+NmfAj6eQrz08xftZFwizt8Z0n/6/ND+O639Oj6XA3fIT7wHvLPywMO+wEd8
mpx4RVwknlE+B3hH/CMeUs74EXFN/Sf+fS8+dX+wv6+lrlHXH/UP9E4BPWTy
8HlfM/bRJ/47+qfEe5bd5f34+5nBbsA80/Od29I+KlbK+pzi5uXg9HzV0L4G
6h+d/2He7mLzVvErvPcb2ejQD3mYZ3F/B+cXn6vnw6l++6zyb1azbx/XbUty
PnB1/Vta+YGV+bS62DV8cr5Z/wwO+GH23y2VdRT5O+BXMS68ZzFa1s8MmV+q
P4nHYidK+R5Sjv8MH2X+xvfn+za558f1yd+zPOvT+cN10kP0B8Zd38/mz+WY
F1w37wo+Bnukt5XX+ePtT9q3ER/5e77fHNSn43+XL1+zf4OdepvZTx6/2L+q
H3R87rP5dUbl36O0e8vpUp7rketKx594xvWv65v4cD/Wv/qXxBvgfDI/Of7E
H51fvj11dXr+EfUTzy9J8APrg+v/dOCBr39jIetf7OeWwtsNC2x8yI9wXrwN
PNLxJ77V0K8N/7N+1ecvseePQX+eivXP96X8VuAF8QP+S+w/4E1v4A8+a/mP
CT7QfoOdk8wftr97sGsTOf/u6+1Uk9O+h12f8NPsF9h5if1JfO/l/QiZf53y
Xs7/+gK/Avud61brp/1P/Fc57c673fyK8vBZNvP+klr907NG/9C/6RH6KZG/
A3sG9kmCz31gz9yEeaD2TZOff8n5anwe51U/sc9pLzd6PZH7+jvl9M8V32gv
wY5K8Jl/h35YU/wh2JnJ+NbhX2v4eW2/kZ//v9XWF/kFzrPq+P0uP4vLRX9V
x/eHxH64r9mPb9Rv5o9gXZ8U/BSpP+rd6vxHi9mHis+cjwOxPhP8xj/ax1r/
PXh/+u8q5/i8jfVZ3X/plJM3Ujn7G+NQy74w+1DlnlfomtTv7TWz48R/j/fD
/6P9y99Tb74j/oX494l95vmr25p1/XC+98f81/XR5Ms33CXlqb+4vtQ/4fNo
l6n/y++bnP6P/CHsL+OP3hX/M+i/m8w+1PV5Muc75r/651wv3m7nvzh/aT+p
/cnxm+Lmn+KTjV9+v7wf5Zgnf6f9EPU35ZyffA7ld0v54H8sa9Dnc30oPjW1
Mr/5N/tP/TMtP13Kc96Sv6zOP7Ut2T+1+NVa/Bbrh57L9hX+zvuXpl+T53P+
7Sn8Gsuz35Tfo/xA6NcBwi+y/l4Ov1P93cO9V5yfd7p53ynpPz9f72tQeU+3
fnvX5Gc8P67+tfEmyfP9+m7JVE7cBi4k9dN/Ej/N5PSXOP+qvz/9lrR/DoDd
EXBwm2T+9IM9C/smV/vW85fGA5Ty/PylX/775/+XgH+P+EG7Krx/x4S/Dp/0
f1tw3n5cP4yHANfIQ1r9p9JfIU8p/hP5D/Zf9fVvvFGu+O/t+41JfI1/8znK
37F/4Ecncm/PlA3J/ibgDftH5XPBn1FvaP18X7QvsQ9X+u8T/Uj/iHGdWu/P
+XWQ+E8zZF7q/KH+4vjWSfyL9gffv8794/ppk3N+qf/N8WzynyZn//D9V4l/
OsbFpz7JThP/mLjF/p8j8Rv2D+3Dt0V/7CG411PsW5YHz8V+TuReP+2S1M/v
df7T79oF+KTxySa3Lloy5Z9ai3+y/L01+t/HPzYWyg+xvLdzlb+P+dd+nvD9
euTvgV/Q+KiPm6b8He1H9q/GD42/AX8yRuKXbA/7T+c//QP+Tudvo/dL7fc2
P/G8b+H5yl/D7zMeR/0/vGij70e1/zopPiT2fYhvPNFc3X+K5fT9+fyGRT+4
Y+p+u5VPD5tyxn/c0j5X+TP4nr+rXn7b8vyv/1OHc0+J+XOUh+9XFag/Kc/v
+TuVT0S9fE6t9j/zv2z/RDz3mRrt4/cTa7RP7vFKns+8Jd2fQrncI53I+b3u
X6Fc9nkncn6v5wf+o8+/UZ6PedewAHklj0r+NviEBuZ1F5J/wvrlnFSR38fz
3zPd//r39j/3Sen9aFw3rbS/ubX2M29Szw+gnPfPaX6l73+e356OH7/X/EjK
hceR9495GWofsrzE4WvI2ybn+1MudkIi5/caf/pHn7+HPB/xgwbqt7vk/YL/
/jj5a8Yp8+r1d0vss/B5n9mFyn/9ff0f827Uv2f8o5X2N/+97Vf7U/q3lfaT
P/37xw94SlxN7Mth8j1/p+X5HNU/lFMvaP/Kc3PVH5T7evkvaX/Z9b9Gv//+
8L5WP9vP71V/UF7f+NHPd1o9gL8z+VBfvuTv9Pmn/3bai+1GdcmXvz32mudW
f5i0/zV8z9/p88d8beDCtbe3QfmVmZbn9/ydysP3XZPz0Snn9/ydPn9Eu1Ff
GXb2Tsn9LHx/fs/fUT4c8kk7T/jg5TH75z89phx9/z17lyrn9+fjd9X7ry45
f8a3f23G32n75n1rxh+6LmyT6I8G1/7u9jtt3zN7XrHLxue7lQ/MXzDqq/17
Je/3IL7n77T/miv1bihmnHXyoQN+Gu8/t/WD7+fhd9X7vz9+F/dfD3Xl9yz5
u6T/Hri2/3071eeTg52V9B+/5+9UvmDaY7+59sSO+bH3/uzBr+35ZDJ/TsD3
j+B32v6wProl/Dzl/J6/U/n5szq82Pea7kl8je/P7/k7yo/g+C7/3SuTTzkk
H/XRk1/6/hUHW/kM8mPxPX+nz7/0yB/94obHtiT+OeX8/jL8Tvvn/xffugFf
thF84fzj990En4a58Xm1eGjDDvN/Xr9d8vyZ+P4o/E7LH3Bdp68++Kde+YhK
P8X9Tex/fv9l/I5yzpujMT+Okvkz8KVjdn/gsbocn+UNv3pt0N3f+4v1H3Hd
9wv/Rf8W8kz7b+zoY7Y997Udco6L2heoqKZ/gf60/lX9MBnPDeume7l+39tX
PXKV5o9uzMaFdpRTZH6M+XZdz68fsX1+5g9PfPHlUZuyPr+qf+XaC6L9zX1n
1A9HX3nSjgdf8Ccr/5362RuOm9o537/Nd0/s1v7d7IS+K/dfcE88X6nvPn8e
/OKu9ay/GHtDfttXj9DzlbuXPxnz9n7Pfm9QCRyx9lMfvNn4+Pxrjkzv13iq
gnfx3pKOK1Zc+N3xcf/QSOgD1qP6I+Dm32yfyzPnXVj/yaHrrPwLv7ioeddf
vpJ97bzlvz77lZ3KP73zwXEXHx/3TxDvm4Hbqh+CPuls+uGmf75ir3UvRf6V
5Vq2v7rf8Rf2T/RDY0Uv7Wz64aCT2hz1aHN7a/9jRx120Y/bbJMv2/z0g+dP
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
G2qsP+I3cTsZP1mfml9IfCYuJ/MX+GzxbZEPB/4C55L664Hf+wC3VU4+nLhc
K/5cKz5N/CXuJu0HfvcFbquc+EvcTeYP8Ju4XR3/jL9J6oe/VZ5eA9+uF15e
5cTn8cDlpH/h/0l+USn9VypOU+7jCTFPlnLkVWS5z68w+RTvVxVjRX8gbpqT
VyHPYvWDnyEvQ57Gxg/4/Cx4F/IwlNP+PRi8C3kYysmvKM5STn5G8o+sPPkV
xWHKib+Sf2Ry8iv9wKuQZ6Gc/Ax5GfI0Nr+Av4rTlNM+lvwjK494Rq44Tjn5
Gck/yqX92XjwKuRZTA5+hrwMeRrKaT8zfkIehnLyK+RVyLNQTn6G8RvyNL7+
tcWN4F3Iw1AOPjqvB68yGTwL5eBjc/Iy3wZPQznx+VLwLqeBh6Gc9hF5FdUP
ra1PrsvFwO+Rkt9CfkVxmnLaRZK/ZOXJryiOU05+RvKXTE5+hbzKdPAslJOP
Pgy8DHkaysmvKM5TTn5G8pfs/RB31/xPm5+7gZ/RPBxpf7YavMqz4Fmk/Tl5
GfDt9vwx4FeGgVchz2LrB/wMeRnkM0R+FPphPXgXxGtkfD/OeoNXIc8i8oK8
DHkaPz83Foyf1IOHobyb8IKK/9Anqifs/Ti/fDn+s/udc6nfytPupvwuyT8M
eL23ldf8S/InlI+U/M5RId+w9PVH/gP5kiZ/SvIjaZ8zfqL5l9QHLK/6A+0x
ueoH2t2sv1nyKxHPtv7R/FviuX9+xP/ZwGv//Ijvd1F/uP6L+Zm029m+UyR/
99uhPfb8FcJ/YLxM3ij5tbTPWb/yL7S7ff0xvxjjZe1/UPJfee6v77+Yfxvs
lletf2dJ/mHA24NzxFfLhZJ/yfguy0+S/M5BId/Q2q/4/ffiP/tH9Uc34Llf
nxH/0R6TK74jr9LqP1byK0N+zfPWf+Ml/5bxN8oVvxU/FJ/RH9Z/B0p+JvIy
bX4slPzdwD/Vi/8S4zsLwnjZ+42Q/FqcH2D1d5P8XsYNWX8u8cPW8mNo91Ku
+TvUR02Ck5Rr3EDlz0hcVOXET+Kmyom/xF2VE1+JqyonfhI3VU78Je5Wr7+7
4arKNS6q8pES91Q57frxwE2VE3+JuyrXuKbK50rcUuXET+57qP78PS1/PvG/
gJ/ETZUTf4m7yfgCX+GHJPU/Dfwkblbv/zaGuyqnfU1cVTnWW451mMqBv8Td
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
Xd3VVfeeG+pWN/iXxweLfpI/KYf6/eMJ4N9B4N1fwcPEyZ/3gTeVX3dCXngc
32kXfmxoeFP5Nc6Qn4nQ26Ohd6XgUff6VcMFHv0lf5I3yaOm/+DfweDdDuBh
d37Lg6PBq8x3Et8K/iRv4voy/4cbvQR/mfvzvfyct3PBs8Qpb/gufcDvKCvO
4ytxXv72K6ivqfbkzRU4T3GuY+v4uvfnd84tfzP/Qd4En8aK87jyK3G+lzIS
/iTO7yqn9i8Bn4jvGit/sv88Pkm+f0z8Wcfu85/FeeRZ8Q+IQ07jBeIfEOdx
2KPU+NDPTM6z6wtsvxDHyYeKt859N3uvuEvu+9sVUvhpOM7zFL8bcVWNJX0f
nH7HL6nn4/FiT/zF+dH3UxPncf0+NvHku+fbU/xHnMfxPfJU+4THDwn1+9nE
eZznKZ5817ogFd8TN/sjcF7+8a2d8i8lPg31++icf/qRi0U/iX+H4/r9c16/
em5+qsZdcv7Y7lT/eZzn+eRzkkc+eVzjT/Llm7CTyp9DnHjJvqea+Cp8L9yN
j/X933HR0573V/N8Nz62+pP4R2XRDvhF8JcMzu+yu/GL9R/c+L5Sqv7f9U8Z
P68xz5fwXmuJ7y0/JeN6qMTPVn7Q/2Duhz/26nX4FMbPkfQ/vCf5Tnug7+cg
X5+d+z77jNT6csmYi6v3rrEimJz8RvADzfPz+++MEzhe7vXXRJ1ydnV7BHtr
cHxv3vjf/B49cegD7Rvkwb5fnvHzw/BPwBMGX5bIT9Av+f586v3ZyX2bxowz
MA+mf/TvjoVfoO/vpl3s5xk/2ls3frby9SDmhX6T8luW/H3TucHepx+1Mzru
4CfPXNf01+j2i4Z+MLKTjb8S/7lSPCfn11aIRyT+rsEZv18DOVF+S/islsTP
tj5V5TP1frnc/DWT+NnmR9D/YMigO66t1n501PiWJvfufYaVX/Q//An+/4zE
Txf//BjGDYxvzf2PzNmzw+hX4v41Dc71o9Nz8zc2SuJze3++z31yLq74IUJ8
bsZvBt9fBfn+VeSb+nbRAd2u2u8vO+DnWf+QcsdfrY9y+W+v1PoNx9M9zn+W
/8h7+d/vHxfx+NPiv1D+KHf6fcje4Bvk8eKdEl8K/6XeL0De43HyKHHkhwzv
KT+SP3lc/cerXbmOHoC+ESd/kje/AI8SJz/SP7kUek68GPrQH+Ok+UfyJ3mT
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
853EsR8oIi9ofTv1cir0VOu3R2boH/mBvKD17W2hF5OgJ2WyfkT/hHr2i6yv
0y+Q+jabf0zWU2R9wuLc/1KEdWOt7yUfUY4VT37nF7EuS6/P/B33bSnO+IJ5
cr0+6lFk/eN33xdP+s068hRO/nD5TdvXDxO53pIav/VXPnjz/UPqYX/c+hRO
/iiDHubfv3dQqPNEfKeMv6d+Efa1Sar/jOfc9Yk1ws9234Liyb6umvC/mqau
n6xLrI8wDik80ef6sj5hceiLrE/o+BaGzIMqjrquoNwzv+OTeYu4b0FxPBd4
o2bq/owvuH9Mca6fcl1Scear8RwpnPqLcUqNH/XTzQ/+7vsuOB6JHqr8mPdH
Sf0H9Y+47p9MfucUEdf6Suon8Y5iHzg/7vWtf0n9Ja7xA99PGrvPb3DqH9tT
D9371zf17ZOgx6qfxEuhp3s6fiNkfjQ+o37SP1P7QP2c7syfte/cV0Rc43/q
H9fNqYfEqb+ML6nHxKmfvL7G/9RP4qn97zK/5TK/1F/2r6fUP1P/pjvjY+s/
J0B/iev+I+rnNEc+rH/V01k3XmP0kDh5n/Ov9T3M/70H/FzoKXHWQ7j5+VT9
T/i2sz5gca4buPnP3+0vc+plmT+3OPcrUY8Vp3/9Fuqu9P7tnfx/69T9+X5q
6p3iE5ifx7jp9UvgF7LuRdufltSDhHc4eRqLM36nn6g464s3yTy443NQ6MZH
af3k+Gv/N8j+P23/sOyrzr8/oGHcD3VPivO9CKyL0fuj3kfy8xbPqk/k/t6f
EZ/p9en/UO61PeYN+8v2Sl0fzxXqOpU7vtb/TT0f/HLMY+r+qPfC/pd9Ujjt
J+uiPPJrjmv9Go+zX5qfd/WrntEz4m5dJu/Lf7a+xr2+zR/ovKl9a+/k3+uF
h0h9oPivofIX5Mpc/w6Jn1l/zvY788YXFU17rX/T+IF6Rpz6SXyT1I+NEl7U
/V8b5f0Uah+5P5q42sd7oF+8/hlSf0b9ZPt+Up9I/SOu9jFrf8VUJ7/P/IrO
zz5G/jS/Sv1i+0lSX4n5Mjj11B1fmx/eJPkr6hfbd5H8LPWT7TtLfSD1j+21
PpH70qeirn6q1NeXO/uTK8b9pT6beWfkgYL8+WP7XpghUl/C+bofdR/9Zf8T
/cuzsa9B/c8BSd15yLpz1nMTfyqp246Ph595RFLPLeNT0bz/4g7Zn4O68GAy
6sJxfYNr/K3rG+Sr2R79Qf4I9YVjI93f+Wfsm3b3d9r8HtfD+F4O1S/OX2PP
/HFfvrt/1uZ3kZ+J54BXQ5Ev7q9n3bnq333uvjnuBzDt+f4G5q1UP5+FvLj7
O219+FDsC7gOdSTfY7+Pe/0KeL/MDxH1nfhw5/0vFWLuFyC+wt03Huj6IPW3
P+pedH2R75PhvgPup3Dnf/+Qdbzz89ZHmX2BqfUR6h954S55vxLnn/Ou8kH9
dPWS/6x+Ui91/w/1k3p5tuw/eg761xp6x3iPOPV3MfRW948w/qNeav6M+ke9
0/iP+st9KtNkf4f6l5r/o/5Fjp+eWh+iHxX1kP0dHP+rPONP/SW/3i/7i6h/
1LvZ4t8Mhf5Sb3V9l/V0N0LvVD+pv+b9wbJ/hPWAp0LvVD+pv+b9wZJfoP5R
76bI/hW+74l6e63UL7JuqotTn2PrK6m/1Fvdn0T9pF5eI/Vp1D/UuYUzxb+j
/lJv18r+Ia4PUS91/5K83yX1fge3fs3ugyGO983wPTRxT32/lxMf1EGcbN8v
1gn1fIz79f1IzB9wnZvvOSFO+8j1iTJ5/xTf2wa/Mdb3IzE+mYLnPlr2x7j6
1zDW90Mx/qdfpP7lTPE7+Z4RI//wh/Gel1R9RlmGfeR6Eden9P1RXA/g+sOP
Ih/wKwJ3fdjqH9ZTjP4NkvUr8iXlRPVvabKeYvRP30/G9TSui+v7qbhegvf4
xPr+M6wX0W9NvZ8N63GM20J9/xjjS66P6fvPuN7G9R19P1vW+z/c+LJuXCz8
SX2bJnpo5gf6hfx1oO8vcOvRTX4ndq+/JpL3BBmc+sX3rnEdyp3fyiH1UvOv
7vvtdgeDpH6A+kW90vVtrhdTLzfJ+jvjO+qd7t+jflGvVP/cfdflkcYvZRn+
xyCnrqWi0VORz+hHx3+y6//Uz++gl02lvoT6Rb1KfZ8P+snjZbK+iroIo1f5
86t2/4buX6B+Ua/ekPoC6ifWqUOtX6F+Ua+0vob6Sb2knhJnfcQx0LsNUr/C
/Lbv/STUT9R5RFrf4e4L/5jvuzI47R/24Qda3+Lq516x7p+g3aiKuvlOUp/O
68PvCCtJfT3zq00/Surey6X+nO1LcXy21Me7+69mpOIzl1fKo+7iXxD/H9ln
rTj9v/vEvyZO/0Tf78bnY53IAokf2J77a1T+3ftvNecRZz0J66dU/oVXQ91f
wfcK9se+jMlSf0Ccx6+W/Ru8P/dX5fd/Ss06Qpnsv2C8zP1RWt/B9jy+XOoL
N2P/Atc3dX2E/E+7wnjI1a/mJn+q79eAvxrOgv+q/ED+973/ryTxp1lfnXq/
xmqnPqJSrO//YL/p3z8j9v027I+h/6z8n8TdYwPX/7LjQ/+nWPbZEXfr0+h/
bRf7WD/GPvxY3z/CemXGB0vk/TaMW2lXVP4R7wSu/2Xln/ae8aHKP3nH9b9s
foDrb1z/1fU35u2ot5rfYn0S7bK+3wfxsnkPjL6/hvEPeaydvD8HeRPEWdtS
7/cpGJyLl4OvET83kvfLkP+Z17lb8md8vwHrxHX9m/JP/1PzL9Qf2l/d/0z9
YH2Nxl+Uf8q95l+oP9QbzQ+5/tGuQPNPlH/KverHbbL/VPNDlH/dR6L6Y96/
LuPL9xYug9xrforrsciDpvKfeK9O4NafWf3o79SfbQ3UP6P8U+5VPxhP+/a3
My/NOk3Nf2n9iOZXiyD/lPtvJP9L/aHeqH/rvp9j71jzq0uTfJF5P8g3kv+l
/lBvlkj+kfmBgZi3myX/yfdjc91f19dpX3hc6wOI8/07un5OnMf1/WZZ+zey
9nfx+lrnbPQLOI/vlPoN4qzf0vpKd396/XiK1IcQZ32O1i9yfFm/2F3qA2Jn
fJuk6hfFvqfe/8r2zBvq+h5xHtf8ojs/9WKtj+H487jWj3D8fnXqP7en/BPf
+7UGHn9i68VzmD9Zh/ym/X4H+ZXvpebfxPn+BHfc+O+3+GtWo9Zlo/YJe+R+
N0UFnz/9Snn8i7k+6y4annTmoFFBy7gY/SGe/N08XHfUsQtqnNMsFX9yXnic
+kx8RbCtQe19Dw15HeXXQ06Oe7V/xb5fvU33zTe+99Eu6V+jeH3u/m0hH41M
/4Y+/7//RhSxfkP5L7ku82lxifLryx1bLtjwiK2/OzTXn9UGx0AWj/Rcn+PP
491z/14vMu1z41017NFzQa87Pq4UJ/Ng83dJ/6eUsP8q/832fvuBZw6vEh6c
/MZDZ1do8c6wAu/9n2ze5bf/Xily8fIgmb/amF9bvzsQf9fPzX+1ODnP5if5
PjDMfzzliO973dDKfj+c6wOUS83vUP4od0YOgXM+MW4lb+Ud3+ox9aQ+5NQj
f6n6sLshdzxOOVb5o9ypfC6H/Br7j+u58/d80SinH1q/QLlpFK6FHKv8tYDc
qXxSft3j/Gfnn3Kn8gm5N/3T+grK91s+nPILue0OOc5//wlF+v4Eyu/zkNuD
IMfu/JcHlMu1kFN3/gpDymU9yClx1p9RLtdCTolTLo/Kje8i6LddXyF+CI63
wnmKH5T7XZZaf6L8U74OxHmKc/5UvkR/Uv4f70+5gzym2vO4ymfW9Yk38fSP
94ccpviPOOe9Ec7T67vvFbTyS5xH9P2DxBP9qBYfJfaBOI83x3naP+4DTMbJ
2l93/KrGPI847e4o+XXlt3o8xoOPcK5XUKz8NDqx9yZugR6Y9slvXMT9QTo/
lEceXyHPB72NLqTeJvpscOgV+LUwbiD6RXlKrtswlb+lPPC4vp8XfGfkN8t+
JsffKXHx33h95P/++6hI9Q92Nbwg95xLwFe/RL7rg6fM9UdlzE/jHF+tCpon
vxHsrxkf3Jd+VaT8yPFom8hnlPB9en+k/qp8UC60f5Qv9zj/WfmgXKj8UL54
fP+881chpn+g8kn52v1ZIlfn57UP1c33OVR+KBc8TjnT+aNcqPxQvnhc+Y/y
wfm5iHIi8uXK1Yyi/PePS9S+5W8/x7Q/D/JBuUjGycon5CqAfYybQs5Ufig3
R0OOVH7gt6fiR/IR+wc/KiV/5G2NH4lTPhoLv7tyS7/Byp8rzwUFnvpO+JVN
U/Gje/+tAc/L//zNU/7zSOf5jXyY9qPc9vAz2qZwHlf5yv/87xRpezx+cX7/
0Lbfnfs3qUTxRQ+99Nt/c0pGSPvkNy6R+MvMf2LXlxn7oDj1mfGByg//fsvp
p8VhN43+6vXpt2ucKNc3fq3y+z3w/0qc+NjijEvc+S8X/qodMs75v96f8znc
M76c1xEenPq7Evyr48f5YTvl51HO+JdHah/gH5v3d64X/3kZ5ofXUf518w/m
+qHIh8FhjzL40/LfGow/2w+U+JPz5/o/Vj/flusn+rHAxtcYf7b3vV+N+Jue
+WG7lXn9Q+t3efzjmHkU5c/W4OuW8EsV37P4oI7Rn/z5kx1BI8QtisPuh2Mx
jqn1H4w34wfF5b6p+3P+6yHuyd9/G7cqnvjri6IWiL887aMmTvxiccTtpl0L
8f8bSzvVH30uX/zd2G1v5HeFw38VU/ED54ftj5T4UufVjYeon83NvGj8N0rm
tZnEnxxfd3xs/Mv5cced/6x+HOD2z9yf/jDjeo3vEZfHjMvVvifjs9q8HwP5
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
Lo/9Lv+Nv+8QHiVOvlMeNP3D38qjxLP2z/Lvaxw9tfxIvlMeJM6/KX/vCT+i
fi1yecbyW9b6ZHPwpZF/4ddLpe5si/Abz2f/mgn/sj9s/5Twa2XwlWtnLL+9
Aj66zemf5S/yJa+v/Mrzib8s/FYF59/mjJ/l347oj/IwcfIdr+/bH0We0/pA
8p1bB6LvHy2POH8bhR/VL1R+VL9Q1xfUL8zfvjA+VXiSeKH4ZYqr36c4+a2a
8CRx8qPyHHHyG3lNcfqlfxGeJf4s+Oho4Sni6vcp3g7tyGuKk8/Ii4p3F79R
54f8yOsorn5hKr+P4+RJba9+obaX+D6FZ70fQP1Cra9Tv1Db8/gM4UlXf2ze
THH1+xQnH2qdFfHm4ncqzuuS11L6g3YHCc8SJ78pTxn9Er8v//WbxuS1/P2z
fqfinXBd5WFzf7Q7DNdRXP1CvT6Po64m1V79wpT+uPF1Ct+I74GS53z+32ac
p9+vmYjvKZHn8rcvjCc751kc3zsLD2lzYJX3u7ZO4Xz/AL/Dpjjb8TqK47u0
Md+T5Xk+8/7UWYKzHb9bpe0HO987Nt+Htf3H91fxHbPU/dmO11F8I76nyvfD
5u9/85DfYdb+j2FeHdfR+RuO7xKR//T6E3B8JM7T6/N9aOQ/bY/vU0Z8v6O2
nyjf1dP2I2X8tf3D8v1Ybc/85GCcpzjkOuT3GRXf9lTjz0vr1Ym7TD3ttGM3
75PC2Q7f1U31n+M71TO+XXHdn3EffT6uL/L7Uan6ouT7vzG++5q6f7/pHW/9
d8GR/H5gCmc7Xkfx03L9OzC+Y+J7A7esWpqaX16X91H8LrTriuvo8yXfiz3Y
8F/++dtqzlN8g3wXPL/8WPnX+/Nv6sVm+T7yJOEtX3xLXL8vN9LlL46/wZW3
yGfu/e286Pv/lTfby/fVh4teTcz//T0zLlr/5vIX+2/fP5+ft/jvN/uEcXf7
r+/Hnl9CfLB8P57v3XbtkH3/m/Iq++v23+qNxrfUL15fv9/G9+K57dPv/3DH
z/ZP58/3/g+2nyzzM0h4y/f+D+I8nzj5izh5jDj5j/fvLN/X1PGbKuOnvEke
JK68N1zGl/zH+29Hf4krr5BviO8U3iKfude38R15jPh0nM/783rE78H5xM/A
9dz5tbzK/prxFd7yxbfEeT7xjaI/vvh2ljP+qh+Wl/T7jWzH48pfKpep/UnA
38RxD78Qj5X/3PvXS72fSnntUOFHtj9U/EDFyRv6/kZXb8sj5ReXF6wfp/hM
HFf+yc9r/Lc5UN5U/lO9KRH9M/MjfoK253c7pgl/zXL0ht939snPoan3bymv
+b7vSj9N358/y9GLirHyl/LyNM/zT8Jx5ZfZwEvBK6cL/7F/5KFtwj/cv4M4
KfX94RnAi3B8o/Af+3c6eONO4R/it4ufpPhV4JUpwn/sH+KwsK/wD/Ey8NoU
4Uc+/xTxAxUnL+n7tV27ZP00xTd59E/9go2if/z+uxtfFsr1C813exVPvsvL
ekDGZxZPvnv9ufmOuOLJb1zyNK6jOO3Hwtx3hmt53g+3LXLvY3G2ixz/3eLt
nPi4Ser6rn9ZmGp/KNq5fqbFE16vGif9KEjhvO4IJz62OL6vHE7BdRSnfXLj
S4vzu+gjHTtm8RW5cVsRuPGlfn+4FN9dXpG6Pr+H7caXqfELeZ7i+C534MaX
Fufx63Ce4uTVpZ7+IT4Kqi/p++D0O35JPd9itJvqeX7OG+dR8Rq47gDcxzf/
n3vmP/HvDpH8h8Vb574nvlecjF8Fj3wdGvM6+ftXFby82zN/FcJWuI/iXdGu
Oq6jePJd+gKJLy3O707egPPy6/eawI0vVX7Ko8ke+aY883eafl9ceIE8RPy5
vLzDf5Z/iJNPiCe/cQnxpx0+pP5a3pom9oH8RXwl+us+v+Efw0PE2wnvkMdU
/tz+2/cvKu+pf0f+cfOMtn6J/XG/b279y7dkXjU+jJz4MP199BWi1771T+I8
35Vvyzu+9U/iPJ94f+Ed3/on+381zid+l/ACeYh4ifR/qfRf7YaO/2IZn6ky
PpPEbuj8Ky8Wo7/EWwsvkC+IdxLeUf+0hvAGecjtn+U98hjxrsJb5CHiXdAf
Pt9R6C/xm4R3fPGhqaPA+cTVrvriQ9dPWiP+m9X7BcIf7rzUiqfn5YfCeBV4
gXyhOI8rfxB/Vvw0xXnkWeEvN26tGi8Q+SG+QOyk4iNd/ybV/gMc1+83KC8p
vynvKX+5el8eRZ75icUO5R//FSYfpTh5SflnlqM3tVP8I+MTKv8QVz9JcR5X
/tH5mZSfv838Kj+w/d3ghRrCX8R5XPlDeWmxjA/x78QP0+tT77sIf5j3g4qf
ojh5rIvwlzs/FcLWwh/EyUuaP3Tt4qEp/iKufpLiZn1S+GeWyKd+v5I4jyv/
bP7wx169Dp8SXVTz+spNN5RFPfFLvGTMxdV711gRTcbvJ9uGX3bGO7a+68Hb
u6yufu+3QSJXlWP9fjffK3I/zuuP88z1nbiReamCYuJlDwcffzFwZ9Qr6VeQ
9G9v096V68ph+YC/XbH4EJtfSOzr5oB5h2KJ/8/aMGXMp5UqMb+V8j86Dr/2
gqWXbDfxU5KftPIzzYmfqnMeJL/O+HVXqj6r31dvn3L/0hnmuObnyScJv2zD
/az8aX4o9f2DXP8rm+NJfsvyB4+fmpPvZvEzST/N8+8YXj5kTtsfo+Jk/tLv
L8od/9jMA3hI5t8/P9flnn8h4rNt0XMYJzN+g++4tlr70dHXnRvsffpRO6NG
tzS5d+8zfief04uu73HFD/T/o0dyz2flc/WYWVs+u3t+8MG1O96felileEaL
tidtP972j/NL3i+X+WVeNOHHpkZOiLu82TBO+m/3D3Y4+Mkz1zX9Nfom6X9w
+0VDPxjZSe1Xc5P3T/pvv2/34ZToL8X7VYhnJf0P36j4RJ8JH9j9vUn/64dH
5njpsHhI7v41Q/f62+AH1Y6TOP1z8/zQx/CcFYvfGHXNASn+6XlAt6v2+8sO
UxeW5Aft/hiXl2rFd0NOiN8G+SZvq/1M5n+sOX50bnzt/I5y7HIp4hmr//eB
V8g7Vyu/CG+Rx6T/EXnpAVyPOPmHvAN+lPpMxpOm/sDcn98tLYPcUw+IDwQ/
DXTyj1Y/iiCf5B3lJ/IXeV3lk/lqyHek+X3yzwgnT1Sa4i8ef1r0k/EVeWk5
eMrtf+WYvKP8xPyoL3/NfPcQ8NJp4Cni5B/yjvIT+cu8P0fkk/y00zM/Swcl
/EPegR6L/C40vLUEPEac/EPeIQ+Z+QF/kbemiv2gPCGOj+eDh4iTv8hbat+L
wD/kHfIQcfIXeUvXn8g/b4J30P/Q7V9zrq+k8vOIO4Jl4B31XzuAv54Cbx0B
HiN+EfiHvKP8RP7icfIYcebFB2LebwZPufM31vCO8hP5i8fV/+Rx8lLs8MHm
gP7UXPhZvcS/Il/dA97R90Nz/qe7PFNMnHyhPCL3D3YIj8n9zbq22mfyCXlG
+Yd+D49PF/mlf9RJeIz4EIdPCoqVf+j38Ph08X/IP2fLPBHPWv8nn4wUnpHn
C48VHiMO/zfaJjyzp+NL/nlYeIw4+DuaLDxBfAb3x2J8f5XxXQY+6ic8RXwh
+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
097Sj9f9xfTLaafVP58mev+I+Pe0t0USp7vtS2Wdx/onfH/MGZJHIE69pP1V
+/6c6L3mp3mcfv670j/qZZln/Zh6775nRusTKxpez5+f3t+8d0D975mit8PF
v87a//Ss8Ib634wLZksegjjyc/FI8MpW8f9Vr0rE/14Dvf1Q4nB3/tqGu6F3
6v//AN7oJnG+O7+7Atp/rU+mP8G8sfr/g0QvdX+zW1+8Ndgi/jmPMy+cv37J
6qXuH0P+0OTRN4t/TvvN9TF9P8G7Ejer/lK/3fdwWPtL/RU/voA4856Sf0vF
v9TrjmI/qU/U2zPEfj8P/aReqv5Sv7HvJmV/eT7vUyT3L5e4WfX3aqeuJl0f
RftMvVX/jPo5XPxk4m2h35MwjmViP6mf9NPVvuu+Jd0fTf38CXo5Suz/EIn7
PxD7vk7iXrWvIySuVvu5FPrZTPx04vSn1c9259fG5bq+Q/2mXk8V+079pF6q
/tLu0s8+T+wv7TbteP71nbKAeqn6S/12969b+6vvn9L1KZ4v9Ytif837iVL6
zbjJjX+1PfWycmp9kPNJO+ipr4R9bZLml0S/TH2Ptm/s5q9S/WP9tb6Hjjjr
wtZf+eDN9w9J78/le0HoFym+U9bfFed1uf/It/+m3FP/Pj4nj1tkHcPiiV1r
GifjXDPVP/LVVFwnf//qob5kfQpfjuvyPjo/ZWjH6yie6EN947/q9Q9w9KZ+
qr3uO9X2PM78gOJc9+Sv+q8dHPlek4oPp4ncdxT+oHwT9+2vpn1UfisXufXt
r2b/S3E+8Z4iV5Q34pRbttf392St348QvdH4QPeP6f4i9oc8o/vvKFfTnfGx
9bETRG41fqbcmftDHt3+1TfjNwnXU/md5oyflQ/KP+MT9lflm/fX+I3x2XvA
z8X5Kt/6HgiV72mO/Or7P9aYda788c8aU4er9i8WuVT/SPb/peJb4pRj9X9K
nHHhPhQrv8S1jkmv76v/Jq48rjiP6/4EPj/tpuqH6o3aV5Ublb9I5FLlS+VK
5X+a6IXKH8eP/K7+Kdvz+BSRf+KUY/Vv2D83j2ivn/X+iqz371yKehHJr0v7
0qgbztP6Qs2ra/tREn9rfMH9va5/YXHK7eM4L//+1oXBZPiNii9FvTn3pyjO
dryO4quxL1z32RPndYfgPlo/BX88Xi/vOSLOuiK3DsPiFXsMqPVU+zqsy06N
L/OtrINWvDTXvxqm/kxx2NOwEu6j/NXbqVurkZq/ZN9BNfEvLE555nl6/Qtk
X0J++SmP2uA8HV/2x61PW5iST17X935O14+2+vWgyJ3v/ZzEB8n+B8of8R1S
/9cLcsf7T5L4Z7XIjeqvyj3l2JUPK7er5f0HqheTZH8G5Y845VDl132PjM0/
UP7YXuuneT6ff6HU38JvN3mGclyPOOypyQ8Uor/EL4Tc8f7qH1A+2b4nzlf5
ZHuff0D8NKn/0ryJyt80kUuVP+L/IzypOOXwPpE/8vV64TFtz+PLRT44Lk0/
SuSiXOSXeleK47NFfjgu/YWnFefxq0V+OX7kH90fzf73FJ4ijrqoqCrkopPI
L/tfJDyo11/g7GOz8v2uyP0CkV+2V57MP3+WJ7V/3SBXWp/oyk951F3kr/j4
E1svntPcyJ0vPuJ56n8m8lbHrG9pex5vhPMUH5hcN1x71LELapzTNoVzfZ/r
AoqzHfrn6T/zpe+UeJ4vHu65frvcv5klfM/9f79+QYHi9U86c9CooCX6l97/
6bbzX7977t/rRYrzuryPzs/Q5//335QSvn9f8SlHfN/rhlZNjdzp9Xmc52n7
ZP5s/Vp++1ke3YXzfPLF/C7lTOWL5/nsK+vDKGcqP2yv60t3Q254/3WQJx1/
t9/vlKj8iZ6Y5+uT+/dBCfs33JEXK3+ifwavh3l1r6/rf9o//kvjlCNX/uKS
Uc79bf8S+RlR8pYzfhbH/HNcjRwSnwy54f197zdje8qZypc7f2n7Spznq3xR
LjT+VblqLPIzUsZld+7fpBLFFz300m//zSkZIePD5xojPJb/+kYOUu0pVyqf
xNcJD/r6D/kt0vYQmGKdX3wXJWwoPKbXHyg89N/vr/Jp5Vblb6TIhca/7vxZ
nlK82JEjlR/yT3mk8sPruvKRzv8dJOdJ+4jPp3jzk+Ne7V9ZFLTI/e5IxQ/J
b1zC+lvF0e9gRbCtQe19q6b6dwiu2wj3UZztxuI6qfcrQZ6W5847NHV9yiuO
p/h5BdrxOvn7Vy1u033zje99tCt1f+hryO/zqP62RruWuI7ivN4B/31+zHty
tH1yfJnhmfzPXx7Vw3k++ThA+qHzz/MoByo/7nX5z84/cc6nyg9xypHOP/vH
66n8sP2R6K9n/o0cEB8o80450vknTjkgrnKn/KZy0wLXk/E367vKr6rXPvt0
gJyn8sHjPvtEvBnOF/k2475c5s8dt6qp+WH7ozAvh4r8EOc8tpL5c/1zy1OK
84juL9BxP0rmjziPN5f5cZ/f6Heo7Xlc5+8AkQuVL5U7lZ8s/STOdQKf/3kQ
5lXjL5WLA2X+k993ilw/xrZvuffbDzxz+KpoX/wOnV2hxTvD7PsXz5vVqHXZ
qCVB954Let3xcaV492dPv1Ie2/dfFnye/N1LznPls3o8xvXDDe6x38Xm/rhe
0o/duJ+V38S/LowT/6RCmPiz1TKuHxv/Cv0Puueuv0/cI/e7SfiroYkbdP7a
JnJn4udhHVsu2PCIXV8h/4905M/KN+YH8V95Kr+D8SjgcX1/Io9PzP2ugz21
+ZULMC+cJ52f5pj35zHvTfG3zt9b7q+Rb73uxbyfzB/nzcyje33EDROK8vv/
hXF9zCvnmXgFzB/njfOo8z9q5P/+m1qi/h/se/Qy5k3nl/PP4xo/uvy9NVL+
4PyN+K/zy/ioPHrTM7+c17GYZ+Ju3OTz/3+7b+75PypS/uiB+VE5cdtrfDeh
RHH18838cz5knsz9IQ8XipwQ53xTDhqIfnM+dJ5k/mOdJ52/tiIHxF19Y/xi
x2805kPnSefP176H89y/RBeJ/nD+3HmbUeTiltd0f+t5ymuYB7d/Jv9Tovq9
FuNP/dPn4/wldqFqfL7wi+u/bU3lv5VXOY86P5yXozFPOv7sl45vfr3jP9/4
zjHjO1R4UfmxgYyL8pOO+7nCT5R3ykEP4Uf2lPOi/JWFv4JxO0rslIyvOa78
Rb9kpdhBHT8fv+i8cL5c+bPzMlzaX4DxOwfjVkHkt4HYBZVP5CeLfPlJM/4Y
d7WP7BfHVfWjsfC+ju8rYleOEvltInZlpcj/3cL7Or5Z8svxHe6Rfze/2Ij5
N3P/xD+oAvmvEkMfQvf+5I8JRco/6n99O/Hq3/4bJfxF/a2H8V2Xkn/mzXR8
k/43M8eTfGAtc3/WLSTzUD9O4pfVpn0iN81k/cGO75ocXtschx0y13/bGd/q
qfhJ7eeTzbv89t8r5vmbYVzhf4UH4W8dH/7eLfmjrPwax2cKxkXHL/l9p8TN
X9j8JI8fgnF7GePoXr92zHHR8eP4Uj6VP0a58pviHzf/T/m38vE25HU95Fjl
180vp9c/3OeNS3R8+Lw8rvJD+Von40ycz8tx0PHh8/L4qLzyUx6twzgXi/wl
z/e8ya/r/FOv+btW8rt8vhZ4rvzxqeod/1n+4nNT3jzPl6pvu1v0juOk8sHn
pryZ5xe9Uf3Rfml+l3Ld2PEzrHw3luc+QPSD/eL85M//lhveVvnm+WuFh4gf
jP6Rv7T/qtc6/jzf7bedv5FO/9L157A/5vt562X8Rzrz0zxeK/OX5EUaqv+d
yn/B70s93zLkpSgH2p7Hlzt5Rl9+bavpj9s/286XX3Pb2/jE7X/V1PgR5/it
zJ8/LRL9T9l3zpjaf9ofHk/WjxYY+/JJx4F9/jXs59Sve3/GawXFCV4ldNtX
Cd3jVn6y8Kzrz0v6E/H3m/5L5t6yw/LnrhGVG65/+Vfze9wLW656ufMm0/++
/c/58uuu28xvu+pv/XzZzzv2GD/sgH2XDG5TLeTvB/UffejHXXPM+PZJ2kVo
HxUc//nwypfb/vF4Hw9+5r5P//3mlvVC/ur3RQY/8K/ll64/KObvwO6d73zw
6ZZ73L549WXtF164OroNvxu2P/tTnUk1Qr3+IPzeJdf/J9oVe9oXNL5wn9Pe
W25+9f1Rp33Vpn+FU3eZ39fCF967ZduGYE/bP/fKgPf+cl3NkL+HJ/Mb7en1
n0c7/raR9se9e+ySkvFfmd8+Jz/3UZWR9v1zfca1/ObwjnuFffE7p+T0l676
3L5fmcd53lzBb2z+fYN3ilqH/C1OxjeW9jF/h/5ybtOVG6x/n4WPXHTGN+/v
/sn8bv7Xf7beeoLdvznmu0rNzmu/IxiN33XPl41aXcO+P+FtwdcLPunpYx+s
u3eNkL8jLv/hgc9fX2nj66RdxN9zninu+PfetUPFx+L3XMHH3x2f8uawuiF/
Nb/8SuX1R709rHbM34dePfzynZsb73H7tTMq/rS1y5aIvye+VLD02VPs+0Oy
rr8G7dbj9yRpP3f+9spTdv9ofjX+abDykHMKj9tlfqu2GLP9ujobgz1tX/vR
Rde9cHhhyN/lV//57YbDPwt8199Lrl8H7fi7SNovrjhoyCXNfzC/DQYsLn7g
/Irm/r2G3X38MYdWDvlba9LXn94zZHageG/8Fgp+1Xs373NMz6YhfzetGLWu
cR/rP/VM2sW4TlzvmoKz1y6vr/ePcf24vuBiV7z2CXiB4vnb8Z8XLyaudgn2
0/KD2BX+TVztFv/W9kejfT9pr3bF2CHgtFvvw261wt9y/agC2veT9o/CLtwN
u/AI/iaudod/E78DdmM97MYA/L2n7QdI+zulvdqtQdK/LrALr8Au0E6Y+RW7
s7sR7BHwF2A3MD/RUPzta2/sGXDanfae9uzPq57+0b7Mh13h38TbwG71hd1q
h7+J9xO7pO3VrvBv4mq3bsLfcn3Tvo+0V7vCv4mPgt3aBLvFv7X9WrR/R9qr
3eHfxGm3hsNu8W/iY8QuTZD2r8EuDIJdeBV/Ex8Hu8P1Mf5NXO0O/yaudkvb
rxa7s1Ha0249iP69Iv2jXagGu9AQfxNXu/MJ/iZOu7MUdoN/E5+P85mfmudp
T7tTR9rXF7tYX/qndod/E1e7xb+1Pe1Sb2nfU+wO7Q1xtVv8m7japd7SPrEH
DXB+2v7soX0qyGgf/3e8QQbub18wMmePIh/+gsNnady1d2nc5ZM/fH1v/7Ku
D3vmxdHeOz7onxd3+fT/3v+s8c/qP9p7x38P+++9ftb8Zt3f9Sf+7/fPmp89
vL4XLzjlxlPf3P0nL77/FycfduUJTbz9c+1dGm/6SpuGCx48ztt+D6/vlY+s
699YbdnsSte38uJon/X8Xtzl0/97/7PGP6v/aO/F97D/3vZZ85t1f/T/D98/
a3728PpeXOKaVH5wz/J/P+t1jP+CE4tpJ117ZPW/3ftfbK1VpZB+sLn/GW+E
/ffbq0n4axI3RX2qVTj+o8n2/Yjkp3HD1m7+8ZHaIeIwc39eV/1s4vvHg547
p0V941f3lfwQ46VVX9ZdfN64RiHiMNN/8it5Wt8fxna+/OFXf/3koVOr7gjO
/7H6fXP/VSucKd8Xiz/68LD9/90s9OWH/ox+8znQf3N/+PfxET/UfH3gB+3D
saWdF1211a7/8L7sh75/k+Pqy5/yuTkO+v3x9jL+ml/biXnlPF+RzK/pH+Pb
6y9atWFMrcrhjCTONffn+Pryr2zH60yT/C7jJ/Zzrshfn4z5PxLjynEel4yv
lU/MG+cR82faL/vr3Zed2L5meN3pZZ9v229XcO4F1TY/dpbN71w87skW79Sv
F9520t+r3nD+imBTqzdWvPewzZ+Sny47ufPFDz1VK0QcZp6P1+V9cH07/stv
+XjIpIZh2T23d3vg2gXREYOvafPYvGp6/ahDu/iacW83DhFHmf6jX1HR+1e9
Ofjw/VL7n45DO1/+cOirV7Y6oXh7sGrhikaPhr8dl/qzXysPe6/x0KahL3+0
Gf3ehedonfTf3L9j0q+4sHj7A/VXHRrW/k/3DRs62fwB78t+aH3U3zCuvvwq
n5vjoPUlnb+646kq+1fz5tduwbxynjG/pn8v3/v6or2fqhyW/nTBtrajq4ZT
73nhu+O+js343HJReNGRh+4bPri2dtGmfouiJv+scFbJ2zb+ZzteZ2bSPhU/
dUI/EUeZ6/O6vA+ub/rHceU4Y3zN/Rkv7cI8Io4y7cUuoB3//Ra/wr741odw
IvN3sRuPWftBu4H8Wyq/T7tDe0G8n8t7EfmQuPBueLTkZ8SupfMzLm/FP5Jn
KJ8u76Tyf8K7sRsvWPvhy/8I70e0B8TJa7QbtCPm+Vy7GXM8iItdTuVHxe4F
X6I/ezp+YnfDoU68k8qPGntAXPyKmPJinh/nD/PkV7PmR+yesYfEW2M8x8Nu
uPFOKv+bkg/xC4ydIS68YuwIcbELwfWwF8QlvxfRzhCn/aDdKAUfE+f1zoHd
4f3k+tF5sCu0M8RpP3z5P+HdmHxs5he848v/CO9HP9IOAcf14jqwG5XBd8S3
43mPhN35FeNBXOxyKj8qds/2Bzjthy8/xudlXdPNGA/i5P13YTdoD4jfDnnY
ALvTG/JCnOfHsBu8HnHahQNhdx6BvSDe27V7EZ+HOMcT4xtyvIk/juvh+jHv
R5zz2QB2hXaGuGsX0us7+LvAh2e1Z/7NhzO/5b0/8j8+nHz5R6/P/FjG9b33
J7/+0evTPmW09+JZ/SP//dH+Z41/Vv+Z//qj80f7kNH/P37//8frZ85Pxvgz
v+XtP/I/Ppx8+Uevz/xYxvW988/80x+9PvNPGe2znt/bP/LfH+1/1vhn9Z/5
rz86f7RnGf3/w/f/f71+1vxkjT/zYRn5NW1fYJ4vWW+OMuqnYl/9FPknoz4t
zqgvC3z1ZeRnX36I8UNGfZQ3vwX/Pc6oz9M4yrTHenuUUT8WZ9SPRRn1Y7Ev
v8V4M6N+0Tt+qN8LM+r3goz6Pa/8ZI1P1vxkyQ/776tv5HV99XVYv44y6qdi
X/0U+SejPi3OqC9LrfMTf9utj0vV12E9Oc6oj/Lmt1DPEGfU56XqJIijPiDK
qB+LM+rHooz6sdiX30LdYpRRvxj58muodwgz6veCjPo9r/zo+Gj9ntS/perT
suQnq/9S/5aqr8tav6d/mlG/FPnql8g7vvow1HcFGfVdsa++i/zmq28jv2TU
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
kr8eOP5PnKf9u2jAx/88+OSG4Y9TGz4y/Ef7fji2X43jPXGeth/aZsonI9rV
Dud2XXXlPx75JXV/Hud5xP/B8flg7c8rHzs4PHvjM1Pv+NS+P5LXPwvHeR5x
5t+OOKff3Mtmrg0eOuujPoOW7E7Nz4M43hznaf8+r9m1V4dvlgf7Te7/6T4j
LX8Q5/H5OE/xPnt9d9Kt91UPLzvm1psvf2x5av3o7zjeF+dp+37TL5t/5m3f
BAUrbnjr6b9WSuE8fhXPk+dbNeeZ8Xd98ltc3uOtipeU2e//8f67uyfHf+R5
wN365HR8ru/vUX7Jev/BN1dc/O/5/zkk9PpXyb/i5Do1wT92fWBdr/GTpv79
h+jEf1w4o/ycfcLkb7u+Om7Oazuntq4TJ3VxdcOCM//T+tpxtv6lnRPfF+A5
rf2Afxn7+C9r/25W/cPivuv6vVS6V3hn11dLTpteNSxYF172+jfvWf8T45XU
l1SDn/dpKj5O8pdVER+/b/Cs+re/z33g1l6VT2D9Sqr+gf7dGy3HPzDtlN/i
ipyfZ9/vmPgfDcJvbu+97YzvK9LPSvlv04dPe7LFMdXDmTk/bplp/3T/YZfO
H/8nxL/006z9Pf1PT425q23L8PVeR7w064jVwWvN2+/u/4y1H/Tf6p898MyX
Xq4VJn6cXZ9K/K4jwso5v2Ze8EnOj7P24+Rpq1Z9PfPH6LTHz5iwYfI+4c/D
h770rzb2/fv/mn9rz+87ncX4K+b1iP/jzukvBbdtjmqXda28uEWt8M3rjjyt
XY+fTPvw/ZeWT1i2dzzjo2WzR99eJ+w/bvA5d42w3wcdNOmQP608rUnY64ln
mg5osyu4fe6CC+5tZv3fDq2vuqhw7dHwyzZGiR9n/Xv+nfTvNznJxZd3mOtv
P6lyt7bNtgXbB/y6/qHJ1cNhBaX7jb7E+h9fTqpR0G135XDgz9/0WFxSLXzo
i+/u2fTDfINPPPq4lo9tOBH+6W9xQOIHmfvPbHBKqw4n1Qxnfn/G4B9GVQmH
rjvlhdMfuMW0N/VpJXc+uGxrNfhh9vvDiX9YJz7ym25PPP1ZXfhZVj4Zv57y
l38v7Dyzdnh7zs/63fetwTc+/8Xll3T+y7M/pIA4/qeYvEMeIk5+Ia8YngFO
floLXjoJPEWcvELeIQ8Rz9pfSH7y+V/fgV9+XZvwyl3kGeDkpzs99bmMT0Pw
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
czCh7oNnj//Ryt+M9YXPv3PUruDi0ytfMG/1hmDdgvJhX5xh7z+sdpvb3166
KGjz1Zyp1Tf85ldW+eTWni2s/D294/F731zG9ZsGWJ+pYsbP3T+2JVify3OW
m+v/B/tVkvY/R0ke2sof45NBuX0LH0av5fKYdnypf779UVnfn6T++fx/2O/Q
Z7+TX64//DYu0FPizB9QL9tBT4ln7d+n/vriD33/o9b3vkj9hF5ST0V/gjHQ
y6+gp8Spf2Ohd9RD4odCf/tBb6nHcv3oROjlmdBT4tQ73/4n6h/1bhn0kDj1
17f/hfp3J/RuzUOJHhKn/t4Lvf0b9Jj4idA/6t0M6CHxatBf3/4w6qdv/w/1
j3p3KfSQOPV3IvR2BfRY9Q/zzDyneX7qL/W2HfUYOPVzA/SSekqc+km9pJ4S
p35SL6+HnhLH/nnv+3tVbz37y4OM/eXGT/fsL498+Tm3Lj69/7q9sz6Q5/vF
8n4p3f+N/WdRxv7f2Lf/l/rp21+N/Xlxxv5o7/oU9dO3Pxz7e+OM/b2hb38v
9jfGGfvLQ9/+cu53y9j/HGfsf/baR+x/jn37n7H/PsrYfx/59t9j/3mYsf88
yNh/HmTsP49868vUb9/+auwPjTP254e+/fn0r337w6nvGfubve9XmOfor3d/
s3//HPTbt/+X+u3b30399u0/xv7TOGP/aeTbf+rm79P7e6m/GftzY1/9DPXb
tz8Z+0vDjP2lsc++Gv397/ubY599p/5m7L+NMvbfxhn7b732F/u/o4z935HP
vlN/M/Y/hxn7n6OM/c+Br/6N+X/f/l7qb8b+8Ni3P5z67dufjPUBb/yM9YEw
Y30g8K0PZH3flnqbUf/prR+lfvv8a+RPwoz8bejL31K/fflx5LeDjPx26Mtv
8/3fvvw+8rNRRn429OVnsT4QZKwPhL71AeSPooz8dZyRvw4z8teBL3+N9ZMw
Y/0k8K2fUO8z1g/CjPWDMGP9IPCtH9B++/LjWF+JMtZXQt/6CvXbl9+nfmbk
30Nf/t3z/ZwCM37QO1/9JPXbV/9I/fXlt6ifGfnR0Jcfpf768s/IH4cZ+ePA
lz+mffblz6mfGfnPyJf/pH5m5N8DX/6d+pmRH44y8sNBRn449OWHsT4RZKxP
hL71CepnRn4+yMjPBxn5+dCXnzf668k/Uz8z1i8i3/oF9deXPx/q1Nfl2R8P
/fTldz3ftyogzvdH++rzqJ++/HQB6x088Rn1z5ffRf7HG58ifxT68rfUP19+
GvmP0JefRP46zshfh778NfI7cUZ+NsrIz0YZ+dnYl5/l3778PfJjYUZ+O8jI
b3vjZ+S3Y19+m/6tL//LeiZffsGNT9P5Z8q7L3/qyne6Ps21V2n/lPVdvvwv
5d8Xn1D+fflTyndGftQbv1H+fflfyr8v/0f5zsgPx778MOU7I/8ZZ+Q/44z8
Z+TLf7KdLz9O+c7IH4cZ+eM4I3/sjS8p/778KuXfF19T/n35Xa5P+PZ3ufqR
3j9hvv++85PHr3ypPOg7oE3RZ6+m6xt4vB3OU/zkqSs+XXF3jXBJ6TOv73f/
jyn/8XscPwXn6f3HD1r3wlV/qx8O/fb8BccdZOML4s/jOM/T649rUTrxnzfX
Cdsd+P+x9uXxPlXd/5fuRYhr5qoQEqHLlSQ62/TkkSZlCNFkKklKynhT+Vam
ChWlpAwpU5eIdLbhMY9FFDIPmeeM9/763bPW2n3e567f8fT93X8+r/tZn73P
PntY672mvfbnmzLSxedye/5+Fv2O6cw3Hn2pSdN+VyqbjhOmfNu8eYXw/NH3
beh3SO91JSXPyc6nvLK9Vy68d8vF0Pzw9/w7HF/3f1WafbTAYq/jh5UHD3g+
IdR/B/r+Ffodjr96+wZlVz91xk/rmVinfpfE0Pvx9/w7fL5JG3qyznPfeylr
T/WvsSn8fP7+Xvod0zsQ/Z25Pd+vOaOkmZhUs/2B9k5/Zfok+n4o/Y7plF8a
hW+slv9I+W9qfDjlv1kt/y02/j6cX0j5ger9IZQfaLX8QObPWn4k5X/4Eflt
Vstvo/wjG5FfaTX7FOX/eRH5fzYi/0+1X1J+jXo/IeVn2Yj8U6vln1J+kh+R
f2ki8i/V/ADKb7Ja/mVs/H44v5Dyt9T7hyg/1Wr5qY/FxPeH8yMZn2j5dZRf
ZSPyq9T4ac6P0/LXKP/MRuSfqfdfcH6cln9H+VM2In/K1/KneP9H5O9ZzT/D
/Ubkl3kR+WXq/cZ8fjT/H+U32oj8RqvlN1J+n4nI7/Mj8vtsRH6fGl/P9b20
/DXKf7QR+Y/q/Th8PrT8Oz4fEfLVavKV6RH4wmr4guSfjZCPVpOP/PwIfGU1
fMX16CLwgY3ABzYCH1gNH0h9ov83vrQavuTxReAzG4HPbAQ+sxH4zEbgU6vh
05QORfPc+nq6Wn8A66ZifQWlvncc05/98rkHRjxem/yfRW3g/wzjj+QWJ2v2
27fLq79/UXGvQnahp95Zv+q25eWMzV0qbmnjvJw/6fTPhFXf7zpY3/DvuB42
02+64cce+ZOK2HFKfSOur/eLUp+wR5N2nz3c89Jf53pJrysNd3q/pQzL1X64
Gx/X5+Y3Rv289N53pn1+fy4zvHBG73IVLnm5n8p4qHiSWz9qlhr0c5Tm0+Gf
RzbUyViSGmduzdOqbE3zp/d814lf5cjm1qfClnuS0pbFmaHDtidPfepPL9cf
pT8Zvt3ZN6Lqq5YdWyWpyZNVTfU7Es6VOFnQVAn2g8wv64dTevS23UZc8I7G
v5F37VRX3y+IWylta2S2P+WnHbYzRuV155f534P/3lNy94wN3hc/ZS878Bk3
vxIfptRneo72Dz2H83RlfXn/afMv8WG0r26jfYb7i/cV7zOml6P9w/VPhkD9
E95/vO+4P6Z3p/3D+2Yt7SPcf7zvdkJ93+tp/+ShffMu7SPcf1H39/G+ymgY
7DPcPzlp34ygfYT7rzvtO96HMj+0f5Jp36TQPmL6eqjPuFqpz3iE9tV02me4
v3hfpdA+g/1pv6R91YT2GdMZH+bcumlp/m/zmZfunmp33+Tud+L9x9/not8h
veHTpTcNTihmFgxZ2ODVZ9z9REzn7xvR75Cu1Y+Jqg/N49f4G7fX9h/T9/f6
onbNAke8yfO/mf55rYwQf+fv99DvkK7xZ7EfKueL6dr+jJUn6vn1dvY4cnri
ts3eC1OzvXXthGtCdP7+EP0O6Zd2mEeL5k0yFd/I3nRYL+bXjn4Lfc+/Y3qw
75LV+ANcN1zf0uOTi214q5a8N77f5W3dz+f0q+nnO/hLDerKJpqATzj8UzJz
3Y/5W9+8fOj9y4nm589O/55vprOfDt722MUBl3PbMn80e/rwmILmj8r3Lele
ydUn4/2S2tafUnVrdron1OmXxN+stv+IPxqNP0bV571YuuCl45/kNC37dV55
bGlec0uOCcPrjXb3P1D9Baqrda15KbPektO/Gb8nHWxeZM9t15m6M1vPL1j3
kNCj6n/fVXjouRVVW9jKP7/b76ud1Q2tt9BZfi0fZkb2vrGgeWPxNW9MrXUJ
z6+vnV9eX03+8/6I4t+JtO5daR/g+h6idS1N64z7YyPti99on+D6d6R1533A
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
+i4P5rFvps9o2cc6fPP5g+nzuo1LMF9kfp71F3ybb+7F7C7+EuznFu3ne4t0
e/I/FU96/2nx6PcjB15jv3vi3Wd6FbsM47tJ+AfGD/+b7muhT38C3D8ZxN+V
MYx/gvtkikv74PMv/ZPt18B/gudn57gHihN3+GXG/2T0eHD3Uq/IU2mVCt2T
yzZr8ED7V6s7/XDGhYzn4+Jc/PGKNrbOzOlu/VtNzLbvvfbZTcvfLww8dO6C
/3PzcwnV4939HfO7FRp89JNEUzy9dJu1X27xg/4d//rl5t7TBs68RvjPrEm3
2O2vuPjJoS88MfmzQnF22IAd63peKGCnteies1RrJ/+WTj4xK/HaRDO27h8n
s6393U+9dUmOHHscf1ueb1+Nb0f9tX+IL32xoXpykZZufse++na/T+YXM48k
7qsxYuIf3nNzRowc84uL7x06o3jrPWPPixy+btm+Ho9+4fSLqg9P2tJ4YiH7
012//lRyTglb9OT+PB+dc/GZux5/rs+VSvv8XR91KNFiUV6bY2Tr/zx22OGP
l5/plG/A1396h4e32dSiZTZb7roPf1wwysVfNdx8x4UbfixiPiC+Nb/HicFj
t7r66OO6+MP3jvnBq/HEgK6fjM9lU022+svmu/XLdzmjUVxqNcM4pGLFx09t
aVnFxo7/GjN8/LKD9zY4759p6Hf75ic3/7szx3/We+HgtDabK2e3c4u+95BX
1On3pZ9uvGDCeye8tgc6nPj37Gts70Lf5f9wutv/XXa0X7b36TLCv46UTm3T
+1UXf99hxTW1m6eke7cPvrD7xkfS/U5tz5ZfV9Kd7y8nJc1PmlzC3NVq3N1j
zpz0gv6d/lunx6HFC3sdlPtX7v7sjbNTBzr+/9WH24cdqJfNfrArV49a7Qra
+V2mXax/0u2fyPvfiZ8xDsL4M9AvDOoXcH4tnl/lfsJUWR86r8znhtF5ZjrH
r1WluFyMXwP/l0H/F/OjjSuea/7ek3VgHNH3c2F+ndzjQfRA35R7/VKZDzE9
wFfCHym+rYTQX7m/wscdb7nW1OrXZEXfyWVM81FmQr27nX08wC8l3f1LRS7/
+M0qVx+C9Apb+fiQ1c2/qWlWt+wzu0lXp1+yf2foyOvz3PFTOYP+nQB/lRb+
1CC73+nwKWf/W0/+pUu3P1BzZs9KZhb4lxjfBP0XDuGblaVmXfvjmBtM6+C9
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
/7NovLI//lVp9tECi906fVh58IDn3fmv2r5B2dVPnZH8ym97Jtap38Wdn15X
UvKc7HxK2pftvXLhvVvc/kyj33P7atQf0/n3TOf+mM7jYfrjNF6mm7ShJ+s8
973TH9ae6l9j09/8J/Q/t69Mv2f6kLk93685o6TM/8Skmu0PtHf2af5f4g/p
90yH+OvQ/aGg31jUb4JPvX4V6Ace6geAb0P3w4B+YFA/AP3FR/0F8H0In4B+
Y1C/AfzvI/4HfGwQHwP+t4j/QT+yqB+B/mZRfwP9yEP9CPQDi/oB6E8G9SfQ
D3zUD0D/saj/gH5gUD8A/SeEr0B/sai/gH4XwpcQ/x+6Px3yIyz61yF+PJQ/
B/H1HsbXQ3y3xfhuiK8P3R8C+QE+5gdA/LvF+HfID7CILyH+3cP4d4gP9zE+
HOLfLca/Q3y4xfhwyD+wmH8A+RMW8ycg/8DH/AOIn7cYPw/5BwbzDyB+PnT/
GORnWMzPgPwBi/kDEF9vML4e8gcs5g9AfoXF/ArID7CYHwD5FRbzKyB+1GL8
KMhfi/IX5J9F+Qf4wyL+APlvUf4D/rGIf0D+W5T/ID8tyk+Q/xblP8hXi/IV
8JdF/AX4zyL+A/xlEX8BfrCIHwB/WcRfgC8s4gvAnxbxJ+Ani/gJ8JFFfAT4
0SJ+BHxoER9CfKvF+FaI//Uw/hfiT0PxaxD/azH+F+KXfYxfhvjc0P0HEL9s
MX4Z4nMtxudC/KrF+FWIz/UwPhfiV32MX4X4aIvx0RDfbTG+G+KjDcZHQ3xv
6H5tiI/2MT4a4nstxvdC/LjF+HGIb7YY3wzxvwbjfyG+ORTfCPHfFuO/IX7Z
YvwyxH+H7kfh+gniH4f6CasIz9zZoWieW19P9zT7TRLVV42L+Tvh3dLiZM1+
+3Y5//j+RcW9Cu79fqJ7SXt++dwDIx6vbbdn2lfd+Uq9s37VbcvLmeSEVd/v
OlifnyPrs/O526cWm/yzV3DYlu4f3xpvCwSf0t7mLhW3tHFew/3Q/RayPqtL
Lel1peFOr3uTdp893POS/1vKsFzth7vxpVI9iltu+LFH/qQitjTUNwrqrrr6
A8H4HP64NU+rsjXNn94jG+pkLEmNM893nfhVjmzh+MvLDYP6qxg/NXLY9uSp
T/3p3bLlnqS0ZXEmxx+lPxm+3dknhhXO6F2uwiWv9N53pn1+fy6T+6mMh4on
Of64ev3ZhO8zDnjrg09/zLJs5WeMc/bbaT16224jLjj/ePwbeddOPS3tb78j
4VyJkwVN5bFVkpo8WdXUCfaBzF/jf+8puXvGBsHXX/6UvezAZ9z8J2e2P+Vv
C9bVzjpsZ4zK6+Sn5IXF1p+X5+fcumlp/m/zCT5+6e6pdvdN7v6wF+n/b4ie
m37PdK7fAc+R9rwvmI77q9HTpTcNTigm9AVDFjZ49Rl3/xX/nuncH9N/pN/z
+P5F/cH7y/1JzaA+FJwfD88Pn7/Yc8t/J7z9vb6oXbPAEWk/af430z+vlRHa
f0zH/TeRfs/rs4/6YzqPh+kVaLxM39njyOmJ25x//4Wp2d66doLz3/L/3J5/
z/RLO8yjRfMmyftVfCN702G9rpP5r0T/c/w+/57pvxE/eY74C9+DrIzfx/HT
RKYyf0P7BPODcsQf3oP6NVuJnzxP/GUp8RumM7+iT7uV+Fns+u73eV8xP8P9
x/wR9x/zi4rEP5ifMJ35BfMP5idM7078ivlXReJnuP8yiH/h/ovlh3Fxwe+c
/aMm8ZNbiL+kEL9h+mHiR22IP00lfsV05mfE53zmd0xPI37zK/GfFOJHTGd+
Jfk5xM+YDvzDR/7B8jB4TnLofoRnF/bMX7MN87u41GCdHf7f+ublQ+9fTiS5
dsz/+bPTv+eb6ew/waetw/XF8XyW+aPZ04fHFDSDtz12ccDl3PZw5fuWdK/k
6pfx+l7e1v18Tr+aGQ7ry/ulWrB/LPK/+mPjdn7YKL85tCj76VP/PunRp+Of
bf0pVbdml33XIdM/6/TTlv06rzy2NK+5WLrgpeOf5DQVckwYXm+0u58Lzo/B
83P9weZF9tx2nei3d81sPb9g3UNCD+plXSt5Ub0z6yw5/X7Wa7bRpHGFDH1a
2i/yfsuHmZG9bywo6//m4mvemFrL3W9V9ed3+321s7qpU3jouRVVW5D8Spb2
wL995N8gv3yUX8C//biYvxD/85H/8f5gOu4P4I8+8keQnz7KT8CHPuJDkJ9+
CJ/F8n8f+T/ITx/5F8gHH+UDynXEDyD/fJR/IN98lG8g/32U/yDffZTvh+g8
8vm8ic4r05nf8vnMA/jtJ+IHzB+2Eb9gOt97XYb4A+6fxBh+ExfXNYYfhfCt
QXxbns4rn99WdJ7l/YgfMH9oRPyC6R2JH/C6vkb8gunFaf1vI/6D6/8inWc+
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
hyzH0f/C89uB5nc/zC/7ZXjdUH6QX03WvQr4X3j/cb8dYP8dI78M291RfpDf
wLDfoB34Xyh+w+tBfpU94L9hvwz7aVB+kF/FXCK/ymXwv3B8yF7qF/03Bciv
Ek92d/SvoP3mCvhPbiW/Dj/3T/DvoP2wFvhXMn4O/D7s9/gY/D/kV2G/j+kD
/p0Z5Fc5T34J9K+gfQj9J+zX4XXpCf6doyQXOL/xCfCvsN+nH42rLvh/2K/D
74X+HfbL8LhQfpDfSPww6H/hfJH3ya+C/hvye1n2e6H8oPWXdY8H/8uN5Lfp
Rf2OAP9N8Bny79v/Nz2HSg/pH0BH/Mt01qNC9X2y7l8dP9p/iB531f1jfeKs
+496///t+KT/5pl/E36Aex6jxq/SWR+JGL+un065qvXD8df5/zV+tF8p/evr
81+urzL/anuUH6HxN4q1b6Rk/i3+gefverBPKf2r+wvtP9R/navtH/Gx0n/U
+6vjK31145P+x4z+v39fCf0lsC8p41fpNP9R86uuX/arWz8c/w9XO36UH8rz
TUT/6vqg/FDWJ2r+ha7EjwldiZ+R+VXij6S9Ej8kdCW+TPafEp+F9gmMr5L+
lfgpD8cH8WXSXomfuur5UeLTXP9Zxx8JXYlfc/pB1vFV0l6JX5P9p8RfSXsl
fk/oSnyW0JX4LHm+En8m7ZX4MqFHvb8SnyfPV+LvpL0SnyXrq8QfSXslfkjo
SnyZrK8Sn4X2CYyvkv6V+Clpr8SXCV2Jn5L+lfgimR8lPk3aK/FHQlfi16R/
Jf5O2ivxa7L+SvyVtFfi94SuxGe585N1fJY8X4k/k/ZKfJnQlfgynF+Mz/Og
f4y/k/aK/UfaK/YNaa/YJ4Su2K9c/EHW9h9pr9hvnH6atX1G2iv2K6Er9hl5
f8V+Ie0V+1dofsG+If0r9jED40P7Hr4f2sdkfhT7jrRX7IM4frT/CF2x/8j4
FfuWtFfsVzi/aL8KjQ/sf7g/0b4n41PsP7I+in1D+lfsE0JX7FeyPor9R9or
9pso+4y0V+xXQlfsM87/krX9Qtor9i9pr9g3ouxjBsaH9j15vmIfk/4V+w6O
H+2DQlfsP0JX7D8yfsW+5fZv1vYroSv2K6Er9j/cn2jfk/lR4jsdfgZ8hv7X
4LzlIb/s3lB8ayf6nn+HdNYr2C4Rsm9ExM+ifoL0KPyO/mXl+cK/kR4bXzDj
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
4prazVP+widtz5ZfV/KYV2Pwhd03PuLWr2GPQ4sX9jro1fnsjbNTB8aF7Ptf
TkqanzS5hOmd2X9eW6fVuLvHnHH5vZM/3D7sQL1s9vsu0y7WP1nIjNqVq0et
dm7/K/qN0BX9Qd5P0Q+lvaJfSHtFfwT/rn5/jKI/Sv+Kf0Loin4l/Sv6lbRX
9D9pr+h3Qg8+Q/qt0BX9VuiKfiXzp+gH0l7R76L0J+g/pB9J/4r+E6X/yfwq
+pH0r+gP0l7RH6W9oj9G6bfSXtEf5fmK/iTtFf1J6Ir+JP0r+qG0V/Q/oSv6
n9AV/Vboyv2BQlf0G1n/woSbLhGOQvzUgXCJiY0/kP7J3+YzTgq+d/jIEm5h
HPM54BfFfyf0Nwk3LSEchfiJzzvjoP/2/sK5hIsYJyE+wvtpss4fKWwY5yC+
YVw0i3AS4iPBPYSDkH9sJFzDOKcV4JuHCBcdJpxUGPDRZMI9jIOQv0wlXMM4
Zyjgm2aEixgnFQJ8lI9wyxDCMYhfcjAuIZyyC/DJSMJN6wlHfQT4iXEL4xjE
L/0JVy0nnPUR4CvGTYyjED8xbmEcg/hlLuESximIT74n3NSAcNRHgJ/OE25h
HIP4pRzhqj6Es/4AfMW46QPCUSmAnxj3MA5C/vQM4ZoOhHMQ3zAuupFwUhvA
R3UJ9xjCQcif5hGuYZzzAeCbPoSLJhBOqgv4SLFfyPgZ13B8GetpTFf0D3l+
lRi9Q86ntI+6307xrwv9Z3reBvo+Ge5niLp/FvnXxhXPNX/vyTpCzwb5A3g/
R4CPmO+VCN3vHdjLbgS9i/8Yf5Q004pc/vGbVfnD+VtUz75VbJ17ef5KwjMr
M+vcJ5lbjw9Z3fybmkIP8FFp0yC73+nwqSKh+7vFH05xQENHXp/njp9cfce1
4N++ePsDNWf2dPmly0vNuvbHMTeY3a+99Eu3JgVt82CcMn7EJ8My+3f4Oanc
jnHxK8uZ+6b0zzevwY2W4rFk/hAf3X/td+l91rn1H0i/n3VqwJLUjNLmcub4
agu9NY2nXMXN1X4pHm9KlXzn8qrzzr700q1jK318WykzdOhjf967o5CleXD+
T8AvG+cfrzK/r+v/07yfPlBqalHTffsPtcZ9n8M2bx93Q4O7nf2G8dMo4ks5
O03/5O01bn7592WGxf/2/svH/Pf+mJ94w10On19H41mfub65zV0lqpZqUCBZ
6G0z8Utxc6RO3yk3N8oT0r84foLj3HJkPt+dD45L+4jiN2pn9u/u72iUib/K
mC+Ppb9QtWbx0P3d763xF3Z/PsnQe9hCc05NvtjFxT/0ILz0beb6JJvmIztd
+WheI+lfsY8KXbF/C12JTxW6Yh+X8Sn2X3m/OPrT7h9Q7MPu/bK2T0t7xT4t
dMV+b2P71+/HVOzDzj6XtX1U2iv2aTkfiv1X2iv2W3m+Yr+V9or9WuiK/VbG
p9i3ZX0U+6jQFfu30BX7tryfYt+1seML2feFrth/ha7Yf2V8iv1a2iv2a9d/
1vZrt/+ytt+78Wdtf5TxKfHHQlfwu/SP9o2qeD8T/RGfYD1N6B3ovI0mnIDn
N6r+yTCw/24C/MC4YCLhBDzfjAteJJwQF/P3l35AuOAHxglwfteT3Kd1treB
/Gfc0ItwBOIHxgWFCSeE7h8kub+OcADK/3yEGxhHDAf8wHK9JMl5lO8stym+
z14C+b2HcMUKwhmIL8qQXG9G398A8p3Pt+AQwB8UX+mvoXOP+OJ5kutjSc6j
fC9Hcpu/R/nNuIJxBuILluuJ9D3Kdz7/Nen8/wL4g/nHZuIfOQBfCC4gnID8
geM2OY4T5T/HXdYkHJEL8APjAsYJyB9mk9wnOWFbgfxn3MA4ogDgB6U+hbRX
/FNu/2TtfxG6En8tz1f8M05+Zv6F/DPSv+J/ErriX5L+Ff+SzK/if0P/FPrX
5PmKfybK/yDtFf+B0BX/UpR/Jsq/Iv0r/pMo/5L0r/hPZH4V/0KUf0rGp/gf
hK74r6L8b9Je8V8JXfG/CF3x38nzFf+M0BX/jPSv+J+ErviXpH/FvyTro/jn
/Nj+Q/43eb6Sf+bOd9b5V+CfCeXfyfOV/CwZv5KfJeMLPkP5ZfJ8Jb9Mnh91
/4ySXyd0JT9Lnq/kH7n40qzzh6R/Jb9M2iv5WdJeya+S+VPyp6R/Jb9M+lfy
p2zs+EL5RUJX8tNkfEr+kdCV/DWhK/l38n5K/prb31nnXwldyd9z+yvr/Cx5
fyU/S8av5J/J85X8Mnm+kl8mz1fy82xs/6H8Oxmf4r+Q8Sn5V9Je8W8IXfFv
CF3x38jzFf+MtFf8M/L+UfWvFP+UzL/i35DxKfZ76V+xvwtd8c/I8xX/hrRX
/BNR/geZH8U/I/0r/gcZn2Kfl/aKf0fGp9jvo/w/0r/iv5L+Ff+P0BX/hdAV
/5eJHX/IvyF0xb8hdMV/4/zvWftnpL3in5H1Vfxb0l7xX8n8K/mF0j/iA+QP
QTzsGS/wT1wI539n5jtuJxzP54b/ouu7Kf4NoUfdL7clUz4f8gL/REZIPwj0
5lPe6kw99qLIe6YH+GE22RnC+d0dr6QVOl0ywTy7P63y7CbLvQqNf353didn
n+B4xbkBnzbP9z69JXG6k6+PP9t1dVyl1f7r2f/14t1P5TK/Hh9798tb9fzf
5KRcZ8cvdPrnzrdzPFhgQZrXP2fG1tnZc5hBOeMXT/pWzz/n/pj++7Hb/yh3
z25/0JzV4zpVz2NOPdG293VD3P04e596ue9bj57wviv01oOzDlz2VpzqcjRp
tzufKH85z1Pe796EVmsPHvUObbg0blPTdM8eiR894zZ3/uLp93xucxb9YcuW
4hlCX/Rh501rbjjvbd4x6s9uZc96DapMWtdstrufOpCfJ8lOcCl0/mpsXj4v
z9FdXlyONb3alM9uPi+Q3HvqTsefUigemfIn7Yjz774+abezD3TPlP8r/MBO
EL7/p3pm+3N+WqadINHMInks+yvr/Fx5vpKfK89X8o8hvlWvnxV1v5iSPy10
JT9X+lfyT6W9kj8q41fyi4Wu5OfK/Cj5tfJ8JX/WrU/W+cXSv5I/K+NT8kul
vZKfLM9X8k+FruQvy/wr+dcyPiV/Wcan5N/K85X8bWc/yDo/18n/rPNz5flK
/nHIvwv5xdK/kl8s41fys+X5Sv61tO9Eci2F5ByeT5FrJOfiYv6i6wsp/nkb
27+zn6H8m05ybTPLOZRvJNdYzqF8a0hyrTHJOTx/NG90bgrabiC/upPc60Ry
EOXfAJJL+0lO/Q/IpzdJ7uwiOXQS5A/LRZaTW0A+4vmpDvKRz98iOn+vgfw7
THLpCZJTi0A+zSG5x3JwOcg/lksLSU6hfOLzkUHnA+Ujn69s9H08yL+jJNdY
zuH5YbnFcmwkyC+WeykkBz8G+cdyjeVcqP4OybUUlnMg3xT8Js/n/7fA75iu
xJ8IvTN9PynW/yT0GpfXvNtl7CWvY5/kOj9/cTJ0Pp+m7+vQ75DecN7edXtf
y2u2Xxg1ocSbB0Lj20bfN6Lf4fNbv9Skab8rlU2nCVO+bd68Qmj8s8pf+O7V
ngVNjVL7800ZeTks36md9AP0tMGHP372iSJm9NaWG2rdFB/qvzr1+x09B8c3
htpxP0iv2b5B2dVPnfFn9UysU79LYuj5j/+r0uyjBRZ7nT6sPHjA8wkhOrer
Rf0g/dUrKXlOdj7llem9cuG9Wy6G5r8j9fsuPwfoZaldf+oH6SZt6Mk6z33v
paw91b/GpvD4atD3z9LvkD5kbs/3a84oaSYm1Wx/oH1iaH4n0ffv0u+yjo8I
6UdyPhT9yMa21+uTKv5hoSv6iWofI/4j/FfRj8B+GdI/5PmK/iDzo+gP0l7R
n4Su6A8yPkW/cucja3zu9nfW+pfQFf3K+fey1i8Av4T0S3k/Rf8QuqJ/yPgU
/Umer+hP0r+iPwld0R+FruAjoSvxjULnfc/+Adz/Cj5x/sWs5au8v4KPovCH
zK+CL2R8Cn6Iwk/Sv4IvpH9F/kp7BX9JewV/ReFDaa/gL3m+gj/c+maNP2R+
FPwh/Sv4SvpX8JP0r+Anaa/gQ9d/1vG3Qlfib4SuyE+hK/LPrX/W+EHoivwX
uiLfha7gH/f8rOW70BX5KXQFPwldka9CV/CV0BX8J3QFXwldwQ9CV/Cje37W
+ELoCv4RuoJvhK7gP7c/s8Z3Qlfi34WuxFc7+ZZ1/LC0V+J/ha7Eh8v5VOKr
pb0SHy10Jf4Z7LvZMT5c2ivxz0JX4oMd/sg6vlzaK/HDQlfiz6V/JX5e2ivx
54bpSvy0tFfi74WuxFcLXYmvlucr8ePSXokPF7oSHy50Jb5e6Er8vNCV+EHZ
P0p8nLRX4tuErsQ/yvoq8YPSXon/E7oS3yd0Jf7R9Z91fJ+8vxL/Ju2V+Emh
K/Fx8v5KfKXsHyU+VPpX4iulfyU+UNor8aVCV+IHha7ED8L4Q/GR0l6JfxS6
Ev8odCV+VOhKfKjrP7Zudwhfc92Ek/A7pufcumlp/m/zmZfunmp333QilL/8
In3Pv5sK9NQ761fdtrycSaK6cNie6ytwHW6kczvuB+mNni69aXBCMbNgyMIG
rz6TM9Q/n0eu743j43bcD9LR/4L939LiZM1++3Z5DfYvKu5VyK7Uz3PxUUjf
3+uL2jULHPEmzf9m+ue1wv7L+tRvMj0H6ZOp3RHqB+k7exw5PXHbZu+Fqdne
unZCOP6Bvz9Mv0P6pR3m0aJ5k0zFN7I3HdbrutD8VqLv+Xc4f4hPanYomufW
19Oj5i/k/+I6lyWhfuNGus/290z/VmnT68vnHhjxuOOvUNfeYH173lclaJ8l
J6z6ftfB+tL/8lJLel1puNPbmjIsV/vh2c3zTdp99nDPS87/mrtU3NLGeSnu
ZL/P/TG9P9THqnjDjz3yJ7n6SJXytCpb0/zpde868asc2c55j2yok7EkNU7a
B/Uaj9I5CN//PnLY9uSpT/3p5fij9CfDt5/1Kmy5Jylt2d/aw/671DC2fuOw
whm9y1W45OV+KuOh4kmnvFJ735n2+f0uPmFaj96224gL3pH4N/KunXo6ZJ/G
+vAroT787XcknCtxsqC5K1h3/9axVZKaPOnu52r87z0ld8/Y4H35U/ayA5+J
D/tfM9uf8tMO2xmj8iaaIB7Q8XfeN7fEng95Pv1e7o3vCvuDJlLsE0mwv7bR
uqfRPugG60/1d8woWueysL4FaN/9QvuwAOw/5G+4/yg/y+d9hvuL1/1d2ge3
wPp3o311G+2zh2F/8brzPsD1532X0TDYh7j/kD9mwP7ifTOV9lEo/4/2RQrt
kwqwP8bQvlpN+2w17C/eN41oH+H++Zb2TQrto19h/yjyx8XvZS0/VP88tlfk
p9CDz5B8ELrCf4WuyF+hK/zZ2X+zls9CV/CD0BX5LHRF/ghdwR9CV+ST0BX5
6eL/spaPQlfwg9AVfCD09STXNtDnrMz95vzP2968fOj9y4lm42enf88385wf
yC9nv3x2Yc/8NdskmoAvsF+f//7Cf380e/rwmILmcOX7lnSvdMV/Z9tjFwdc
dvfbBZ/r66yi/XMj1BfG8315W/fzOf1qQq8/Nm7nh43ym0OLsp8+9e+T/uHg
M4TfQD7K81v267zy2NK8pkKOCcPrjT7oXyxd8NLxT1x999S2/pSqW7ObDpnx
Lb97yL8U/in06w82L7LntuvMXTNbzy9Y91DIfnhXZt2ta03fzLpbG0P598uH
mZG9byxo3lx8zRtTa10K+T/TXrONJo0rZEh+Wfpf6FV/frffVzurG1pXW6fw
0HMrqrYQ+iFal5tonYbA+vxM6877oASs/whal7y0TldgfRJpX3SlfYL7Yy3w
H6x/fTOty6O0ThdgfRR8InTeFw1on+D+KA7n/zbYH51p3V+jfYDrX5vW9QZa
Z9SvetC61qV1Xgvry+vK64z603e0btVoHQ2sH8kXO4v2wSxYf+V8OPsQnXvO
y+D+mL67b8WV1WcXN38u+LnKshW57Z7Hn+v7a/JSaa+sj7T/IuHIbVPHFbBD
vrj1qcsnrjf8P9ODetRJxL/ZLuDu11HwpbQv3bBL002NVniDJ80tUC9vgum5
alWTXm86fKLgC6G3GPTHpkUbrzEzv576xrZ2v9B4Ljr5RPW+ad1D9qO2+Ud3
b3L+uHfk+MyRxRpd8XI26/HE8jPOP1J0383N4mule7nKTz/bveAxr0Twvyo/
8Xwv+mDZe+83K26+O5l/waD43Pb+6W/Oql9qlbR/2Bbvfbj2NTZ/+r0nlhwt
bPqVLn/HE1vc/TMKfxO6wj/k/RT5IO0V/iLtFfkR0k9BP5L+Ffkh/Sv4WOgK
f5X+Ff4q7RX+L+0V/i704DMk34SuyDehv0XnZjydm/FwfhT+JvvjHJ9bOsc7
4Pwq+pf0X4LO5Yt0ToPv3fmcS+eGz9GLcH4U/C79v0Pn9no6x3h+eb75HOL6
5KZzVYTOWRE4X8foXD5K5zQBzifGN+D6JdK5eoTOGZ4vPpd8Tu+F86nwbxP7
fGdfqEK/Y7py/r2I8UH/7v14Hpmu6BdCX0/nZRt9f+HY5h/njLxH6FifFten
P63fC/TcexodbTt+0INC30l1Yal+t9/u1I5V7bffJPTKvzz++5wqJc073eu3
2DAvf8i+XjrzPBWnfce4hf9U+Sj9K/hH6Ip9RugKPpL1UeS/jJ9HyvcnFAf+
p+ADeb6CT6S9gk+EruA3oSv4TOiK/JHxKfYPoSvnR+YP+fufsP9w/l6C/c3v
W4T2Kc4f1yfeRfuwPew/lP+NYf/yvuR9ivPL+7IM7dO4mD/Vvif9K/hM6Ar+
ELpi/5H5VfCJav/F863gL6Er+MrZ37PGVzJ/Cv6U9gq+lOcr9k9pr9j/ouy/
UfZBGb9iH4T9G7JvCl2xb0r/in1T6Ip9V+iK/JT3V+x/Mj5Fvgpdka9CV/CD
PF/BB9JewQfyfgp+kvYKPpLnK/Y96R/vx+DfMX3l5w+lnsl70lu/6ZumjWtc
DtkPv9nS9LclGXu8YFw8b/wXri+P76fIV6Er/E3oin3SxV9nbZ+U8Sv2V5if
kH1V2iv2VWgfsh8Lned1Bc0zjo/ndQrNM84v/z5n7DxL/wo+EboiH4SurJ/B
58fB75iu4B+hD6bvq8TKH6Er+1PGp+xPbf0YPwpdkc9R6+PoWeNLofNz5f5q
eL6CP4XO/xeOlf/wfiH8HXr/NTH3Yrn9w+Pj94/9neuf7oGwfA8E01seyPPG
6k8TzeaH1rx9T87z/uLy1RqcvdPlnyfZwR81K1/EpMy/Y8cPszb7wT19Lr+3
4g3FdwxJzmVeaL3/6PTEBLsoM099ubTn+8w5bhXz55rSfX5X6N6LoB6z4198
X3hliov9NvOeMIcPUyBvj/MtmJ427tCJA0MLSN0yrpPH9I70/X7OK6J6dUyv
Af0vh/75e7tyRcWkz8pYioeU9p0j+ud4enoPHr/zb8fWzZN6i0jvqNBpXBL3
z/GaMj6oq70ans/PpXm0NH/y/px/xfc2YX2eKnRfG9c1C+6TdfZZrqdN+8AG
92E7/kD7kveppf3p/BvBvjO0D+2CYP85fBTsW97HdM+ku393/097Sw4zBcyY
L7pUqpf6V78bR46/ZP+U97+85+VVH8wpZi4O7P3AoOc3eJWHdEsevtb59z5/
fcKW3CMSzIXTrc5Um5bTzhv48fZav1oXn5apf+3162TqXyXs101bHez9nbtf
u13a++VnFCls+HfHK03cu/Adh1/uonbxqWcHFdlfwRaY2fzo0bqO/3e/9+LG
MyXSvd2BnLAPk5xg+hMN72739ghXN+gw+YmY/hbZr19ubVpXqVDckj9B+r97
c98ROZJcXi/LE6YzP0tPGLfw+jGlWc+R9vzc2im2W9rU6y35AYVO4zb0Hj6N
X/qvFbSTuAv2NzKdxm3oPcQfwvQrwbhE7jEfZjp/Xzd4TxsfvB/6L70ng3m0
5M8TOq0rr59H6yv907oZWkdD6+fGT+1oH1haf5kf2pe8Ty3tT3k+7TtD+9Au
DvafzN+JYN/66cE+tlWD/Sv9B59SP5W+5z/R/3xNfijtU5nO96uND+5Z8fF+
FZYfS0huVKL/mc6//0Jpz/ea0D0nofv500mu8D0O6XC/0mD6fX9qPxjad4y9
PyFc3zT2/iibAfdHsXxguRCqjwHtMf+9M7TviPHbsfV1LdZnhfqwvsgRokP9
k9D9vCw34H4pc7XtIb831J7HQ3Vy/c4wPpYrtH6h+zVYrvD9d1i/ju/vqaG0
7xtbv8H2gfoNySQ/WG4QDpLxQf0H2w/ag33DLwb67ZyRd7xVKHdeM/mpXYM2
Ttgn/zOd9eGc1B714y9Jrxwc6JkW/VtfZ+odp73jn8481aveBZ//ZzrrpaSn
huz7zL+J74b8+6yvsZ1zDehvbWLxbwgfg/3DroX2YD+ziJ+nx8aX2NlZx59w
HEYoPhL8Twb9TywfSO6F/DNszx0T0Z7lCupHPJ5DNL4ZMD62d+wM7B8+2j+C
+IfS5vjerw9f37GI4f+xPdn5fLTvsf+G/LT2EPhvtmUf/EH7cru8on22pQ5q
md3y/0w/GOv/scegPcsFTb5cHf2cD58OH5Bewp8dQT9JpXqTr9DnUarTwvRX
6ftUhc76B39ifshHpN/w561wPyDxH8ufyUDnepH8ifX3MK8K9Y+o9liXHfUf
7pefsxr1m4j2JK98/sT7WTHvHfWPqPas12j6T1T/3E7TjwgPMC7wWc4wfQjp
N/w5AOpj8PeEG0x/oLNewp9LQT/hejn8yffRXS2dzqPPn3RO5fl0nuWT4zGY
/gd9f4Q+GwCd+InlT+Izsr84HpM/95CdlukcL8yfW4DO8SL8ifEfaFdB/SOq
PcYlov7D/bJciYf+p0L7I9Ce4yn5E/0jbcDuhvpHVHvMO0D9h/tluVIE+ud2
39Lnw9A+sEue9vnzRIATEB+w/dq8Tfbsq6UTnrH8+VWAcxAf+fxJOAf9Q0K/
FuhZ273470TI7oXyA9vF2hv/4v9k1xqn6CdoN2N7GtPRbsb2NKbzfQWzyK6F
9R3Qbob3J6DdrCnUx0C7FOofaJdC/SaKjna3FKj/jHIL60N3BrnC9jqZP7CL
he7HAL6O9/ej3Qr1n6j+Ua6wPU3oEc9nuxatj2U5w3S0m+H9nKzfkN3TVIb6
B2jXqg76CdrNfiF7GtNZLpH+7bM9jels17Jk12J7F9PRbnaA7GlMP0t2sypk
N7tC9jSmJ5BdqyDZtdhOxnT+fwrZzXqSnYzpven/o2Q3e4zsaXI+yC6l6R9s
96L4TTuU7GFMJ/uT1fQftLu9QPY4pj8GcovtaUxHuUJ2JqHT762mf7xLdi+O
P2V7GNPRbhXKXyK7G/mXxB7HdH5eUZIrZOfD8XuPkFwhO5/Q0a7FdjKmo92M
7Wmw/ob2h6H9InSyz1qyy9oLZO9iOtrN2J7GdLabzSe7GdvTmK7oJ6lMp//j
NDqfZ43O9gqNzvznn/ZP9x36Ef2r78f86Z/2z/Iroj3K4aseH8ujfzr+qPmP
Gj/L63+6fiw/Isb/z5//v+w/cn0i5p/90xq9NMXba3TmP/+0/yD/7zr1/Vge
aHTOZ/un/bO/OKJ91Pur7Vl+/NPxR81/1Pj/D23vHvfVmP2N31JKQjVFB0OU
QSqpJjGxL9TwJGYw5TBGjolxCNNERGPoQScUQzmTccqpnA/XRb6kkxwiRFJC
iVDopMf3Xu+1ts9732t2v+f5fT//fF73Z91772tf+9rrWuu9Dm8cXza/7vl1
/ygZ///19f9fz1/2fMrmX+3nkvhs8vALtf+8+LeetyR+7eJHav958Xv1b0ri
r8mLv6r+LYn/Jy/+r/GPkvh0LIlPp5L4dPLi03rfJfkRycuP0Odakh/gPj99
biX5AcnDxxD/jl78uzOtDyd/Inn4n/KVePF7ta9L4rPJw0c0burFv/W8JfFr
Fz9S+8+L36t/UxJ/TV78Ve3bkvh/8uL/Ou6S+HQsiU+nkvh08uLTet8l+RHJ
y49QXKokPyAryQ9IJfkBycPHEP/OvPi3nrckfyJ5+CHi99GL39N75cVPkxc/
JVy5EJ+mfcOLL0cvvqy4shdfR3w0K4mPRi8+qvyJJfH56MXnB1TGJbz4cSyJ
H6eS+HHy4sfIX4gl+QvJy18YQM/Hid9nJfH7WBK/d9fPRfT8OD5NdomX3xC9
/AaNa3nxddK7Xvw0efFTxZW9+PSfK/cNL74cvfhy00rcuRBfp7iJFx+NXnwU
8flQEp+PXnz+uMq4hBc/jiXx41QSP05e/Fhx95L8heTlL1BcwovfZyXx+1gS
v09e/P7zyrhWIT5N+4aX3xC9/IZGlXGtQnxd9cXt0B/ML+ngN1W2foXPQnku
ovLBqfwu4YuKc4RHKiqPlMrV3gU/dVK+apWPr8BHivER7afv4dMtwYej+pX5
O3U/mleivzte1P8fbR56KbZ4e8D2zw36RX3K/b/Ey4vxGc0v9fKfcdgw8A/E
Sp4d5ffYLIEnPFOecBp/EH6QlXEA+vnS+LMu1fr5c+Rh/aJ/UCWvSSG+rfb7
AMd+Vz4x8ItF5RtT+SLhA0vgIc2Uh1Tl9dEvH32QI/M/nQm+Au0TyP1ztd//
8dK/N2o/X5Vr/2v0QU7Mj6V8CnL+b6P201X5leA72P3q6v67UftIq/w34EtA
H+x0Bvr5qlz5BKZK/9s4D/1wVa76c4T0z7V+uirX9x19wqP2CVf57eAD6Cj9
eaP261X5CvAxLJL+yNYvWeWq/9BfN2ofabp+9rr0X47aZ9zWj/IhSJ/yyPxf
j4JvQPqQfp9pH2+VKx/RQumfHB9HP2WVK1+S9q1mfjTlS9A+p9z/WPmYBkr/
4+xy9ENWudofQ538GvDdB+i1qHw+Kq/UJ8X3f9lxU5585pSFcWn19896/oxj
Xlp7RJ6/MLpCvxb1m+o1rfOBnrTjT5k5fPBxdfY3fq1hlN+x8untGv327d+4
+ILarxva/jeP0VrwOfwC34D+897/Q+FXV9aB5P07HPy6SuVat+LpN/zjMBn/
Vzhfrr/Vfn2zWn+/nE2otmPz+IjqP/lenH1erc/y9e/wk+b3V2K/fnjasgG3
rN48rF8aTpr4/ovZJb3ueu7gF/LrT55297pnOjROVYc+2uGcyVVB8r/y/X+f
Dn89tvbSTmE2+mPWpv7n4868/YQ5U7ZMqhdVD6p81YF1/rDnjiuzO6pWN3+o
3+Js1UXrv7zqqfz+pG9muyA8SbVx/tn5+kLfb9WL2u9V5X8d+sIt2QUr4r0D
2x/cue93WcM1verM3zl//r22HPvwJXvuGu5u02XDmddXpYnHtbvlv9p9nucv
P/mbLT89ePswZOYbR/9zx6/iX669vtVFHX8q6L8h1TxDq9GPNvePVf89Vc1j
tQr9jvPrT92mZ9t9Dvx5PXzZc8Ihw/+eTf2o98iFD/yCH+f5JUvem/pZ/P7e
8bfc2vHb7OBrej++/Kn8/VN7X/g738z+Ut2ns6B/wXP1Cfoh5/M7U55bqBrw
3zxMF2O/ya+vfeNVL2ofWJW/82SDqj9sqBOunPvhZV8vnJNd+v37fec/l1//
5jmD//zRvoeF89G/lfv3P9mp265jlh9g/A6qB1W+38u3LHr8k/rpzMkjj7jk
vnXZS9M/efWhIfn6Eb3ROIid0gR6JOfXkvfuJ/AIfxUPqX7fuf65atjN+D89
n8rn4/0YKu9FqlpW/Z7Y+n4V9gP40eMn4CmtHJ/ptYJ/rnqN/OhC/odnH6p9
5+lH1WuC+9aCHbagkJ8j42sWJE8mz7+A/Zt59i/2h8zbH5z4XBWNn+O8dvzr
2E8+Fp7pmIFnWuXKHwf+9qB87nZ/0Hve/gT9pnpN9Zw9n4XggwVPLPIL8/wF
5fMcIDyfUfm+7fmCLxX87Nmr4FFVufIH3Cg8onE2eERV/i/wnT4rPKjpPvCg
2vyD7xX88lH55lWu/ALgdw/K9273B77XOsIDm5QHVuXKdw4e0qg8pCp/C3yf
2wgPaFIeUJUrnyl4TtNU8Jza+aE/wTMazgDPqMpVf4LHNjwMHluVKx/uk8KT
G5UnV+XK9woe2KB89CpXPtQVwpMalSdV5cp3D57ZTHlmafxhP+FhTfuCh5XG
n90nPL/xXfD8qlz5ZMEzG5Vn1uTgSwWPalAeVZWrXgZ/fVQ+e5ODb/dB4eFN
I8HDq3LlewUPbJoCHliVK//IbsLzG7YCz6+dH/rM02+VeF+Zf1m0v3DYMDnP
9jh/Hv/Q/9ffoe9t/ap9eK/wdyXl+TJ5RX1Pq9Sy2j/O8fNK/75Yn6X8z55+
eUv8ezf/7GSxf4Nn/6r+nAB883Tm/4D+/Bx+7iYU31K9K3G3HVHH1czkag96
+e2Wb+fgl9q3BHo3QQ/b8egnHmCXqf9q84N+8LAfv4raL17lfdH3HjwJ6Wz0
m1c5+onD/22sdqaNr530aw9q58xEP3eVo997ai7935P2g7f1Lf3kg/LW16b+
9NLPvaP1rZ+Jfusqbyj95rNrpP98gd/hOunnH3CfqTX6/atc9SP6u6e70O9d
5aofwaOReoBPQOXoJx/A45COpv704CMwfoed0M+98vmpf7pZoT/+j8IXYL8/
Bj4BGn8Qu7RZWo5+8jT+DPwESfkK7P0RPgP1j9VOtPP3FT6AcC78BOW5sPUl
vJ3xPOEXSCOVp6Pi+TZRu1btXJOjX39A/37450ts/o5E33vwaCTl0VC52nWe
fXdYhf9ZA75Wc/5Xlcq135Sn//CPw/T3DdXxn7y+Qe1L8AAjjpbnf1bWp9RO
e1TjiG/m8UHgkmX+v+oJ5flVOfi+g4dvwv93699VP76PuPqeNec/m57fk+Lr
6r/vL3ZxlPh6LTu+U0n8viz+p/MSxG5N08SOzeNvwjebefovCF+v+rfGh6by
nuA3Bk9w3BE8wSq/QPhm00zhoU3Mn1n1YjWfrvK3xdrED6r8LUuExzfNBo+v
ynsJXzHO3yTNJH7jFcKXGz39Cb7iBB7j1JP4jav6VvM1633GB8DjrHL1v8Hz
m84Hz6/KK/3vOulQ8EirfFfhK86uFB7j2JD4jd8RPt6g/Ma7g6dX5WcKXzH8
55FZF+I3Bh+0qz9VPw4VHuH4EHiEafzZy8JTHeeBp9reP+G7DlXCg13g110o
fM6mN5l/XXlTJghPdTwNPNUqFz7q+snTf1V/q+ZbjqY3wfeo8sbgN75GeKRT
Ao+0yhVfKvG/kud/qd4r8f+j5/87+a9VJq+wd1z/NJb4p5nnn2p+gBe/0nwA
D99V/VeCDxTqIOz5475L8IHg4QPAR1IJPpI8fET1prd/wD+LJf5Z9Pwz+L+Z
5//Cf00l/mvy/Fflt/H8d/hfqcT/Sp7/Bf8/lfj/yfP/1X4s8U9jiX8aS/zT
zPNPgY/EEnwkeviI6scSfCArwQdSCT6QefiA8mt5/i/wk1SCnyQPP1G96fnv
ZfXHZf2Z9Pd7JC6SqqrtvJwfhPtbsH9Xlt9fGV8qxs8r86fqprkS5+Drw8/c
AnHa3P7U+I/mtaodrXKNH3n4Q1l+jt4P4jI4f+5/za7Qf/Vgv79uco2PHSC4
Z5K/8/wHjR8cJ3GDiDiCzc8hiD8g7hARh7D1pfg6cPV0leDsdv4AfBy4uOLk
hfiL5x9r/EbtvtkaD4Bc8X/PP9L/R9wgDetfHUdw/NdGGicp2GeIiyTESUyu
vK4efqDxoToSF4qIE9n4n0B8wfMfb0V8Qu0iPZ/Kj6vwX+slsdPeLOS3IK6S
EGcxuca3ENdKt0ucy+Qa30FcJyHOY3KNDyEulMYvq44TmfwMxLcaSVwr/Vvi
XCYvqy8t64/D/QsK+gXnQ15JQp6JHV+ZX1OMP1faK9bnyOZf46PIC4nK80zX
R35fVRL/Lt/fNH/G8781/8bLn9f8IspTZP8xefpB78vsUsmTseM1vwhxlfSc
xFlMfgDyL5B3EZVPW+XgWw4DJG8jKp+5yjU/AfznUXmeVa75BeBZTieCZ1nl
mr/yGPxG1SMqr4f8F89/1PwJ5E1oHkU+P/h/z39Q/w55Jelc8DSrXPXHAZJX
Av/ucTv+Zs2PkbwY+KHfmlzfe8+/1vwMPY/qEZVrfofnX6n9Ah7oqDzQNH7l
CY/KE65yzQ9CXlBUPnqVa34M8mLSJ+ARV7nm1yCvJikPtso1P2io5AWlL8DT
be8X3vsS/Dl6+HNZfR/sh+TpB33/S/D7rAS/TyX4vet/aHzRw7cr+wm48Q03
v0R/9/B55cstwV+Th7/q7x6+DXw6luDTycOn9XcPn1e+2BJ81cUXlC+0BN9P
Hr6v9kcJ/hxL8OdUgj8nD39WPtWS+Efy8D/VHyX4f1aC/6cS/D95+D/w7ejh
28pnXRIfSV58BPh85uHzqn9K8N3o4buzxf6Inn9S6U8U7Q/1X0rw8awEH3f7
a6l+8vBx/X8PP0b8wM/Prbm+uErlar94+DfwzVSCb7r6Cfhx8PBj4L+hBP+N
Hv6rv3v4N/BLN34D/NK1P4CfhxL8PHr2j+qfEnw3luC7qQTfTZ79gfhCLIkv
JM/+Uf+nBF/PSvD1WIKvJw9fB36cefgx4g+hJP6QefoJ+Hfy8O9KXGVxBj1Q
kIt/1DwIzrJTQe7lt2t+gpv/SfWpc6k+VY8/vTJPoHC8599U9k8t4jN6ftf/
qrAHi/aPHh8mj/qm+1lPx86zv72ky9w6BXnnHZZsdf+4ddmUnVc/ceGgPP/O
5nfi/Y/16bNL+PPfevUeuj73z0+F/OqnBl3X9ZGW6Z4WXft91q9Y33vqv9qN
uPScOumC37d9fHmjqTZ+9WsnD2rY/YDTG6ZO/Q5sPfPkYv+lyTIuHWdBjvtK
h8h9Fp7PlBHLJvz1xKZp/AdHvdFtp9qF8Z12Ucfub931Tey8btY1p9+ytnD8
QBl37C/3Ubj/f8t9h1EyD4X5G7y+8xbfDPg2th4y/cVD5q0pPL+PVl8/sfkV
n2U9n1n8+uJ/5PEFqw+XcUWMszC+m+S+Au7Tjtf5PUaemz7Hwv33kOumBTKO
wvxi3BH3UXh+eG4ZnmN+/xX1L29qHDu/vwr8oinyXFoVjvfqTyrj48X8bLJL
4ulUX2h4jNPfSo/38E893sNPK/HdIj7i9BepYvmAF06ac+gF78eqxec9OO7w
X9TfQz6z15LTzxj1Qza+49Oz7uuc628d/2FfXf/Mxa+3DC1eWfr9p2NaF+RL
pl0/5ZJZP/t1fR+s1W9Nzr+m52/+1Jmvb33/JmnOVr2O2+f9HJ/S/tGndB08
6OQxi7LTNv/wwMGXF+cf40oYZ2F+cF/pr3KfGR9/7EUzLmzdY9v02TPbjrr3
s7qF8W3Y+5HJj3VYHSfse1jzqxsXn+/bMm69j8Dj39Cn+r7DZzIPBXm7IwbM
PGnq0njVYdP7j1iwoXD+vm9MHzzztRXZhXefcufldX6Rf6v3L+OKVftUj7Nw
/OdyX+HPcp92/Bn6fshzS3+U51i4/wvkuqmPjCPfPyC/UsYd28h9FK7fX55b
OkmeI+OTbv/SThvZX87dP/E+eu8nXgTUty2Pmk+ucrW7vfxx/X/p3/BT1DoQ
lWt+i/d+t0B+jIdfcv01589o/gX8L83DMLnlb+B32FEm1/yA/mIXpZvFTmL7
LbQVuy3BvrPxtUF+hf5+ldiBdrzmB3wsdl0cI3aeXV/zX7z6t9ORPwO7Vu1c
O//HyH/w6q9+i/yJm1B3dWl1/OLmQvxioNi9GexgG5/a738Vuzc+KXawyVOS
/BqvPlDzc7QuEH6GHa/5FV59muZn3Ch+DeIhxfpg+B3qhxTwx3fE71A/JF//
yL+5V/wu9cNy/Br5Oz3wO/w4u77+f2vxy+JX4qfZ8Zofo3mY8CPt+QxAfo3+
Ls9npD2fTvj9AfErs0/Fz7TrK3+LV//VeyP767v2dUl/yhnA+zz9IN8aH2gM
Hpe8PlR/H426Wulnmo9P84e9+CfiG25/IP3dyz/W/NbZgtuo/2Tzr/mxnn6p
j99HC64TBgnOY/LtkX8K3ElxqNz/Rf6q/g4cy47X/EvgUgE4lck1v9jTD5qf
7NWPHY380imC6wGnbJfPL/JTvfol7c8P3E5xPDu/9j8Gbhe2ERzP5O2Rvyx1
vS2S1tmpXPOfvfo6zV/19MNI5L969V2qP74S3DQcLzgqjz8DbhokDpqv/zHI
b95VcOMM+LLJNT9a87yvFRza5Pr7OYIrh9sEZzb5auQfS3ypleLgNj+av+zp
l8vw+2GCi4eWgpPb+dV+KKmvz0rq6/U9L4kPFPE71J8Hr/68Mr7h9h9w4xuo
f09e/TviR7GkPjt49dmIL2Ve/TniW9Grf0d8LZXUTyevflqPK6mfT179vO7/
JfXlsaS+3N2/ER8NXn05+gvEkv4CwesvoPhdSX1+5tXnIz4cvPpz9A9IJf0D
ktc/APHp5NXP6/5bUt+dldR3u/VFTn/PKpVrfaBX/zy6Ir7p4/te/Tvqr5NX
f438j1RSH5x59cGof868+mfkp0Sv/hr1u6mkfjd5+5/ulyX128nbfzX+X1Lf
HEvqm1NJfbO7/yE/KpXUt7v7r75/JfXhmVcfjvrn4NU/o349ldSvJ69+Hfll
yavfruSncvHvUIJ/4+/i/qdyNz+x4vxufqNr36q8BP8MHv6J6wYPH1b9VILv
Bg/ftftz8G2Vl+CjwcNHgQ+HEnw8ePi48Vf+Z/w3ePivykvw/+Dh/yovwb+D
h3/r83PxYX2+/xnfDx6+r+d38e0K+9DFn7MS/NmN33J/uwJ/RMX5i/l5en0P
f9L+dSX4Y+bhj3p8CT6bleCrmYev6vEevqzHl+CTmYdPWv/Y/4xPZx4+rfIS
/DXz8FeVl+DvmYe/q7wEf848/Nn4nRx8VuenBF/PPHz9DF2fDr7M/ISMbzr9
1e39eL0i/8Prf/RT9PBZzQ8owd9c/1rj1x6+CXzS9W+ATyYPn9T4tYfPan5G
Cb6WPHxN4/Ml+G708N1K/8nFH2MJ/hhL8Mfg4Y8a/y/Bv4OHfyv+UYL/ZiX4
r+u/aX6Jh/8C3wwevqn5GyX4ePTwL82f8fBZxQU9fLAyf7OYX1WJRxbtP63f
8/BNzQ8swa/c/kSav+bhg8D3Ugm+5/o3wDczD98EPpVK8Cn3/QQ+mkrw0eTh
o/r+leB3sQS/SyX4XfTwO83/K8GPk/d+av/ZEvw0K8FPUwl+6vYnAz4YPHxQ
8zdL8GXXv9X8WQ/f1P5KXn2R9mfy6gfk2+ILhf4Ax6G/D+rS0CfnF/0v0R8I
dW3ZZlLnZuPT92601K1F1LHZ8fuh/85EqatDHVxuP2n/noVSlxefljo9O177
z2wtdXeprdTh2fG3o7/SK1I3mC6VOkK7P+3PdJrUHWodop3/GPTXQd1iOkfq
GO38x6A/D+oe07tSB1nY31CXmJZLnaIdr/yIqEtM06VO0eTavwl1mxF1nHZ+
7f+Euk/tA2Xzr/17ktSNxkuljjR/Puj/g7rTMEnqUAONP+wndaERdaIm1/1t
ntSFpvulTtTG1xT9nYZJXSzqcPPra38o1NWGplJna3J9716Xutl4g9TR2vlb
ov8S6noT6nzt+V6L/k2oC05rpE7Yjtf+VwdK3W96TuqAbf7L+KVRP+bmf6N+
LHn1Y6jPC159nuJPJfV1yauvU/zGqw9UfLCkvix59WXHVeTPu/Vv0at/U/yp
pP4xefWPlfnvbv1gVlI/6Obf637v1Q+ivi7z6usU/yupr0xefaXir159oPYH
8OrPNP5RUp/k5gcrvu/Vf2l8oqR+y+3/oPi+V3+m8aOS+qXo1S+p/i2pr4pe
fRXq61JJfV3y6usU3y2pT8tK6tNSSX2am5+t8TWvfkvjQyX1e27+usbnvPoz
7V9Qsv8kb//R+npvf8f+nJXsz9Hbn3VdevYJ9pdYsr9Eb3+BfZOV2DfJs2+s
P8N/3n9jyf6bSvbf5O2/sP9Sif2XPPtP9XOJ/ZOV2D+pxP5Jnv2j/T28/R32
YSyxD6NnH+p74dknymdRG/wNzYi/weHPq1L59ouvfuiOw+qFLU7ecHizFt/G
a5psGNJml7V0/Jr4xAOTLp9//Dux7/Av5r70do7/Ddv7gA7zp7UJw46L93f4
oBb88Hx/67xXne+bf9PY7U94cM/lx905/I9Jz6PjVflvbmnfotdJHVLHU7fZ
Yvd//mTns/WjfBMO/4iu34/P+/K7e+a/G8+dtMmVm0/Mx6/8fjojjA98/9W7
Lzw57iD0X2xleRJ2vHyG3V7N67EoCn9Jjs/p/wuv7dvga8r9Yx3va3ccPmxl
g2/iG3Mf7H1wl3W8f2RLBt+1T9dGX8Z7n33w4Tu65fg3+CuYx8LO3+/bBTP6
fbhT+qPD/1r3iPNOnLZyk9B365sG9vrx67j860fHbdszr18aNGNGr8FX1E6t
epzee27P1+KIfz/VaP8G+fwy/zzzy6+bP/DHunHPMEbWVawv68zOr/yF3vy3
rJZ/Fd++7buPtnr0++z9K9YtvW5dHj+ZvCw9cn2Dju760nXVX9ZlxDq143/X
ZNT3r3Xom/Q87d66Zuh9H3cyecc6M55e+PkBScep5+P1d8XUTS+f1G1t9uro
MG7I9vn61PXn8VedefdZfxh7wj6ov9smSP1djh84/I1VKkf/veCtL12fDat5
S1ZmZ1bzv+Tzp+tvn0ePfbbxvkuzX3/ep+miPbbk8Wd/229S+mSnn/frD+a+
svVj+frZ4dcvnLd1i6bhdof/jfl/phB/y5pWjdd+fXPdsNtmE8fsf9PnWd+h
A6Z/9UqOr42Y/5c1l66rn5a2O/TlgW3XZ62+OOKUZePz+R3aaue9TpzXIDT8
6ZAVLy9vkv6Umg1Ztk/Of/enN7pveHlYVRh45j33bbbJ93H3LY5u3TXk/Yl0
fuT5bgX906IwvqNkXGlXGafp783w/uC9icfKe2TnV36jqxx+I+XrIR4fO17X
l6cfdX1563OXeQe1mPxqVRg1+sOOk07+Idb7otXNYz78Rf+hh6+YcsAOM7In
v9n6+eG164epN7x67XVH5Pgc9H/m6X+8n5n3fjr8oLZ+K/l+iu//eb2Ov+3I
QWuzmTu8PHh9j4/j+51H1+s3ppbJl55w1sXvdXwlW/X8W+1ffa1+WHjxbtM7
PZ6PX9edpx+wvsKOsq7SF7LO7Pn+XfRfgN5TPcjPN3nPV99f7/50f/Hef12f
cp5mSZ5HfTs/9qUg+qthkv0xty90/bR954SPnmzfMl058IC+bzyT15fr+lm7
IByzTYMWabfLa/UePXhLk+t6SvV3qHrl4AaWR6Ty9tCXJft78NbvPqJ/g6d/
y/ildP30OKXV3BF1tk3Pj3zxwAvPyOO3Aev7JVnXCevc5KqPSE+ZHPtnWAj+
wCOIP/BjWX/xE1l36XtZh3a8vtfe+30W9L9rX9TMP1xFzz95z1/Xj+iHn+KG
Hv99vmL/yrvfrNX6sjNqp17/a1HLTx55o+C/HrDkpWbZLrXSHn2/6Tr009y/
UbusbP/VvFCsI3u+bcS+C559h/03ePrN+rPVvrzB7EnfxYfPG5LOHru6YD8p
Dsr8jqof64pejGNFT5q8jexvaQfwjo6Ufc7mdw7xh80k/rCBor9Ub6XZosdY
/6QS/ZM8/YP9L5Xsf8nb/xz+aVtflXxprn6OJfo5evpZ+fk8/0X5+Dz7UveX
kv0xK9kfU8n+GL39EfZBKrEPkmcfGO+c8/6oXvL0E9Zn8Nan6stpYpemy8VO
LeCnHj9eGb+42vee/6jxsxZiV6Z9xc6082v8rK7YlQl2psnV/sZzUzvc7l/t
d+wbasebvIzfUe9HeBEbQk/n+UtqX8OuTn8TO9vk6p98IHZPekvsIJOr/+Xt
H9Afmac/9P3U7y2J31ifF/zatFT8XJO3gn/v+V+V70ux/4i+X/BL43TxUwv6
FX5pXCR+qsl3gv/eSfR6ai96PseX4f8rD70+Z5UrvgFeylhH9ISdX/uPe89H
vj/uDr883S9+egHfgF2bnhE7t4CPldgf0bM/9L5K3p/kPR+d/xL7LSux31KJ
/ebqH9g3mWffwL7V+/LsW9e/hX0WPfvM+Fn+8/4evf19O1n/ydNPlfrEX/8l
9lFWYh+5/Xf0+Xj2EeyHzLMfYD/6+JTYj67/pfufZ//o/P9R7jveJfNg49P6
sqtkXeo65flLHr6lcg9/UPn98tzjclkHhfEdj+e0DfHL6/GeftHxe/uTHu/p
v0o+4uL61/XZUdaF2tEF+a7y3ga8xwW5h/+p3MNnyvh1VQ69FXqKHrPjNT/H
239V7u3fen5vf1C52x8K9rWHb+4E+9zDn/T99daPzoc3PxjIMHmPlgNnye1T
fe+6iN8FPDLHPxR/gt0dzxE7PNcP8G+8+W0N/8jbP9WvfMfhf1b/1cN/1f/1
8Dn1r7z3S+fLWz+KT3jzo/MLXCPsKDiHyRXfg18TGomfY3LFDzz7T/EH7/1X
vIZ4yAvrpyS+kJXEF4KuaG9/9PQ38Pfg4e96PyXxF3d/B/6fPPxf77cE32ae
bZMD33bxLbUfvPdf8TkP/9XnXba/evi/+m8e/qzrv2T/CyX7n/v89fyef6bH
e/a/yr31rc+lZP/JSvYft/6jjF9d5Z5/ov6fp/9Un3n6Tf/fGx/8H9e+VnzE
08+qFzz9oPb7f46ftrVx8fNX/MbTb4qve/6l4vOe/4LLQr+2wPzm+afqD3v+
seIznv+l7xu9fwX/Wp9PoT9kiRx5ceFi9NHX742Vn1ZdL7tp6PLsXguem/Ju
7IxvlWs/G+bJUnkXko8n+aXoe3Eu6njPrejH+7P+RT/Qyj5dOb5QJtd6Q+vT
Rv2Pp5G8P8m1rzrzOHjy3iTXeubKPqO/6E9UIh+PfiVWh0j9C1jen+TWbwn9
lza0RD8mR27fkGu9ANcR0PMLI/H7SJLvhbqfn+4THjT9VvndyIfTPDn93lh5
qu6rMC22/XWzBSM71kv6rXK8l4Hj7J58Gcm3uWj+sOFH1Qof1BpxQ782C6N+
q1zjERynUPk8yBvj98YkX7H4gWXb9W+aBD9rZd8qh13NcXC7/jKSP0zyhtjv
GAfbWLniaoyjevLJJFd7hu0cT/4wyZvAXqZ9PGysXO1y9oM2Vq77Fe9jGytf
ceuj3w7ef3UmuNl3Ub9VXg/7wTbYH/R7Y+X3nLxw+NsTP41Pjdvryl/Vb5D0
W+XyrXhZvk9srHw29iP91j7sKt9N3reg38LvlfePUP4F/cb7HDdWDn1h39w/
Dfom6bfuJywfge9LSG58GcyjAXl/3leoP37Z8bzvQF/ncu2f55y/7Hjifw3c
X4/3FeyXcWOP70/7zjTqv1d2ft6XZtLx54NfWL+5Pu1G1Ivq9+7YT1R+E37X
744k7yb2in1L/488vjcM9QIX4Bv8bCa/EL8Pc+RPyvsW9Ps+eR/z/QP4u37X
RZzOk29OcugL+4Y+MTn535ZHsbFyyn/LOD7G+476KRt7/J9pX4G+Lpz/MXwf
See3+gWKI6ic8g8C41sP076D/TJu7PG8r2C/LMTfGAfj49VPrU3HY78P+v21
2AN2fcpvCovgx6kc9kTQ73kkny/2in3DnrH5o/iw+TEq/wK/f4nvA0mu+4L2
v+f9Qb7zuADvLxzXYfxG/Y8WacSNR+zcNHQi/wP2n+1D5x67ZPnDDXP7ZerO
ex64au9V2dGfbXH5zFsbhncPn3XVQXVz/SS8iY1Db/QZ0n1G5cLrsWfSPkPa
70vlndF34V/wa0ZS/z71P5jnzeaH+j58pnxPen74N5NvX7ris1GNAvs3uh/o
edP013ZrcVtef/4Wrt+p5PrKA7OErq/+Bc5b8D86Qd+r/sc4+fzWV5H9m2nU
l60L+rzS/FkfkU4k1/Nrn8hT6fzCd7lnUJ76Sj57e/5JeZrRb4qfr/k1N1D/
gjnwPwbKugvsf2D9pt9i/8E6NvnLsj4j1mV2lKxTk7cbeXbHMbPrhfWL/j7j
hie3DasvG/KH4efk8bN02YQPu72X4p3/nDiv/tg6YfV3R6/c86E8frrhrXF3
rk0/ZJ+9ubjl6NAoTLjr9Lb7D8v109dt71n84tWbhOMnX7fzI02bhAuq4795
/VLjR/ssX77vTmnf6vhw81Rn2KrhTZfk/VEe6H3050Oe2CINxXH6f/Z84F/s
++7FYzdrUS9w/Jdxr707p7MnT8r3J/V/Tuqx3/FXjW0Y2P8Bnm77y091bn9x
u/G5/wTcPp53yJq3Vzb/KVuEPAKVt0Lex3XI+/j7seHY9rvk/CzYbwLOa3pc
5Usp7nGijJPvL3ST+wrs/zQkXHw/mScef7YYcYdz5T7s/jVeM1jGHcYijqPy
RvL8Qm15bsjDyPuDfCPPP50vzy/rJ+uAn68ddxH+j9ZfhnUX7pB1aMfvIes3
LZd1G3+SdZyvj7er12fEutR1msvlMwzfVbx/kP2a2H4l/yCwf8D9qdg+Jfs+
sn1P/ktk/4Xs98D2O/k3kf0bsq8j29dk30a2b8l+T2y/k32bsX1L/lNg/4n8
v8T+H/lPGfs3ZP8ntv/L5o/s/8T2f9nzKVs/5B8U5qfs+ZStH/JvEvs35B8W
5s/Jv7Xxc3yO7X+yTxPbp059jB1P/ktk/4bs98D2O/k3kf0bst8j2+9k30a2
bzn+w/Y72bcZ27dl80f+X2L/z6lfsePJ/k9s/5P/FNh/Ivs/sf3Pz4f9y7L1
w/mj7B+Q/xPZ/ylbP1y/wf4N+YcZ+4fyXR4fUbvPk6t+8eSKe3ty1d8l5/fG
V7WR58/c89fIA8L8B//fx9en+jOx+8018kgXxl82/6685j55/+/PD+N/rmT8
w/6nxk/Xd4+vmeet/PnS83HPX3MdXC5X/ezeP/JcZ3vjr7HOonD+gnz8Tf/9
ebr7oI07vzu+mvOgcnntkvHVnMf/s/9X/ZnafTvkcfP4aPzJG3/NeRqF8bvP
v+z51VwnlsubO+NX+d/+h8eP67vnr/1/+Xzp+RTOT/hFYvyC8J3A+A7hC4nx
BcJ3CvFlwqcS41OEv2SMvxA+lRifIvwlMv5C+EQhPkr4S2L8hfCJyPgE4V+B
8S/C7xLjd4R/ZYx/EX6TGL8h/Csw/kX4TWL8hvDBxPgg4VeJ8SvCdyLjO4Rf
JcavCN8r9H8lfCpjfIrwvcL6I/wiMX5B+E5gfIfwhcT4AuE7hfx+wqcS41OE
v2SMvxA+lRifIvwlMv5C+ERifILwl8T4C+ETkfEJwr8yxr8Iv0uM3xH+lTH+
RfhNYvyG8K/A+BfhN4nxG8IHE+ODhF8lxq8I38kY3yH8KjF+RfheIf+N8KnI
+BThe5HxvbL8Jo1LVPal1c8K7dsXvpQ+fnGp9O+z4/+KfrQfSB/NoH1qVY6+
zAE8YYn731L+T2T9onwDep6ZVH+Cvus5ri/91+14jctU+hcF/vRwivAQoY/n
TjY+0bc2L8O4vy54Cw3XB39hrh+qP6m74jwza9yf61pc4W3wqKp8DvJej4Te
m0P5f4IX1VO7Bn2GX7fjFd/p7eA7Q8HXMF94HMIG8DiofEBlXCLMIfxM+STA
M5GUZ8LWF/rD/Uv6jKWbqH+s8jWgj1imPA4qX79A+nPtLX3Iwizqf6n9KLVv
2E3UP1b5IsAjEZVHQuVbgs9B+94pz4PKlc9A38unwXOgcuUjuFr6xAXlKVD5
78GXoPr1YvAo2PoF3wH6yIWJ4EFQufJhoA9eVJ4MlStfhOqll8EjYeMD34Tq
R+WhUPlL4ON4WfrohS7g6VC59qPVvlvcP/oS8C2gj19A/z47Xvkq8NxCdprw
WKhc+9GChyNw/2jliwCPRDoLPBIqvxT9xcDzEbj/LfrO2fdEwj/RN9t4DsWP
zJ9fJd+Zvv/cH7hW0v9rJ/1/7fqU/xk4/1P1muo/1o+Lhdco+y/hOQpPCL8R
jW8n0396PpVXLat+n+MHeL/xvtv1y/Bt0v8Z63/dPyr1tn7Uv9gxzIDek/hD
Xp8h36m76j/Wj78VXvdM9ZvYgzm+ib6xQfvIPi/9Y21+1nTfqtfNA1qa3m9y
2+xtDm2W14/M1vxj6MWZtD/sL7z1Qf9vuvDXm1z8m3lxIXiurhB+KxvfJqIP
0xTw8EBfmhx9vcIt6AM7TPp75fFh6duVTYDevEv6d9n1T5W+X9lvtU+s9P8y
+d+lL5n1aW0j/clM3kP6jgXtM/qs9B+z+UHfsnQD+riif5mN/xHp22Z9VNG/
LZdL3zTTn69J/zQ7fyvp22Z9fIdI/zYb3+nSl83055fSn82Ol750n8aF6POL
/m52ffSNS2+ij+s20j/O5OibF5qhTyv659n8vyN960y/TpH+dTa+u6VvXvgd
+gTL+PP6j+7SF89wePTHs+tLX7pV1kf4KemvFyvHv2kYgz6xK6V/n8lvkb6C
4U/oA3yW9Be064+SvoHW5xj9A+149B0MR6FP8FvSf9Dkt0tfxKwL+vQOk/6I
Nv6tpO9h0D7Hu0n/w/z60jcxjUYf34ekf6IdPwD91mcJzwH+ztcvvd+R32/5
9vFpxT1/LTy0aR+KL7UE353y/HYCD57KtT5hQgV+musHjp/OIvtoBupyVS8r
z53ND8YNnsuC/ib7LrF9VwU+b+NBAc+3yl/HcR2Q/6H17jb/1eNeTTzDK+n+
f7Y37/9l3rp+bP8L9lP1/31YwA8U1+lP9r3y9YHHLyiPn12/Mj8/4/x86Nvw
iejfNBU8gyp/HP1fz5Y+omkW9UdXvr4XpU9odiJ4/FQ+Hnq3lvQZzfnwdHzg
2wMPX5gFHj6VXwq+QPQ5jYukv6nJx0Lv/gN9bV8ED4LKlc9O9efvwXOn8nfB
RweeuoD+r7l+Al+e6s+B4NFT+fngu0Of2HAaePBsfsGHiD632t/Wjn8EfIHW
Zxs8gipHX1vTf8pDaOsDfIzjpU9u1kl5GiGfAj5BPMfUCTyDKn8SfHvTpE9v
QH/e3D5SexV9YTc0EB4Ulf8L/Wuvkz7EoRPxI6CvcJgnfYZTP/AIqlz1Xifp
UxwuI365svofwTOXmx7j/vbgXaL6nl/kf1V/Uvc1iL+x/ST5HItjpX+c74+q
H/4I/5L1wy0Yz3T8rn347f4q/fvA9munyvok41NXOfIlyb/Pny/l7cE/zvtz
6P9rnc1s0s+k/wPr/1PFnlS7M+wr9ma+PqF31rWsOX9hjtiDVr8WxF40+YcY
7x7AJ7m+Svsh7w+e8Juov/eOwmtiPNTfCr+JjQ+8DcYjLn5WLq+FdT8MPN43
UX/vOcLLEjuDt+Mz4WdJleffPl0Inm/xj/P60PuF18Z4tpWPReXCy/lfWaX/
nOuXeuAfWQmed/BnmPwC4a2Jlf5zPn+z8f9/Ag/868J/Y/IDMR7l+Qa/jsnB
WxKUxxv8JbZ+weuTVfrXuX4Hr1BQHnnwCNnzA28Q+d95f/BG+P+dwTMP/iGT
47mE08EjfkC1/zyS/OvfBOWJ5/7+4FUyfqBbhF/Jzj8B+9be4JEX//zm3L5A
P/Qfzxced+7v/4jwQmXKn3Sd8EOZfKzw3sQ/gecd/DcmL6tPIf88sn9O/mfB
PiH/LLF/Jt/mfybWn+S/JfbfyP9P7P8T/hoZfyX/v8APRv5rxv4r+f+B7Ufy
XyP7r4SPRMZHyH8P7L+Tf57YPyf8IjF+Qf53Yv+b8IvE+AX5b5H9N/JvM/Zv
yb+K7F+Rf5vYvyX/PLJ/Tv5nYv+T/PPE/jn5n5H9T/LPEvtn5H8m9j/JP0vs
n5H/n9j/J/wiMn5B/n/G/j/5rxn7r+T/B/b/yX+N7L8SPhIZHyH/PWP/nfzb
wP4t+e+J/XfCNxLjG+SfJ/bPCd9IjG+QfRbYPmsuvJxJ7a4N3ar5OU2u8YU9
4B9yfEH0SnOLq4If145X/VsZl9ZPzo+mv0gcJF//FH8JHH+R8ebx8U8pPq56
Uc/D9t+plXXt4UbKn52B/1e9+R7V7+h45op/XtCv0IdpOvTfY6Iv7Xiqawmc
vwp9juO/V32f319lfX3g+nu1/8DjFWaT/TdQeLmS8pvdKvxcdjz8z6yu8HwF
5ZlR+evCOxY6CA9ZYP6XQ4VXLF0K/rfmwi9mx8N/jocKTxn843x97iy8bPEa
4WkLfwKfmMr3F140i4v+SvjR8vkRXrYAnrawBexJlYv/28zqI8C/Zsdvif8f
IzxuYRbZn8pv1lh44rKxwg+Xz7/w4gXw5IV/wJ5UOXjpLG78vPDT2fE7Ci9e
AE9e+DP4/lT+pfDeWXz7OOG/s+OPxf+DRy+AP8/kOp56wtMXupJ9C97AAB7B
Av/TKOEFTGsXCL/d+cIPmL8f0IvvCM8gzp/f//Ww/34nPIiB7b9FwmuYDgP/
H/gNTa56UZ5Pk9ABPFMqJ/8ysn9J/luhPpnrwti/JP8tFPpjVMbP8Xven5H8
94z9d/LPA/vnhI9GxkfJf07sP5N/mrF/Sv5zZP0p34YvZGwfk/+c2H8mfKGA
P5L/ldj/Iv80sH9K/lFi/4j808j+KfnXkf1r8h8D+4/kX0f2r8l/jOw/kn+V
sX9F/mNi/5H8q8L7Rf57YP+d8IfE+AP57xn77+R/JvY/yX8P7L+T/5nY/yR8
IzK+Qf53Yv+b/NOM/VPyvyP734RPZIxPkH+d2L8mfCIwPqF85qq/lOdc5QNY
r5H9QPZRZPuI8lNiIT8FfO2V18/rL5TvXa+/J3jgK4+3+EPk+MOSyrpXHb+d
X/WmylWPVV4/xw25vgjXyyrPn/s38v2zfw856y/5fXGstNNy/at85JZ/Dp5y
lStfu45Pedzt+uA71+NPUR50yGeCb93mHzzs9vzBN691ZH8FD72dH3zuKv9M
ed51/OCbt/kR/na7PnjZczl4zlU+A3zop2h+AnjSbX2B717rp8H/bnLw1tv9
g7/exg9e+nx9yP3Y/GE+TD4DPPAqB++9jb/1EQNmnjQ1jz8cCz56lS8BT73K
e4OvXcffHDzuNr/gu9fjb5L5tPO3keuZHOMx+Sngm9fnozz0Ku8r8xH1+hfK
fJm8rD9XoW6e9AO9Hxm/H2q/VPa1yu0XxAMtPijfv1g/yP+bgfitk/+XNL45
ivKjqb9Vxv2tAuyS7RG/vZniJ4g3Uhw4189zwCes8ePbwTOs8p4ST42an4J4
az6/4EvU+Fh/8Ciq/FPwQWr86XHwRKp8KvgYwdMYlKdR5SeAr1LjS8pjafen
fJSwM9g+COBjVPsC8UKTKx8ieBIz5vdEPNDwdeWBVLnmfYGHMU2BPWHrA3ya
+rvybKpc7QPweBbwacQL8z6g4LlUudoneh7mP1W+TMOHwKNZOf5vLT6rPJUq
R7wvaPxP/8+eD/giE+LDS8EjaesbfJ7g+dR4Zv78rhY+y/+N+K/yXKr8A/CF
fof46v8Gj6gdL/ms9v7/W/JdTU74RmJ8g/JLE+eXAs8Jlfolz6+GP0L14bn9
QPkDifMHqD9fof5E9YPKWT+8RfUZhfqBSv2UWD9ZfKBCb+rn5/mX+Yh6fzfJ
fNn5J++8+okLB+X5xZ13WLLV/ePy/MNj/tar99D17Wx++k+8/7E+fXax++s8
+9tLusytY/J2k0d90/2sp/P37/dtH1/eaKqNv/+/2o249Jz8/e3Q78DWM09e
aeN7bFDD7gecnr9f97To2u+zfg3z+Xtq0HVdH/lF/5R1s645/Za1+fxc1LH7
W3fl8fcg48mfn4w3P17u19bfFJmPfH19cNQb3XaqnbS+Y8qIZRP+emJe/9Hz
mcWvL/5HA5u/Bauvn9j8ipyfYqSM1+S4H5s/zIfN3wkyXzb+1kOmv3jIvDVa
558Gr++8xTcDcv8K47HzY7x2/lPleaVTID9anqeNH/Nl58d82vlxPZs/jCeP
n8jzsvHvKc/T7v89mY94OuQHyXzZ9cv6b5L9mrH9ejrwA83PZ/yA1n/g9a9v
ygSnfnQM3tdTkT9/GcXvlI/8EsS9llH/ALX/tT6A7X/anwPvz8skHzUuQ33C
gZKvSufX+62qQj6/yZFvHSz/GjzeKr8CfOTvIr9ZecpVrnzgI5H/jXxwO175
0jV/WXnUVf7AAOFDnwFcVXnSVa584NonX3nCVf4WjuuO/Pj6xH98EfjGtS4J
+eh2vOKzNyI/n/FZtTdm43fG384HXqj518zPjXx0q/9XnnWVzwRfuZ6nPnjM
bfzga9f9/XjwuFeO/yPNIy/g14pPPo38csYnbwNf+UrUH/wAHnOVVy0VPvlX
kB+vPPMqRz1B1PoC5VlX+Srw1R+E/P1e4LFXOdXPJLafKX6TcfyG4jOB4zO6
7r36boqfJMb/KD4ROT5B8ZPE8ROKLxXqVyh+Ejh+QvGlVFXxKeDvifF3ik8E
jk8QPp4YH6f4ROL4BMVXEsdXKH4QOX5A8ZXE8RWKH0SOHxC+XsivoPhB4vgB
4euF95viNwX9QPGnxPEnit9kHL+h+EPi+APFbwLHbyj+kPj9pvhWYv1A8ZfE
8ReKT0SOT1D8JXH8heJTieNTFF/JOL5C8anE8amy/tlU/1Xob0r1c4Hr56j+
K3H9l3xbfVshf4bqwwLXh1F9WyH+TPV/iev/qH4tcf0a1f8lzt+m+qqM66uo
fizj+jGqn0pcP0X1bZHr26h+LXH9GtV3Ra7vovqpxPVTVP+VuP6L6qcS109R
fVzi+jiq7wtc30f1cxnXz1F9WeD6MqqfC1w/R/VlievLqH4wcf0g1ZcFri+j
+r7E9X1U/5a4/o3q+xLX9y3hvpCEjxP+XegvTPULGdcvEL6fMb4v34aPF+J7
hP9njP9T/CLj+AXh+xnb9xTfKPT3Ivw4Y/yY8PGM8XHChzPGhwkfzxgfJ3w/
Y3yf8O+M8W/C9zPG9wk/zhg/Jnw4Y3yY8P+sgP9Xxi8yjl8QPp4xPk74d8b4
N8U3Mo5vEL6fMb5P+HjG+Djh/xnj/xS/yDh+Qfh+xvg+xTcyjm+U8U9w/1Wu
bxG7dXv8v+LTef2J1OU00bwt5D/VMrn+jr7A6POX61fC1wPjZ8RPkZifgvz3
wP477I0wCvkxgkPn+9N5Yq+ENcgPGSn2TD4/+H/NzxF7N4/fw14Kmr/SB3kg
Kp8u9laAnaX2mJ1ff98B+TOtxZ6z8+v++DbyU3h/lP2pVajEz3P9qPvzZsiP
upH2Z9ijoRI/z/Nj54g9nK1Ffpbg5Ll/B7839UX+jfgzOf+Y7o+jkP/C+6PY
By1DJX6e8xvrvnoY8q9upP0Z/kCoxM+3sOOBS6R2yP8S/DzX3zL+BmFv5PcI
fr7Ezn+t+DuhCfKn+iAPTeXwl4Lmp8GfMrn+v+aHtRZ/zM6vdQubIb8J+SQ2
vhbi79nv8Aft/Jfh9/XI33pc/Ek7nvDnQv9l7u/P9X+ErwfG1wmfxu/6KeDv
gfF3ig8W8pMIXy/oB4ovBI4vEH4bGL8lfDowPk34bGB8lvDpwPg04euB8XXC
nwPjz4SvB8bXCb8NjN8SPhsYnyX8PTD+TvGDwPEDwqcD49OEPwfGnym+EDi+
QPh6YHyd8OnA+DTh74Hxd4ofBI4fEL4eGF+n+ELg+EIZPxPtj4n3R9SLZOPx
O+pJ7PjKfg5VVRukHs+LPweOP3P/3U5UX6b/vwr1cWz/zpZ8oHAY6peQL2TP
52bJJ7J9GPlG+fzg9w2on+L9+UrJZ8p2Q32R1umo/FrJhwqN8fszki9lcv1d
65t2l3wru/4D/avztWJX1A8hfmpy5IvZ/tpT8sns/K9jf+yP+rXJtD8Kfr25
7a9nSz6ZzS/w3xhQP8f1s1qfuQj1UVyfCbwM818/8f71X5KvZ/HpuZLPl8cX
JZ8uDEF9HPLt7PkNlXw9qn/N7X+tL/4L6vO4vlj3+/Wov+L61dWSjxjuQX3b
/qgTVPl3ks9o9YPId7Tjkd+Yzekj9Xv3Sb6kyfucWp1PGU9F/ZnutypHPibq
ZjdLr0m+pl1ff89QX3cZ7c9Un16oP6X67sD13VSfbu9xpdzq9wv4D9WfJ64/
p/r9xPX7VB8duD6a6r8zrv+m+ufI9c9Unx65Pp3qzxPXn1N9duT6bKp/Tlz/
TPXbieu3qf458ftF9e2J30+qzw9cn0/17xnXv1N9eOD6cKp/D1z/TvXhhfeL
6v8jv59UHx64Ppzq8xPX51P9euL6darPT1yfX8Y/SPldid8P8j8T+58UP04c
Pyb/pNAfivy3yP4b+Q8F/Uv+WwHfJP8zY/+T/KvE/hX5n4n9T/KvIvtX5H8k
9j/Iv0rsX5H/kdj/IP82sX9L/nni/Z/824z9W/LPIvtn5N8G9m/JP0vsn5H/
n9j/J/80sX9K/ltg/43808T+Kfnvif138j8T+5/kvyf235l/je0/yj/MOP9w
fEW/B8OHTE75DRnnN6AeMGj/I6lHzPvvby31hKbnRki9YW5fST2i9V/aXuoV
8/1R6hmtPxHqHU2Oesik+wDqJVPl+Ruk/dAfaaLUW5p8ntRrZseg/9BRUs9p
8mlSL2rxz4elntTk/aWeM+us/a+k3tPGh3pRi3+intSOv1TqVeP16L81TepZ
TX6O1KOmo9Bf6VapVzX5JKmXDaPQ3wj1tLZ+npJ6XbMfUc9rxz8j9bRB+2vd
K/W2djzqde39Qz2v3R/qhbOl6O81SOqJTY564KD9m66VeuE8vi/1yOEN9Mdq
L/XKdv3xUs9s++AsqXe241EPHbT/17+lXjq3b3pW11Nn16J/lZw/v/+npR47
qR1/oNRrp8rzr4pN0Z8L9d4mp/zjyPkT5P9F9v/kW/uuFPvHk39QxLcq/aeM
/Sey3wv9Z8h/Suw/kf+X2P8j/6Zgf5H/F9n/I/8msn9D9n9i+5/8m8T+Ddn/
ie1/8i8T+5fkHwf2j8m/zNi/JP8osH9E/mVg/5L8o8j+EfnfGe+/5B8G9g/J
fwrsP5F/WLA/yX+O7D+T/xfZ/yP/uWCfl/FPU353of6L8tsD57dT/nXi/GvK
fy/0H6H8+8T595SfHjg/nfLPI+efU3535Pxuyj9PnH9O+d2B87upviBxfQHl
92ec30/5+4Hz96n+IHH9AeXXJ86vp/z1jPPXKb8+cX491R9Erj+g/PrI+fVU
fxC4/oDySyPnl9L+nHh/JvslsP1C+2fi/ZPsl8j2C9lfie0vsi8yti/I/kps
f5F9Edm+oP038v5L9kVi+4L238j7L9l3Gdt3ZJ8mtk/JvsvYviP7JLF9QvZd
YPuO7JPE9gnZv4ntX7LPEttnZL9kbL+QfZbYPiP7NbL9SvZXZPuL7NfI9ivl
5ybOz6X85MD5yZQ/W8ivo/zlxPnLlD+dOH+a8osL9f2UPxw5f5jycxPn51L+
cOL8YcrPzTg/l/LDE+eHU352xvnZlH8dOP+a8scT549TfnTi/GjKP844/5jy
owv5j5Q/njh/nPKjI+dHU/54ob8H+NKC8qfpt8oVn2oBfp6qis/P++cV65Ze
t64h5F/Ft2777qOtHs3xvfonbzi8WYtvs3XzB/5YN+4ZxjTZMKTNLvn+O2zv
AzrMn9Ym7FlnxtMLPz8gVV4n53cw/5L4HYYdF+/v8EGtoOc5tdq/yO27aaPD
uCHbNzb9ecXUTS+f1G0t3d/32eRl6ZHrG3Qs9Kfp8NY1Q+/7uFPo3mTU9691
6Jum4P9ULrx4Gq+rGiY8cXl8ru4Hc1/Z+rGtzP79236T0ic75flR8p26K38S
53dt93mfpov22NLs3989euyzjfddascL3t0qnHX3WX8Ye8I+SfNQVC68Gptr
X4cwpJqnIsfPyvj1jho6YPpXrzQIa1o1Xvv1zXXDLptNHLP/TXl/NPCjhDa/
fuG8rVs0DdcS/8qOXxxxyrLxjcOI+X9Zc+m6+mlZu0NfHtg25wdS/r9tHX75
3bc4unXX8EP2pze6b3h5WFU458x77ttsk/z5CC+U9vupGibrJ8fHjkzNhizb
Z9N0Saud9zpxXoPQ6KdDVry8PK/P+Vj4/IynUHn+eH3q+uP1edzWNw3s9ePX
2WZHnHfitJWbhC+/fnTctj1z+/188Ibp+tPzqXxnmc+o83u0zLddv4zfkd6/
jN8/fX8reVH0syJ78YZXr73uiGbhyIevmHLADjOyx7/Z+vnhtevb+HR96vrj
9bnZF61uHvPhqmy3eQe1mPxqVRg3+sOOk07O98++w7+Y+9LbmwaZhzXZow9M
unz+8e+Y/JOLd5ve6fFmYckJZ138XsdXsu+ff6v9q6/l19f+c7ouuf/cB51H
1+s3plY4p9fxtx05aG32yg4vD17f42OTt+pxeu+5PV/LBs2Y0WvwFbXDiH8/
1Wj/Brl9vlTWY8T6DDvJejX5aNFXWavFVz90x2H1AvSZd3+R70/Xpa4Dxi9+
u1ed75t/0zi0u6V9i14ndUjdT91mi93/mfu/507a5MrNJ24aoPfix+d9+d09
8/P+cjo/nXEejp8xv+hmxC/aX/SlrXPoUxufjvvgnsuPu3P4Hwvrl/RLYv1y
z7MPPnxHtw3Gk/rp4Lv26droS7v+mzhuzVfvvvDkuIPCfNFndv05cx/sfXCX
dcozGl674/BhKxv8ov801veGHsKfx+tb3hu1B6uqhMc1z0/4GLzVx3+7YEa/
D3dKR4APSOXL5X229/sYed9z+0/XJfGIqvxqWW8B6y+1kPWYX79S/yTWP8Ir
mPcflvc8tz927ftN16GfLszry5e81Czb5Rf1B9Wf1H0d5off34P/16KWnzzy
hvnHd79Zq/VlZ+TX1+czCPvLh/R8Olavu2+jPjfZH39RX4710lH298D6U/mV
LD+O+JVS/R2qXjm4ge3vqC+w5/PQeUPS2WNX5/XltS9vMHvSdxQf/j7bG+8V
vx/0/gV+/6DPsl2h36DvcvsPz32Owx87U/RRNlD0U3xf9FU+P+B131X2z6R8
Y5Xr1/R/Yv1P+2Pi/ZH0v8YxqlRO+jGxftT1o+uD1w/pz8T6k/bfxPsv2Z+R
7U/afzNeP7R/RN4/aP8NrL9o/4i8f5B9UuAnpv0z8v5J+2Pi/ZHsh8T2A+1/
hf6rZD8kth/o/Qz8fra9vFbv0YO3TFq/unZBOGabBnl87gMc9yP082yyL0cM
PKDvG89sbbx67d854aMn2+f5dcoLsyPsW15/8nwUz6yqkv/L69/I/g5sf78w
8sUDLzyjbnpQ8w9OaTV3RJ0cn1H7vj3Ow/a98lcf7/B/z0I9k66bF0UfmZz2
x8L6ekLWQ+oB+2qqrBc7Xvnh+sn+ExYSPxzWc9L1jfVucl0XbMernPRrZP1K
+itj/UX6NbF+Jf0VWH+R/6jPeZjKaf/KeP+i/Snw/kT2WWL7jPaPxPsH6eeM
9TPtH5H3D/m2/bVgH9P+kXj/oP018P4Ke8+eH+zB/PnQc2X+dno/Ir8f5J9G
9k+hD0y+m+gLW994Xmaf7iLP0+6P7L/I9l9PGY+d/3kZr51f143K9TnS/dv5
lxG/+xK5ns3Tv2U8heencn5+58t8RJ2/+jJfJgc/p70f+q1yer8Tv980vozH
p++P6hn5PX9/pos9bO8H7GU7XvEX9V9G14y/JLXvcR0bXz3Z72wfxLcd3xXv
xa7wX+CH2PEPir1t9ivscZM/Jf5Spv4T/Kl8/sWfiOpfCH9prl+A51j/hNcE
7zE56ffE+p3wlcT4SjvZz0x+tex3tj6hj0zeU/SVzQ/5L4n9lybgv6X1Y+fX
56Nyfj7LRB/b+SeJvrbz0/pIvD50fVWuW/2syLrJfESdv1/LfNn1af9JvP/Q
+5Px+6P6W/HBLUh/0/UDX19H6vGHPyH2QgrA7/YUO8DkbHf2FHvU5M2gf/YA
Psn6h9Zn4PX5puAxUfHR+YLXmLyh4IVml58peKLJCT9NjJ+S/Zax/Ub2WWD7
TK/r8auT/VToP0H2Scb2CdlPie0nsi8T25dkP0W2n8i+TFUVnwJ+nDF+THZT
YPyT8OPA+DHhn4nxT/k2fLfgPxE+GhgfJXw3ML5L+Hdi/Jvw28T4LeHfhedL
+3PG+zPPK++/hF9ljF+RfZGxfaHzp3KeP7I/MrY/yH7K2H4i+yJz7Avrj8P2
FenvwPqb8KXA+JKsC83XVJww9x8bir8chgK/hj9tcnluDdEXv1WQ/Tfvj0D7
e+D940rBEwLjzCon/RlYf9L+E3j/4Xlh/JH218D7K+1POk9VKqf9N/D+S/ZZ
YPuM9tfC/JB9Edi+IPwvMv5Hzyfx8xkoeI3FN3YTPMeOB95nelpwzjy/ieyv
wPZXI4prfCB4I51/+6T4HK9/wmcT47OEbwbGNwmfLTw/wq8L9R+EvybGXwm/
Toxf0/oOvL7Jvk48Pnr/Er9/ZL8ktl9o/gPPP9m/Gdu/Ytfkfevl//L9neyL
jO0Lsv8T2/+0/hKvP72urhOOX5B/ENk/IPsqsn1l9UG4Dp9f+8PovvQ+9a/i
47TOUOUt0ogbj9i5aTitus/NpqHTs3steG5Kvv8c9dkWl8+8tWGYuvOeB67a
e1X2zuGzrjqobo6P7PbrZgtGdqwXXq6ua5qWnXvskuUPN8z1R2/0xRFepcbh
p/t+WeeU99fQ+iSu79W+PNJXa0/wU3Ux+eTbl674bFSj0Jl4FFTeuZL3PecR
3Ei59j3Wvh6fUX/y08rk2rcRfU3T9Nd2a3Fbnt+zpJJXJXD/I60r1b5Fnal+
G+cL3OdhY8/PfVkwnzz+gDrtrAtdX3lZp8jzIR6dnN9LeWfGEz/YevA+Yn0k
rJf8+ct6CrfL+optZb2Z/F1ZjxnWZ8R6zZ+vrOcM6zthvZt83aK/z7jhyW1D
u5Fndxwzu15YfdmQPww/5w2bnyVvLm45OvysD98ed+fa9EM2/q7T2+4/LLff
7vjnxHn1x9YJz1424cNu76W4+rujV+75UN5/8vjJ1+38SNMm4eu29yx+8epN
wgXV/tBiO17/fqD30Z8PeWKLJPHC5na8/t340T7Ll++7U6ozbNXwpkt2MflJ
PfY7/qqxDQPjmCo/95A1b69s/lMGuyp+QvjKfu9ePHazFvUC4zQqvwb45Q7A
Lf9+bDi2/S65f6HX+xPsvn06p7MnT8rjL3q+bYAr/FTn9he3G5/vj93k/wP7
ISrHeMORsAtxP3Z/6+V8ge1MlWO8AeMPo8j/0Oth/iLm08andg3mJ2K+TI7n
EfB8Ap6XXV//vl+ebxgkz9uuPwR/L5f1kf4i68XOj/UUkqwvXW8mx3rMsD7j
Z7JeTb5K1nNsL+s7rZf1bnLeN9TfUXnN+4Z+vP0lz39+BPvCedgX8P6anPcd
3Y9U/jL2Hbzn+n6bfDL2hfbYFyr7LP6sv7HvQM/YfqTyzth3tL/MDdyfnfQ6
7y+8b+h+Ys+H9H5h/6F9S/czvr7yT5/qXF/7F3ei63civc76n/cN3U/o/Lbv
eP2DrH+T7jck1/5FS0iu/Uk6OefXfeFQ3RcqeLxXZLzvYB3w8w3/wr7D9aW8
L+h+ofKEfQd2ToJ9Y8frvnM09h3dj2z9Y1/4EfuC7hcq131nLfYd3Y9s/rDv
TMC+85nuR5A3wr5QG/sC7x+87+h+pHLedy6i/Un9eejpxPsL7xu6n6ic9T7v
L8uxb2l89UTsZyrfHvvOYOw7Y7EfqVzjB4uxr+l+p/KvSK/z/sL7hu4ndH+m
93l/4X1L9zOVK/51HfYd3Y9o/Nl52NcWYb+j55fw3BLvH41o38E64OcbhuK4
fWl/2h37AtZd+gH7ha1/2nd0P1L5hrcq950Juh/p+pUP+S36MX7CpP17R9H7
eSj1/eT+4do3Zyb12Ve58sPeCV5Yrv9RfjXtU76hZWV/lgFkv/cn/XQa2c+8
P6i/0w19WPC3ydm+5/F3JPu1M/lnzDs8gubvItSVgMc3DSX+XvZveH9g/47t
b/ZvWH/Df0Pf810D78/Km3KX83y0Lhk89Bnzz19M93cR3V/Z+tH71X2S+fe0
b3w35/q8fri/j66HTTC/A2h+7wauOAJ5S3cR/jIZuPtNwNEmU/xI9VFt6Km/
kH7VuCRwiLgt4Q8zKa9hFuFzej6NC/6F9B/bz7w/PFAd3/wu+/rWR78dvP/q
iL8L+KfqWd4f5tcacUO/NguzbS6aP2z4UbUS/rbjFZcFjlXAZz8HrnIgcJWv
KH+K8wJ4f3hy3F5X/qp+g3DvyQuHvz3xU/3bxqdxRewjhf1B8t9bha8XP7Bs
u/5NA/6245vi+dTF82lKz0dxsXnAxRpT/qPiRsgTS5wfxnEbXj96v0vx/B6h
56fXRx5m5PxLzYvB+kyzaf1o3sGRmN/HaX7lu+A/2Pkd+97m17Ff7XjH/jS5
45/k91ezfc/nZ/vc7s+xv3N8tmb/hK/P9rfJHfvU5I5/Y/Pn2K+R74/8nxyf
qtl/s+s7/o9d37Hf7XjH/+P7Y/s+0fjYvuf7Y//Fjnf8E5M7/onNj+PfFdYX
+W8md+x7mz/HfrXjHfszX/81+ycmd+x7kzv2eZn9bfPv+Cd8fba/8/Vfs31q
cse/sfE59muZ/5Pnv9Tsv9n1Hf/Hnp9jv9vxjv/H98f2vckd+97G7/gvdrzj
n5jc8U/y+FTN/h2fn/23QnxF94UC/kBy3h/6VH8mdlc5+xfO+ZMnZ/sd539u
o8/P/M41n9/dH8vGx/iIMz4+vkrzWhifd8bvjo/te2f87vk38vkVzv8/PX46
v39/Jc+X9wdn/t3zs/3N8so88p/335v++3Pfc3r+v1XkSbrnd68v9Ta/yG+T
83ff2POz/nfO7x7P+p/ltTZufCbvXP2ZavLtqH7CGb+7firzrNzxu+dvtXHP
j8f/3P9f429F43fO795f2fOtRc/XmX87P/z6AD9f/X0bv+I7E4Ef9MLfKtf+
utwnV+Vit/0Ev/6rOIH676KfIPp7Nknc/57jmvz+A7eI+l5PIP3E8VHW7+jn
mT0pfT4j+nzy8eB9LeJnVcuq+WQieGbSB8IzY3LND5S/H+nO+vEA6dcW0Mct
0z5ulc83dde8M9bv4r/tCPynWSH//w7pJxeelz5z8U70mbP1UT1/C7LTqu3s
WqlyvHl+nubFMD8Q+L7Cr4QHrFAfu//tf1nT6+PaYdpTzV/qWmdm1HwblU+T
fq1xuPRxTdrHVeWbCB9QEj/jV8l4giB/XfpdZDdIH4zI/DKvSL+LMEz6YGS3
oo+byvtLPw3tsxG7oE+cyntIv47wjPTxCMy/g34d2c7SxyNqnzWVox9Ielr6
hKTr0cdN5Q9JP5OAPieB3+9HpB+J9ilJ2kdN5ehnEtDnpJBftoP0K9E+JvEv
6OOn8g7SLyWhj0p6E33eVL5A+rHEutKnJX2CPoIqnyf9ZMLd0mcmsv5DP5hw
pPSJyZqhT5vNr/STybpLn5mC/r5b+sWEIdJHJnRHn8DK8W8aVvao7mMTr0Ef
OZWjH072hPTJidqnUOWjpN9OtqX04YncnxT9dsLZ0ocn9EWfP5UfLf18whzp
8xOPQp9ClW8p/YLCLtJHqMAvcbv0C9I+Qkn78Nn4pB9Rekj6FKXR6COockd/
2Pg4v4n142noj9cfffHeBw+oyh3+sFz/Qq/qeZWnU+XgCwibgDeM9a/yd2me
tp5P5f8Erg0ekqA8oirX/CzlGWT9DL5T8PMsLvCfge8T4/+qsH8pP/Ic8CLX
bF/n+vl8sq8l7lIP+PbrGevX15FPjT7X4Y+ETyl/GfaZjPeXjY3fvFGZX2TH
K/+a8q5Bv9rxyk+mvGTKg2nzj7482pd1HHhCVb4Z+rK9gf4/vwMPqcqVP015
05Qn09YH+rNqH7ou1F8I/W4y5R1jfkDlF1NeMdavyh+mvGGsP48Hv9cF4PVS
HleVPwj+rn+Dt6s3eGJVrvxsysvG+lH55ZRXrid4QFWu/GzKy8b6Ef2MQi/p
c5T9F3hIVa78Y1eDdww8ZCa3/szQezOpP4/yp1WBN20W8U8qPxr6RGXKY6ty
7Sukeu8J8KxWnv836e/oX3QreGJV7tgvefwH/ae17/Tr0uezYH/r+8n6QfnR
wFNWiE+BnyF0R3wKPA92f2XxUbWfNA+I/We2T8HTRMcvUT2ZWD+Kfq4KXapx
0M8jx78c/WPnBx+68qRH1m9v4f/fQH5SR8r/GKX9wKv97g8xb/op7D9VjJ9o
f33tq8/29yYUX2D82OH/sPtXfoCXwQsA+9KO1/752jf/JekzaMdr33jtO48+
9Ha89t/cBHqutvQxtOO1v/8S9PVHn8R8f0Z/fu3Lz/0tb4Deewl9N/9B/dl6
oP/9weh7z/pN+9trX3vWb9p//kX0nUcfejv/QPSX177y6ENp8ofBH/AueANY
vyn/wULwHnwjfS7t+sofoLwBBf8d/AedwXswQfps5vFD9MfXvvjo82nHa/9/
9PkEf0i+v6res7671N9M+/ejT2mGPqV2/AT0tewMPTdO+pTa9bX/rvbdBQ+C
yR3/NR9fzf6nyR3/0p6/438TflDwL+38jn9mcsd/N7njv5nc8e9t/h18wsbv
+Pc2v45/WoZvlPmvJnf8b7u+41/b/Tv+tckdfMLkDv5gcsd/LfPPyvwrkzv+
d5n/mirPX/A/Te74l2X+d37/NfuXJnf8L5M7/rvJHf/M5I5/X4ZP2P05/r2t
L8c/LcM3yvxXkzv+q13f8c/L/O98/mr2v03u4Bcmd/AJk4td96by1BbiBxIP
Wp5V6kX9aPx4cRT/dQsnPpTrz3UUv7oZ5x0Nvcj1QeCzTvAD0xHk/yG/wXhw
WT86/rc9H6f+xuTIS9e+bRnbl479a3K2b7sRv4XE72vh+AWR9eMc0atZED1b
6C/E+V/rKX9wFuWPcP3MTtLPPPtG+pzHntTfXftba1/r/cETpnLlr58F3voB
4CFT+Tzpxx4/lz7tqQv1v68Fe0L14jDl8ao4//bgzW6TLgRPmMqlv/d/aR/7
Av5/v/Sbt/7tVX2Fp0vlF0i/+ij+7eYF/VcP/PEzwR+wSnniIEd/+/ij9MlP
d4FHTOXot5/Qhz8dAZ46lb8jfAHo0/ttwT5U3hbwBoQAHjCVgy8A/u8nBfsQ
fAChEfgV5oKHztY/ziv+68jsDPCUqRx8B8qDEH8DHjxbv8KnEG4VnoU4k/gF
tF+y6sWPwSOncrXnJwqPQ6Y8eCp/RPggsuuEJyIx/4L2t1e9+D143lQu/FxL
IniS0h/BU6dy8W+bJvB8F/Sfo59sfPJeNU/gKVUeTTs/41cdavQPGwMXs/5L
VSpn/5Dj05z/xfrPwQft+FMx3puQJzWA9N8M0l+aR6vy0WRfzgWPsspVX72H
+h7Wn7ALk+Rh7Vjov9BE7NK0VuzUxPapU/9o51e9qLif4oEqP0f4itItwmOU
mL9J9Rt4IuIa8BCrXPXiu+gLrTzHKgffUmopPEwFfqs5wrcUgP+FPcATrHLr
Ww7cSXmIVQ4+qtREeKoK+q+N8EkpL1W6FjzAKgcfVQJPVSH+LuOrHxpCD/4O
PNQqt/MKD1ZqBJ5ilW+F45R/ZYzyYEM+SfjA0nPCE1aID4t/2ir8A3pwLXiG
VQ4+sASesEJ+wo7C9xWOAH/ar8FzrXI9b1fowXrgQVb50ThusPCcJeXZVvko
4UtLfxMetQJ/mPCRdQyDgLseDZ5qe3+gF7Uv/Dvg2VY5+N7Sa8IDV+BXmwD9
Bp6dtA94pG180IvAMZPyYKvcsZ9s/MD9shaCAxbzS2rWPzn+SPnnLHfiD3T+
VkGu37QQ33bwPbp+7bCH2Llefr3Vf/P5nfplvj+rv+Dzy7efn4Nx630487c4
Yp4K8havLP3+0zGtw2FfXf/Mxa+3LIxvfMenZ93XuVGY1WvJ6WeM+qE4v4vP
e3Dc4ZuGE144ac6hF7xfeP79N//wwMGXbxFO6Tp40MljFhWOn7lVr+P2eX9R
1uKpM1/f+v5Niuuj74O1+q1pkD6fdv2US2Y1L9QPjt/3sOZXN/55v9rnkcmP
dVhduP4AGZeOs/h8ntl21L2f1U3HXjTjwtY9ti2cf6bcd5wg81CQX3D3KXde
Xmfr0OeN6YNnvraicH9LZNwB91GY3ysPm95/xIINWZsjBsw8aerSwvgxL2Ga
zFNBjueW8BwL94f7CrjPwvU37F09b9kEmcfC+U+Q5xZPledYOD/GrfdROB7z
Ei+UeSrMX1n/Asc/Mf3l+CdB5Y5/mh9fc/zWru/4p3Z+Jz5i9+f4X3Z9xz9M
leMr+H/5+1Wz/5fPX/Wn4D/b9R3/2O7P8b9M7vgXdn3HPzC54z+W+V9l/pON
z/GP7HjHfzS54x/l81uz/1Dmf9r4HP/C5I5/WuZf2/gc/5SeX8G/SpXjL/jn
uf6t2f+y4x3/y8bv+Jd2vOM/5uu/Zv/Rjnf8b7u+41/b/LBeYv3k+D/5+pC8
jHiv5GkU5E7+g8klv2Mn4O7NC/l1AxBf7FoZXzQ59FZ4V/RY4fzct4blWp+k
daMsn4G47G+d+hL2PwvXl3Fncv7VhfHL+V+OmKfC/B37t169h65vF06beP9j
ffrsUhjflJ1XP3HhoMahyw5Ltrp/3Lri/c/+9pIuc+uEv04e9U33s54uXL9r
vwNbzzx5ZZwyqGH3A05vWLi/E37f9vHljaZmp/2r3YhLz6lTkP+7Rdd+n/Vr
mK55atB1XR9pWRh/l3Wzrjn9lrVZ/4s6dn/rrm8K1w8yrqyzjLP4fD446o1u
O9VOk0csm/DXE5sWzt9J7js+IfNQkPd4ZvHri//RIHy4+vqJza/4rDA/I2Xc
4R65j8L8th4y/cVD5q3JLlnfeYtvBnxb7D8k8xKukXkqyPHcEp5j4f5wX+Em
uc/C9U+Recu6yzwWzo/nFrrJcyzc34Uy7mxHuY/C8fNlXmJPmafC/JX1T3Ls
8xxfrnn9B5Xz+8P5FZxfxvkZDn8k49v2/nN+RDeKn25H+RkJ/MrII0l3UP4I
8hY0jyFVVXx+Xt+SNwFcqF4Bv0HcOXsCvJKvUfy5P/gb/wreRo6fg+9d4/CF
+LvyYyov5nsUf1b+R+V9LOSH0/7P8W3lh1ReSLYflJ9ReRnrUn5DJ/BnKm8m
8y+Cty09hd/PofwJ49cEr2bN+HC+/3ek+LnyayqvJtsPbH8wvx3i9gFx/DCW
4vfIy8iUt5LzM5SfUnkpE+WPfCx5H9kl4MUcTvkfyh+qvKF3UH7DR+AHHQ5e
0G8pf8LB/0zu4L85vlhz/qcd7+C/dv/6pqidPpryExx80+7fwV/teAdfNbmD
r9r4HHw6n7+a8WeTO/imnd/B7+x4B38zuYPPmtzBN03u4JM2vw7+mPt/NeOz
dn4HfzS5g8+Z3MF3Te7gdyZ38F/yXwr4tR3v4L/2/Bz80o538G+TO/imyR18
0+bfwW/teAefzeevZnw2959rxrfteAe/NrmDz9n5HfvX5lfxh/7AHwr55fh4
9YXcX+USqk9C3CchDpT6U34445+cn/6l5M1H5NGn5ZQ/7+z/ofL8X0Xkkaeq
is+K7ErwmyqvKeffKn/oveANPYTyh5F3nCnvJ+cfnwN+1hfBy8r5t8h7jso7
WrAP+gs/6z/Ayzqb8nuVn1R5Sfn9V73RAHZCd8rv1vdbeVtnU36x2hX6+3jK
H1d+1+fB68rvv763mhfJ+cPK74o86sL7j7xxvB+zI+eP6/vdDe/305S/rPrh
PegHzk9H3nxEHn1aRfnzys+qvKxnUv57n2XCX/sSeGs5vxt541F5aX9P+eNO
/YZdv6x/qZMfzfFJjg+YHC+CXx9cc/yDzl+Ib+TxoZrjGyZ34juF+OomTn8m
Jz6Q51fUjK+b3MHPTe7EN0zuxA/y51dzfMDkTvzC5A4+nj+fmuMbJnfw83z8
NcdnTO7g//n1a47fmNyJD5jciQ/k81dz/CN/PjXHN0zuxDdM7sR38udTc/zG
5E79VFC5U/9jcqf+J9n6rrn+x46X70J9kx3v1C/Z8U79kh3v1H+Z3KnvMrlT
P2Tz59TXmNypn7HzO/VPpl+d+h6TO/VLdn6nvsfkTv2MyZ36J5M79TUmd+qj
8vVZc32XPV+nfsrkTn2RyZ36MBp/of7I5E79kZ3fqX+y4536LpM79V0md/Bn
u77+Pa+yPsjkDj5tcgefNrmDv5vcwddN7uDrJnfiCyZ34gcmd/Bpkzv4rskd
/NbkDr6e31/N+LXJHXza5A5+bnIHn82fT834uskd/NbkTnzA5A7+nN9/zfED
kzv4dH79mvFpkzv4u8kdfN3kDr5ucie+YHInfpCv/5rrx0wu/dCaBK1j4/4T
4tdtT7/rJ+9/cRP6WhT4kZBPqLg4718Ovm3HO/5tPj7x+wNwgMD5WbM0XxW/
j6L8tC3xO3CCxPlv0wS3CJ8IjhE4P+sCwSUCcIqM88eOxe9tBOdIO1B+muw/
rQJwnkL/A97/3qb8MeA6AThPof+B7r/XY/+tS/mL52FffExwoNSH8tfEH/5K
caZCfqTs/y2D4NdbF+o7eP8bTflpwNUCcLZCfQfvv5wfibh8uFFwuIzz46Zj
v5wuOF/anfIvbxXcMQwUHDJwfihwRfv9V5T/qL/vKDhlxvmXLQQ3DcBRA+eH
Iv/C8kY3o/zEy/A7cNa0jvIjnfpPWz9O/acd79S32vic+lW7f6d+lY4v1P+S
vFDfa3KnftSu79RX2v059ZM2P079q8md+s5cv9Rcv2rjd+o7Te7UT5rcqX81
uVNfaXKnPtbmz6nvtflz6mdN7tSXmtypD7b5c+pPTe7Un9r5nfpXu3+nvtfk
Tn2vyW9BX4xDpI4U67fY/4n2v/z54vcNUmeF+9JP3n+6ndP/2Ynv2v3fTPjP
Kqp/uknybrLTJQ8nzaL6DfGbmgTk2YTDqH5F/3/DAtkn11N9zFjJGwq3Sx5R
bET1G1dJXlCmv7em+pKt8XtbyTNK71L9CvKqwkGSZ1V4/3av9otujvoedaP6
EsFvNw/nSJ5Vwb+cRftbf6pv4vfrE6pv0ffzZbyfGdVPTZW8Ns1zK7x/iBsh
/rokO5TqVy6VvLZskuS5FfLDJC+qTdD3+CKqn9L36ye8X2uofkbfT33vDqf6
rBWS95e1kTzA2IPqx5DXF/T3O6k+Cvl/2X2SJxhTn8r6LOQtBuQx2n6ocsHn
R0b9/TSqX9LfEWdM+1P9FPr+h9GV9mf+ftT8/pkc73usrOvWj5tfYffnxFdM
vpXUfWYjpQ600H9pM6nrDFJH+mm2kPpPoS40217qROOfqb8V6lYT6lgT9196
SupStU610B9Kzt8gTZQ617Qv9Z9CXW9CnW8hvvK21NVqnW06mvpDoa43oc63
kH9xhtTtZqdKHW+hPxnqfhPqgBP3p7pE6orjNKkzTjdS/7N7pa5a66wL8ZVJ
UtccUOccRlH/qX2lrjoEqbMu5F88I3XTAXXU4Qbqf4a663CD1GHHztT/qo3U
dWcXSZ13/IL6q42TuvNsjtShxxup/xvqygPqzAP3Nztc6tLDMqlTj02ov9rT
UjefDpQ6+nQj9X/7UeritU4+cf8xqXtfFVFnn35F/c8c/9Oev5NfZXInvmpy
x3+z8Tv+iR3v+Bcmd/zPPH+rZv/Njnf8L5M7/pWN3/E/7XjHvzK543+Y3PFf
Te74JyZ3/Ns8v79m/9yOd/xbW5+Of2bz4/j3dn7HfzO547/Z9R3/1I53/E+T
O/6nyR3/3eSOf25yx361+XHyE/P4qXysf9TNZJ869l+ZfWPz59gndrxjv9r1
HfvP5I79ZnLHPiuzX03u2Gd2fsd+Mblj/5rcsW9M7tjH+ftVs31v8+/YxyZ3
7DuTO/6BXd+x/2z+HPvPzu/YtyZ37Fc7v2O/5v57zfa/yR373ubfyd+14538
HZM79pndn2N/2PUd+8Hkjn1pcsc+s/E59lWZ/WTHO/alXd+xn0zu2Bf5/NZs
n5bZH2X2qx3v2N82Psd+tefn2F+pcvwF+93kjn1mcsc+s/E79qcd79iXJnfs
S5s/xz4vs79N7uR32/w5+c82Pid/2eROfrrJnfxwG5+T323jc/K37XgnP9uu
7+Q/2/FO/rNd38l/z/N3as6/t+s7+e92fic/34538rvt+k7+uR3v5Jeb3Mkv
t/lx8vNN7uTf2/05+YMmd/LrbHxOfpzJnfzHfP3VnH9ocid/0Mbn5Afm+rHm
/D87v5NfZ3Inv86er5NfaXInv9PO7+RX2v05+Z92vJM/SPZPIb/RjnfyF03u
5C/a/Dr5n3T+Qn6n3R941YLyqi0jfjXm12uOv1UufA0tQotqXgPFrfSzImu7
xdGtu4YfsoFn3nPfZpt8H//0RvcNLw+rsusfmZoNWbbPpmnrnw5Z8fLyJmlo
q533OnFeji8N2/uADvOntcH5ty/4n+CNy5Q3Dt92/Png69DzsP47buubBvb6
8evsy68fHbdtz/Wx7hHnnThtZY5vgK8wjXT4C3+z2cQx+9/0eTxm6IDpX73S
IK1u1Xjt1zfn/KFcP87rc/4V65Zet65hePu27z7a6tHvs5bV95nXB8l3nv9V
0I83vHrtdUc0C098s/Xzw2vXD4c9fMWUA3aYYcf3Hf7F3Jfe3jQ8+sCky+cf
/06U57Umty++aHXzmA9XZdeM/rDjpJN/iLvOO6jF5Ffz56N8AVoHojx7Kv/k
4t2md3q8Wfjh+bfav/pa/bDohLMufq/jK/n9dR5dr9+YWmHyDi8PXt/j43h2
r+NvO3LQWpO36nF677k9X8tG/PupRvs3qJMGzZjRa/AV+fNb2u7Qlwe2XR93
+uKIU5aNb5xGzv/LmkvX5frRmb/cvsb8K09QS+IPqX/yhsObtfg2G91kw5A2
u6yN6+YP/LFu3NPkyh8Fnr9Cfpmuq+Y4b8c6M55e+Hmuf6eNDuOGbN84XDF1
08sndVtbwP+HHRfv7/BBrXBqtf/7UdTzqbzDW9cMve/jTmHKsvTI9Q06hu5N
Rn3/Woe+dvwcPJ838Hz0/1Re94O5r2z92Fbhb/tNSp/stKKQXyZ8jQ2D8B5q
XEQ/K7LtPu/TdNEeW4bfPXrss433XVrwz+R7TvcZWJ/bE7/L76r5ujYPF1fz
Zr1dyM+QuGuroL+fefdZfxh7Qo7fHCXvVdhF3rNsDb1fZfyh4G8L14O3rfWv
Xzhv6xY5//qOsq7CMlln2dWyvux45/2x5491o+so7rD46ofuOCzHLzGRhl+c
T/xB507a5MrNJ24aPj7vy+/umV/sr/nbvep83/ybxuF3p26zxe7//Cnb/Zb2
LXqdlOd/6vOo6/CLcn/Tzjifylk/Htxz+XF3Dv+jHS+4zEe6ThOvz3ueffDh
O7ptyBYPvmufro2+LPj/zvPP1+/cB3sf3GVd9todhw9b2aDYf3gO/n++rJO0
+qt3X3hy3EEmFz7UTcL91byrmneQr1/Gbzf0qORP+kr0fnaM7AOxDun/j8FX
fQR44o7/dsGMfh/m+IfqQ/DMRuWbVfnVotfCdqLnIvSbHe/sXyZ39h96voX9
xdaPs//a8fJd2F9M7uhnkzv7t8kd/W1yZ3+3+XPsE7s/Z3+35+fsT3a8Y9+Y
3Nm/TO7svyZ39le7f2d/Nbljn5jcsT9Mvmvfb7oO/XRhduCSl5plu9Qq1h9V
81Utz2T+i/1XD/5fi1p+8sgb2d1v1mp92Rm1HX6yfP2spferU7W++TZOrt6X
Giboe5O/jff7I/w+mPQ/eJdt3y3UJ9e8/9rzf+i8IenssauzL2tf3mD2pO+K
9cn1d6h65eAG6Bu9JGP95uhfk3P9bFf8n8rHyXPXdRB3Iftqmqyr7ANZZ+kc
Wl/MPzyd+IcvkX0t7gCe0t1kf7P5a3t5rd6jB2+Z1i4Ix2zToEWaRM/feT42
vqsHHtD3jWe2Tu3eOeGjJ9u3LPhvvH//QPpZ3s/64I1TXtZ8fc0m/cz8fi+M
fPHAC8+om35/Squ5I+psq+O3+XXsIzu+jN+b88Pa43yV4y/sjyafjbqJF2Ud
FfZH6IUEPZEOIfv8e9FLaZHoqbSA9JPyhy4Ef2g/2X/s/KovwIOt3yZ33h87
P+wOtUMK+uF5zH/PyvnP8SXiv2a5Y3+aHOsy7CbrtODf3Qv74stK+8LkB4he
Cx1FzxXk2Ff0uRTuD/cVcJ+F6+t6+8bhf5fvXP+xfImMO/u33Efh+PNlXiLm
qTi/NeuvpHJHP9j6cvSDrQ9nf8jxi5r9J7u+sz/Y+R372I539F+O39Wsn+14
R//a/Dn6147n54f9y8bv7E8mZ/7oAr6Av5tU6h+T/1P8wvia+IkFueN/mRx6
OUBPF/CNN2Ffz660r02O5xaCPMeCXOcberBwf8zPzfKlsm6zKbKOHf8k1/8s
ny7jVj+hcPw+Mi8R81SYP0d/mtx5P7OS69vz5/Gzf8f4AvuH9cXuzJrC7mxK
+NolmP9zMf8HkX/WGesdfl3ahfzDp8RvVT8WzzH3Xx8Uv0n9qFRV8VmRnSd+
WxTe7c3Bn5H7b87+Y3LH/rD7c/AXO96xP2z+dKTa/4T5Y539lfRbYf+34539
3eTO/m7z69hHdP6C/WNy3R82r9wfbPy6/n9duf5tfsZC/zaA/l1P+BbPXzPC
x+B3xQPFD0uMDz8hdlfaE/MWCJ9qRvvvHoSPvSW4XQSOl5oTfuesPxtfQ8Gt
4pmCY6Wqio+L39n4nf3f5IrPLKvEZ/L8vJrtAxe/Zblj/+T+b832jckd+8bk
jn1ncsd+M7mDX9r8O/ibyR38zZ6/g7/R+izgi3a8gx/a8Q5+aMc7+KvJHXzV
5M7+Z9e3vyvxOZM7+6PJnf3R5M7+b3Jnfze5s7+b3LFvTO7YLyZ38LP8/IIb
hT8JjhQ4/iN83c0C/EibB5U/Jn5rkP3v2+w98l+vFNws3Im4zZ2Enzn7qx3v
6DeTO/if6S8H/7PjHXzTxufgl3a8g1/S8QX81+QOvmvyswU3zPYQHDEeSfE7
Z/7teOBKmYy7WH/SCPG6dwQHjY0I/3Tsm1B5/lz/Mf7jPP9Qcn2Ty360Fd4P
rUvJx+/YV6Y/nf3N5M76d5//+WTfOPt72fMzuWOfmhyXtfhFC/L/HPvV1r9j
P1B8Tu3JvE8N3X8q1AFCjv7Yide5yt89fNZVB9X9MR712RaXz7y1YZi6854H
rto7r48499glyx9uWOdnv7jZgpEd64Xnq+sUp5n8t8/uteC5Ke/GFmnEjUfs
3DQIj16Rn5774Ki8PeoZtW+H8NXlz0f7bfdG345Tq/t15/EZ5T3oT31EVZ6m
v7Zbi9t2tL6o6Idgcv2d+6jz+blPqR2P3yffvnTFZ6MaBfQZsvnRfqfaV30m
nR/jLvQ5UnkX6rswDf0YVN6Z5HNIjnEl7oNk4yu5vp4X8xi0n4TKldeLeQ5V
jueW1oN3TPqt5/pV+ajbgZfnMXn+djzWZcI6zbA+c/xK1l3qLOsww/qz82Pd
Jqzj8JKsXzt+/F2nt91/2Kq45M3FLUeHn/Xe2+PuXJt+sPlb/d3RK/d8qG66
458T59UfWydMvWzCh93eS3b8isuG/GH4OW9kPy36+4wbntw2dBh5dscxs3P/
tXu1Xd48XVBtpy+OD/Q++vMhT+T8lLWHrRredMku6Xf4v0aP9lm+fN/c//47
jjt+8nU7P9K0Sfi67T2LX7w6j7/9/dhwbPtdmqUrgWPBnrTj19e5/cXtxrdK
jLOo/BP4/QMPWfP2yuY/ZUcCD1B5t87p7MmT8roh+At2vP5+Uo/9jr9qbMOg
eKrK9br7vnvx2M1a1Au1YS+pHOPW+whqD6t8PznO7CrYWzY+jDviPgLGb+c/
UcZldv0y+CE0/mwfuc8AO9+ur/baTzKPATi5yfFc9TkHPF+T47np88/w/Gz+
8NwD1kHA87fjsS4T1mmG9WnjXyfrLq2RdRjbyfqz82PdJqzj8Iys3/9D2nfH
+1UV219iIBiChEgwCQihPTqGJCIicDbtyUPkKUhVwQIhoNIRpF4VeUBCEZAn
RUUpUqUkFCmeTXm0hNCLAkJIKBKCoSo1Pz531prjWeeOO/rjny/5rrvP95R9
Zs+sPTNL+Uv8fbS+vFVH64eM79Hx1EWlTurh0h9xDNYPrht4j5v8OBl/pIzn
uqJ1uMS5rrBvq/ZPPZPrUjCe60Okr8F+ttrn1sdjfeC60NG/XcDxqhNEnOvL
9OD8aL9ptzv9cdCPoNOnADjXp6j/no6fL/qH/Hv2OdH+eBPl/CbI+bEu9IfS
p4T4B1hXqOv4gehbTsLfH4Xxk2Q89HXr30idAHGuH7dj3VgD/ybOvz8vGM99
ed2nJ/7kgEln7LbyzHrpw5/sPXbHAYn/Jv4i/h7+YXpFxjMeeAZ5EhofWP7S
6PzX2ZfOWXbC8Mx/63jNsyBO+61xLnHymeQ5Nb+I64PusxHn359ZGP8Sxl8p
43k+XFeU3/4q7LfyEMSxP1STn5kh8SnXB/Jknf5j+HvGuffKePJqXFeukfFc
X7iuKD9wPuKxSYjTNL/y0j5++vX6r7+86rVDNnnb/02c8ZzGecSR31Ejv6P6
hMQn153+meM+PnhIvujbM499+ILnav6bOOOZQRLnEO+R/6L4JcLbeotdvG0P
unjb3nVx9EupI3wBjx+ef+n4Z7fq2cPxVYS36237Ob/WevGvn3/p/pfOv73e
/tvnH15/6fmWfr+tV/Wv/37p+Szg8cPnM7qV79HF2/tpXbxt7/o5/y3+MR/p
3z5+OL50/FGt/ZRwfOn6w+O315t//fxL9790/qNbfPy/ff7h/Co939Lvt/mq
f/33S89nAY8fPh/VjXU/FfgE6fuo/Mhk2G/4ffko0W+QvlyuV0Gcx434I9WF
Qb1pEz8jnsEn+tk2/EQv4plDUXc6F3WoxOnP4rNS/TpeHz7z0XJ9tC8R/8Pr
ot89Xe4f4yfyNKo//HPYN3ymNUVfnf4z+cM7hD8s3T+ed8TvlZ5Paf6U7s8P
8Hx6g+dTmj+MnyL+kPEn+9yMkfuneWtaX6L7TsqP6L7O8ciTJq552Zpf+9X2
vl2HP6L/yDzhjyJPmDjjGXxWiHN8POMh8uCIkxy/BP4sPqt55ucu8PUxX4x2
7GXhf3hd9LsHyv1jvITPhDjK7z/jJ+6LzMI+CXH6y/hMF5sf7c9X798guX88
76tlH1rOP2ke54LOnyvk/ig/9hc8n5dln2JB5w+PG/GHWpf2uNw/8vcRf0F+
PuInaLfAK+e1pH8i+fOI3xH+o6NPJvyA75f47+Pf5wb8AfdfyGuT7yZO/hy8
efpA9Efpf2ufVuIT2/wT9ykc5/XeFfRfpx7RVPDy7Xig8d/J+2t/LvLz5PfG
Cr/H6+W+06O4H35+hfsv/FbmfFnQ+SH8ns8Hnx9tfjLzeojzfkb8Xml+YV+k
4r4In7fj4O8j/oL8P/JX04ng04mTlx6GfYWFsd9AnPx6xO+cguMxP5a/R5z8
8o3YF+F+CXH+O4N35t8T5/4Lee0XwHcTJ3/OfQ/uoxAnr859Fe63EBf+ifsU
jn+9zW/VvB/Eeb9w/xLvp9zffAl4/4NxPsTJz4OXT29jv8jnJ68X+05+P9rn
X30FdhP7FH5+nA9Lw+5jn8Jx7t9E/BX3f7hvsj/2U4i/ifNdG/sK7+N6iPN+
Rvwej4f8Fu7T+PjD8DznYl/k63jexBeQ/0/h/jf0nNhHCf3I/PzmQE8J/f+S
/bvhV8fBrqkOBHHyQ9H+CPWcaB/PFvu4O/SgtA83cdF/Ce3XhdDhQL97x0v8
zRdhb5gf1r6PTX4D9KNw/s3+GvMzoT+VLD65rzm/Vl/zxcD/z9bzT9TxfQQ6
vn5+Bf+d+/bR/veTpueRVOeDOPREsuqMEIeeRNY+YsQ3gJ4U+lzU2h+CekrU
6TgXOh1+/uhLwT5i2r+Pek8Li44G8b2hx4T+Cum30BkhPgl6XF+DjsRh0JEg
Tj2vC6AjcT50JIjzfaYOx/XQ4SBO+7kFdDYOg84G8c2h96Q6J8Rvg14UdU7O
sn4Xmn/pOia3QceEuPu/0Ck5EjolxKnrp30Eff6iPwR1PHqt34ePpx4a+oOk
46HTQRx6J0n7CBKn3hf7qmh/iwQ9NNUJIc64GPtU1W8kPr4ferXsswg717FP
PfhP3//zoDeL/qjpJuuX6uPPadnXrn2jfdQ+4cSXgd4t7d76Et9SLzfKH6H9
GyU6X44Lf6HvP/KLaNdo5/z8yM9H6wfzuiL7hj/sZX9M6PUG+589aV3TM9b9
20Qd8nHQISde8l+Fd+js395p/d7TdegD/yz6wBOfaf3mM/vQ34E+9MS/Cz3c
q9FXSfVxFoXeLu3iQOnPhH7t3scd/YKa+YW+UOgvhH6NrznO/lK0i+hX5M/v
OOjVHok+9H9BH3rim0Kv+HH0GUe/JMepdzwRfcbRj8mPT/u3Kfq0fxF92onT
X2Yf9v3Rh534POjhsg/+s+iDT/xc6ulKH3z5/U6fe+LkLbSPPfGr0FcJ/bFg
p95q5g/64rhdXBx93oFTL/pa6eNOHP3wE55jpz8P9ZBpF7W/FPWi2Uf+m+gj
T5z92S0u+sD1LImzv/tJ0Me2eLXxH+2T7+ewxOMRhx5Cgj4C9RL8+E/Bf3j/
pT6/oT7K/IjcPj+3a/XZkj+iuiqqH0z7FvmHtG+RfaRds7zJFZAnMcJx6oFu
0nd+T1eWP9nwb/B/q8j/xfpQResD7VFkP0v7c6zrf8f0l9PHTY9Zru+tKp37
9Xe2emZguuv6kbeut/B0//0ZsHvR+jQLehp3mV2rjzU757/venLm99EPdPxc
9KO+w/rjpaOtX57fH/a73tP661UTrd+e/z7t4n3Wn686w/r1NfEH+kUfbP39
qlWs35/j/4t+1Bdbf8B8o/UL9PNj/0v0F0w3Wb9Bv39fQ79x9C9kP8Pm/qBf
Ofon1uin6Mcfjn7TvdbfEP0aG/v4EPpVo39iHm79FB0nv3iF9W9M91g/Rz8/
+o97W3/GNNf6NTq+MfqZo39kQj9Jx9kPfab1r6x+b/0s/fqWQT9r9JdM6Dfp
z++n6IeN/pXpHetn2bG/6J+ZLrF+mh37u7H1x6w2tn6Zfv07o985+nOmfa1f
p5//zui3jv6e6THr99nYN/a9tv6g1eLWL7Txv9CPPFt/0epo6zfqv89+6JOt
P2lGv1LH2X93Cetvmtawfqd+fppfp/atlN+wTSu+7Mf/sv967Thzae/9+vj3
5/Tb57+xn+YXPkg91gZv8Xuza+jNOT6+Fd8PdTtCfD34q4X4PkX2exT0QCL/
l/lw64I/3Ev4Q9pPxrmPSP447a7xhwOS6UE/7Xhpf2psgZ+8D9f7jNndqjI7
7HiCnob2kSS+F/Q6qIOOfth+flug//BK1v+3esX6ATf8P/QutI8k8UOhpwFd
mzzd+hE314f+zJda/+L6Oetn7Pg86qWgL/x06V+9FfRW+L0d/x/8ix1ML+Mi
65/M6/HzOw96G+xrjH7NPp7+5XesP3R1nfWLdpz20fqA/rFGP2jHH4UeC/pT
p6HS33tl6Lnwe/TL9vOjHgf7po+X/s4ToefB74+2ftmd+Bz9udHv8rWOfTS/
dCHE5886/gz0WrSPLPFPQy/mTMQJ9vvnSHw/IE2w/uPpHOtH3sz/g6Cnon1k
gW8DPRfoB6D/ZLO/Owz9v5+x/unVydZP3XH6dZF/144/u/wa+bnIf5qGcZH9
wx/Sv8U+fbP+TmzFz8MRRzb8cDt+Hgkesdk/Yt5tKf6nH/dH1BsR/zb0ACN+
k3qChfg/3P9h/LwXruNs2f+/txW/j8A+Vmd/KE0M9ue3bvOOnfxs6v/Cb83w
Yx2nHl9k/xaB3h/tJnhAH78D9A/2Nf2B/CvTI2jmF/TyTOdsVCKf5fMbeny0
m9NF3576ENuYfkJexvQUHN8AeoszTJ8BPGdj312vMbCfJ0NvbzXTb6hVP2Eo
9PpwnRl6EY5z/9500obnpU2vwnHkJ+TzTH8CPGTzfJeDnuOKpo9BHQ6//9SD
5PfQ6/Dxb0PPz+Ln0R19CeoBRvaT9eKXmz5Ihl6IH5/28RXT/8i7mh6I4ztB
79H0O8Yk8sH+/kBvknYT8bfjg6GvcZLpn+SDTQ9Fnu/oFNm/ydCDpN0Ej+r4
dtAfgX5Lhp6L44i/ciH+ylH8RX+wEP/nKP6nf1iITzO/CeLTqhCf1lF8KvoC
nf0r5j9F/C7tX4EfCO0nr7vAD+SIH6BeZIEfyRE/gvg8rD9FfFYX4rM6is8Q
/1ZR/Iv4NRfi1xzFr7SbUfxOPYdC/JWj+Avxfy7E/zmK/+k/FuLTXIhPq0J8
WkfxKfiRusCP1BE/wvqIAj+QCvxAVeAHcsQPsD98FP+CP8kF/iRH/AntZhS/
My6L4jPy/5F/0o5/b62wT9LgsG+PB/Fde/+66ZNKvL2/1N0/d/tk+xrc59Df
TxZnvgF/rcnf4/5PlL/E/aOIf+D+2Lmov9pK6q/8emxfBtfb2DfaP4ub76ux
z+M498fuFx1B4v+B/QPqOOwNHQfi0GNIt0GnAfsQHX59JnQwroEOBnHy4/tB
h+MY6HAQH4z9lyg+5v4N/T7GyX5/MC6Kj7h/MF50NojT/qjOBXHuj0wSHQvi
jPsi/uAs7g9BhwJ6vn593F+I4kfuT9Av4vHk/Kv7RCeEeDt+bXRCiHN/a1fo
YGCfq7GP2N8ZIzoixLk/NAs6Itgncpz7W2ue0NbxIK59C/7V+lTalci+sL50
/hp9eSX1by3PxPF2fk13/1nqgzr1xXu28qNn1y9anoj+fnrQ8kJqi+8a/4L5
M1H8zfybqP8E84uODPK7uX8S2QdeF/1S5Mk4zvyil6Azuhl0RolvhfwL5F0w
D8PvH/M3DhOdDeLMT1AdE+LQS8nIK6iRZ+A481cYN9KOEGf+SxQ/Tme8OdF0
UpBH4TjzL6L4gfbjetEpIU77gbySGnkmjjMeoo7IQOiIEOd7H8XX5yA/40Ac
h3aE+HXI74jiK9oP5KXUyFPR809Hic4LceYHqY4JcebH9LxsOjDIk3Gc+TXU
gUGejePfQX4QdViGQoeFON/7Av+cI/6Z71XkP1CvMLIPfP8L/H0q8Pe5wN+H
/QvAb1cRv12q78P+Rphfwu8jfp56gQX+NUf8K/jtFPHb4KfrAj+dIn6afx/x
8+BXQ/8B/GrIL4Dfrwv8for4fdqPAv+cC/xzLvDPOeKfsf+RC/sfdcT/0X4U
+P9U4P9zgf+vI/4f/HYV8dvzqBf5z/dHUrQ/Qj3QiJ/XuqiA380Rv0s94Sg+
kfrijv/B/bcCP54K/HjIb4AfzxE/zu8j/pj9sQr7B2H/L34f8d/gN3OB3wzt
E/jjFPHH4H9zgf+tI/6X30f8N/WeC/xl6H+AP88F/jz0f8hPF/jdXOB3c4Hf
zZH/QT3hwv5Cjvwf8tMFfj0V+PVc4NdzxK+DP64j/hj7D7mw/5Aj+wT+u4r4
74mt/PrRaRmzA35/2/WhA9OnzE/p2K8wv711/G7+5x7AX8Q+1ELSf03iM+YJ
dH4/im88vyziZ1rX142/Sv0JeH5njfn9vRePWzJN3+r5vfY+8W+d6++ZfcBl
p3/5I+k7f/jW/V889E9+/ntzf/KOl9567uSV0pde+dkNR9y3TOf+P/yxrb62
wZ9mVSOv/+59S1zSqa+t529/2YDd3hmSX7jrZ1OPundk5/wnfPSpzQ45ZrH0
rfUOOfjbJ8/qnN9EO68K59kZj+vidXbwszbaZuQJw96oeja4csrV67zdeT4v
3vCJEy96YVD+6uHTfrDS5s36xfv3vJ136tmh7zo614/rTvfbfegc/9Dzd//N
MQsvkbZ/4J5Dpt/d6Cvy+Mdtc8+ESU/Pr1beduL0b93W5I8S38XOK71g59n5
/fmf7buu6my7zs74bey5ZTzHzvNZy363Ot7Oo3P+O9h51z+w6+iM392eW72n
Pcfm/sEvuMjWZdSBNPVZjF8QNzCOqBSP6k94/Cg/e8+2X8J96M7v/wl56etK
faH3hwz4T46P+FOOj/gRji/tf01Z5e1rf3DwsDRu+ec/dsnp73Xuz7gZrx01
/pGF0xemnPjqht/7vf8++y/sfNBWWx/5/lppwgWXXL399qsmPb/9/nONa+Yu
eVs14X/XmnT0vo1/uQfw345ab7cXdhuaT7z+4FPXu7JZP3n8sbttttL0b79R
Tzl46Iab7tXlp5KdV4Xz7OC4rnqqXWf3/r937yl7/eLdas/Dx2z40Hmvdu7v
mU/s+MD6Kw7MUyfNOfs73xzeOf8T7LzThXYdnee/h113OtTuQ2f+bH7D7Ptm
/3BIevrtn10w8icvdO7/Sofdc8sXHn+nOuT9cYu9OvG1zvnhvNJZdp6d38d1
VePsOju/j+eWv2rPsTN/8LsVzqMz/s923vUWdh2d54fnlvAc/fpY1xXVd70g
fUm1/gHrZxWtn/Tfo/cTLwLq25ZLzBMnTr87yh/n9+anL5W8DgT4Q8hvid5v
5sdE/KV838mfYf4F/B76R/58mL8B/6i2OouGH3jnafv+APOL0mTzk/z4zI+A
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
S9Z5YgDqrJv4acqcfOXPhowJ+3ONWXja72e+uGnmcdp6dfOqzy114lt3r7ND
XuuhU468+JmxicfT+RvpR3D+3nVSOv2w5YalY277yDGXr9/kR5T08753/vf+
+7RvbID8htGeJ0Ecw3pNf2loMp2lhp9E/hV0OT6aDurTk2j4K9a3DHrikTuW
uPpj6aCNL8/PrtjsD7G+ZdSL2w+f9anF00ZX7XLjsI1ecrykn7TyJ/9wwBKj
hifqr0wW/ZV3Rg9796/nDEo7HjnxnlfuGJJWW+SCkzc5s+n/M+nJr79z9HuD
8wp/2Xb3OWcNS39Z64u377dGo+8DPVXqslYLiz7U6Nkn/O7X2yyaTrZ5VQ22
eeZ4Sb/R8HfqHY79yyO3PvyRdMOllx/z5K6PNuvTZxZ+a+Srw8L5xXk1weZl
hXnqx1/xF2uP2upb6+SxOM7aeyy92Jo/bviFLbeY+7XfHPulzPPk8XT+7X/5
Qsd99IKPpJcOePn1C59s+tuo/tniot/11iuP/eG60z+P/nRLZ6u/a/hP6lNG
7y/z+6L5ZZ/PbGj6Ywsl0ymb1bGfF9142RW/Xn9+NeuQ8zZYb8mXO/zGA49c
tvWW49+r7vn1l3vfGNLsj+z22tPTdntqxTwT+vbbir79/W3drTRd9IcX2faA
b971xkJp7l+vOv0TW7xf7bLEmftt9fdGP/D706ZtdchPBuZJv71+yU2GLJxG
b77X1o9scbfjX3lgw/m39/akNRfbaaX10t+qfb974cWLLNQ8/yNHr/KZbz4+
JH0ljzhszgYfyUt+8IV5t8/t9t+25zsK9qfhdwfh/Haw86pwng2/ifdndXtv
6h3sPfLjU3ft0UD/WvXhjhN9OM6vyD5yfkXzM13xk6mbLj+tuvWMO3966rYj
0nWvLnHzsQMHO77q458fNeXOnjToL6PPOfmpN6vTTnpqzOXfbtY32P8qsv94
P6vo/eT8iuZvSR/0mW9874g/jrmjevaI1e8Ze82I9NbND619593N+e+31a6/
2u7gd6s/jTtp0d1OHpBmLH/7Ie9v/kwT31P3OrAPB9v84ryqMM/892H/0ktm
9+rRZgf1+ebo+Zb0Zb+D9SV8/+2/XjvOXKznzfqPdSmbHXyttvWx2/9mzA6v
rnfkczOrTZ+/dUS1amP/uD5+6b9mLfPslQ9U5z04YKUf7d2cP+dTHrx8zx1b
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
Xmts0vvhvH/49N+8mxv/+Zubb7zr8acN9fVB+QueN6/jBjt/P7/v23nVu045
dZUrhy+V/7rGhbNvOaHJD+Xv8jzw+z7+fdxXrgtLCT/N6+Z9wPX78dcfl/eZ
cvmyWXgIH8/nyueM5+vj5/3osP8+dt8Hqg9mfX/aGdd9Iq8zeZ8xJ89o/N/9
vvDOw2+M/MD3DbcT/uw9jHsHx1nLxvvv87w2wHluB56EOI/L38Hx/f7zvuI+
1Li/evz6W3iO3Ich3v+6wP8avF233cXbfm0XP6jl9zX7N//i8XOEi055dPxw
fOn4onPUHS99tP/V8xMdkn/3/MPzW8DzryK89PykT1oH1zrif/P3/3+PX3o+
4f3XPFvFNQ+P+AzgK7TzpP/d44fXZ7yv58lFxw/Hl44v+9wdXPdx/tXzA166
P6XzD89vAc+/M/9Kz0/w8PqUx/o3f///9/il59O5PuEvsvIXwu8k5XeEX8jK
Lwh/k5TfEX6qVn5K+Jda+Rfhp5LyU8K/ZOVfhH+olH8Q/qVW/kX4iVr5CeG/
auW/Stev90/5L+FvsvI3wn9Vyn8Jf5OVvxF+MCs/WLo/pfur80f5q9L5Cz+V
lZ/S+aP8nvATWfkJ4XeS8jvCL2TlF4S/ScrfCD9VKz8l/Eut/Evp/ErXJ/xD
pfyE8C+18i/CT9TKTwj/VSv/Vbr+0v0T/iYrfyP8V6X8l/A3Wfkb4Qez8oPC
X9XKX+n9VX5H54/yV3r+yu8JP5WVnyrNn9L+QMl/R9+Lmjq751r/C//9iejn
NK2lQ9wcn3wGdYS1f1TJfrNfJ48zXfK32I+UdoN9StvX9xb7cnf0BxPsy3LQ
MT5H7avpErvfr/2pqDfSXv+a/q32mW/6O9YH6pX6/YHeUJvfafI77se+8aeM
30n3y/7ZFqZ7Wk3D99A/bc5f7KLqN8xGv9P/sz6o6Vr0QSXO83oh4Hcy+rGi
T2tmn1bi7OeCPp2V9l9iv9MMnd6X0AeVOPs2USd5qvSPYT8X1t1r/6Ue6xtQ
/w90etmHtX3812rXMUafVOL7oR+o5ymhT6jfH/TzXJU60+jz6fML/Ub5XqN/
go9H34UafUQT+4j6/EA/WeoUs88scfZbpf1E/wcf/zj6tbp9QR9X4k+gn+3r
0Dn+H/S59fvHfk6oW9f+a8+hX+ld0MlG/4tmfwv9XvHcMvvAEmd/COpEa/+1
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
1qfd51ehvkzit6zxm8SXHX07id+yxm9BfmcvcYnfUyd+b8fnlcbnwo9m5Ucl
fs4aP0t8Wmt8KvFzVvtpn84vZPWPJX5OGj8Lv9DhHyX+yhp/SXyaND6V+Chr
fCTxaa3xqcTXWeNriR+zxo8SX2eNryV+zBo/SnyVNb6S+LHW+FHiq877JfF7
1vhd+Ies/IPE70njd4k/s8afEr9XGr9L/Jk1/hR+Iyu/IfF31vhb4tNa41OJ
v7PG38JPZF0fJL6uNL4WfiIrPwHd6sZu2X6En7/Wxd4r/oP4R1n9I8lPyZqf
An+wav9+w89SL5E47Jnjsv+Qdf9hrNQXPSz1RbSbxLX+a4+W3fxo/rnUp5n9
HyTHv73xf/v+yzcRV/tl/tnbfn9wvxr/FHp+jkPnz88Peoe7A98JOoh+/6EX
yPHQ33N8MvQK/f5Cx5A49Rp5/etCx5E49RCJfwM6icSp18jjQ/+wOT70AP36
oBPo5w89QR5/LegM+vyAXiRx6Cc6Tj1KHp86lcSh6+g4rqd5P6CX6PkR0FEk
/kfoYe4F/PPQyfTzh56jz3/oPBKHbqVfH3UQfX5BL5J+PHUkiVOvkseHPmfD
X0Gvkce/GjqOxKmHSZw6mT5/C/XtEl8kjS/k/Uj6fgT1Jb3EsR/o/onFUU38
+B3k/3H/Nsj/y9zfbNd5lPOH6Zfsjv3bk/rdP/G6EewDN+vzptDjehn7x9Tp
Io791Mz4zfKt73OceiMnYH+MOiTEj4KeCnRWqJ/u4y+Enonvz0HnhDj1Xri/
9D3owBCnf0A/Q/0D7Ae6f3EEdE78+WLc/2L/8kzxT6iXQv/i99BRIf7+0xav
fRb7p/fCn/D7Bz0afl/taTo1/vzhH0AHp8NPUw+G/gV1YojTP+FxzhT/hHoz
9C+w3+jjF4eeC3ReEnVeiB+NeIX7f/w74tRbgQ5LRR0W4tTDgU5OTZ0c4tSD
4f4vdWL8+UNv53bsr46HDg/xZaDHTf5lLHS6iQu/USu/IfmlteaXjoFeeNu+
NPdnJPTGefz565sOefv3PX+g1vyBsVI/QB7Gzw/2gbjaB/u9D+0/8Oewj0Zc
7FOt9qlUP4b74fcX96vJ74Aeto+HTjbxraEXvgfwkdARJz4Netu78/qgw00c
utrN+Zm+tl8/dLNZ519TB534KOiJc/w06IwTh264489DB5049bSJ3wudbb8/
0OMmvjt1uolDb534mdRhB049d+LUeSc+HXrhvj8NHXE/PvTGef0vUIccOHTX
K95/6K87Dl345vnZ+frvUy+cz5864j6/oLfO40M/3o8PXXu/P9C3b9Zn6J3z
/L8DHXTiuB9+fitBZ97nb6F/jfivSf3XieAP7kV+vvIHMv8rnf98U9r5T//A
D+F9/STy5zeQ/bv/wr4XPqsLoPNHnP4/6wPU/5f1Oev6TD1O1ifcDJ3O9vHJ
B374n+XzO/4Y9O6gg5duhQ4e8eug58f85tnQ+SN+IPT0mP+NfHC/P8hXzsxf
3g06hMSnQk/wGvCqY6EzSJx6elzfkY/uOMftg/z4e0U/jHp9XN//Ezp+/n7A
HxiA/HzlZ93fwPfKv/0v+ELmX48Vfbu50CNs85+N/029P/KO90IHkPiV0Dvk
+o58dsdPgz/wQ6zjyl+TnxyL/HLlJ6n3dwvqD74JHUDi1GOETmN+FjqNxI+G
HiF0CutZx5tOob8/0Hs8C/n7Y6kDCVzqZ2r1n2X/Jun+jezPVLo/w2nPdVXf
X9k/qZX/k/2JSvcnZP8k6/6J7C916ldk/yTr/klQ391DXPj3rPy77E8k3Z8Q
fjwrPy77E0n3J2R/pdb9Fdk/qHX/QPZXku6vyP5B1v0D4dc7+RWyf1Dr/oHw
6533W/ZvarUPsv9U6/6T7N8k3b+R/Yes+w+yf1Pp/o3sP2R9v2V/K6t9kP2X
WvdfZH+i0v0J2X/Juv8i+1NJ96dkfyXr/orsT1XKP5b6z8m+Ya31X1I/V2n9
nNR/Jc1vtk+vb+vUb0h9WNL6MKlv6+w/S/1f1vo/qV/LWr8m9X9Z87elvqrW
+iqpH6u0fkzqp5LWT0l9W631bVK/lrV+Teq7stZ3Sf1U1vopqf+qtf5L6qey
1k9JfVzW+jip76u1vk/q55LWz0l9Wa31ZVI/V2n9nNSXJa0vk/rBpPWDUl+W
tL5M6vuy1vdJ/VvW+jep78ta3yf8eFJ+XPjvpPy31C+kTv1Cm99Pyu/bp/Pj
nfxh4f+T8v+yf5F0/0L4/U5/N6371f0N4Y+T8sfCjyflx4UfTsoPCz+elB8X
fj8pvy/8d1L+W/j9pPy+8MdJ+WPhh5Pyw8L/J+X/Zf8i6f6F8ONJ+XHhv5Py
37K/kXR/Q/j9pPy+8ONJ+XHh/5Py/7J/kXT/Qvj9pPy+7G8k3d8Q/qpS/krq
Wzr169YPhP3cyU839hH5ojW/P6dVTzOv+gW+vwfrpNafCr+elD8r9c+Q+D1p
/L6o+Rv1G8iPmY48EJ9/5q9kfv8L82f8/OHvpK8gP+c+84d8/BrmL2Xmr8D/
8t+/0vwt+mX1qeaP+fgl8f0qyJ853vy5zvr4DPJTdH081PzRqs2fN8+P6/Mm
yI86U9ZnW5/+r27z5835wR+u90J+lvHkzfM9G+vqZ5F/Y/z5OQ3/hvXx78h/
0fUR8YDw58/68QdgXe1F/tWZsj4/avFA3ebPG/uCeCT9APlfiFf890+zeKP6
CvJ7EI84fonFO3XPDpY/xTw04oiXPD/tNYunNH6qzkN+2N8tHvPjs25hE+Q3
jUceGvH7Ld5jnklGPOjj+f1eyN/atO/+T/b7L/xzpfzzRLUL4h8Lv14pv17q
nyb8e6X8e7F/Tptfr9Q+yP5CpfsLwt9Wyt8KP10pPy38bKX8rPDTlfLTwq9X
yq8L/1wp/yz8eqX8uvC3lfK3ws9Wys8K/14p/y77B5XuHwg/XSk/Lfxzpfyz
7C9Uur8g/Hql/Lrw05Xy08K/V8q/y/5BpfsHwq9Xyq/L/kKl+wul/uayPiZd
H9mvhd9bn9ylBOff9/RYnlsTH8j+c9L9Z/Z1mITvj5L6Mv79I6iPU//X+M/B
mfVLi2G99fOzfKL0Lup3DrR8Iz/+4vj7k1E/da+szytYPlNeDvVFX0WdDnHk
Q6Vt8P1dli/l41nXw/om5Fs5bvz1mLwT6oewf+rXh3wxr/9HPpmP5/r4DurX
Zsj6uInli3n9/8ctn8zHg/+tB6F+TutnWZ/5KOqjtD7zZ1i/Pof6JF2/kK/n
9QvI53Pc8rlG5XVQHzcD9cbEL7d8Pa9fuNny+Xw864u/iPo8rS/men8y6q+0
fnUVy0esWN/2FdQJEkc+Y2L9IPIdHef3w1C/d5rlSzbPx/Ip89uoP/sh1lvi
yMdMR+P7kZav6eP594uivm49WZ+lPr1Tfyr13Unru4P+oj3EpX6/w/9I/Xnu
1J+36/ez1u9LfXTW+mip/660/lvqnyutf5b69Frr06X+PGv9udRnZ63Plvrn
rPXPUr9da/221D9nfb+kvj3r+yn1+Vnr86X+PWn9u9SHZ60Pl/r3SuvfpT68
835J/X/n/ZT68KT14VKfn7U+X+rXs9avS31+1vr8kn5Hqb+uxJ+1xp+yf1x3
9o/b8UmnP5TEb5XGbxI/dOyvxG8dflPiz6zxp8RXWeMriT+zxp8SX2WNryT+
yBp/SHxVa3wl8UfW+EPi21rjW4nPK43PJb5NGt9KfFZrfCbxbaXxrcRnSeMz
if+Txv8Sn9Yan0r8ljR+k/g0aXwq8XvW+F3iz1rjT4nfa43fxf9L6v9J/mGl
+Yftfg/OD0X5DZXmN4y2ekDvf3SY1Qs2+3tWT+i8weJWb+j4TKtHrNh/CfWK
fv7nWz1j/hz6E9nxm/gJ9ZCZ6wDqJR1HPaX3R0K9ZcNvWb1m/gr6D33P6jl9
POpFm/oJqyd1/A6r58y/QP+rXqv3bPgjqxf1/Ie7rZ7Ux+9h9ar1p9l/y+pZ
/fx2snrUvCP6Kz1k9aqOn2v1sjX7G6Ge1u8f6nU9/wH1vI5/3+pp6znor4V6
24afsXpd3/+cavW8jl9s9cKJ/b1utHpiPz7qgdNJ6N/0O6sXdvxKq0eu2R8L
9cqO32X1zPXZeC/Ps3pn//11rB46PYj+X0tbvbSPRz11HoH+Vai39uezudVj
5zPwXt5o9dq5ffyP5JPRn+uNzfvqvf33Jf84a/6ExH9Z4z/7ZN+VFTv5ERIf
dPgtiZ9qjZ/Ef+/0n5H4KWv8JPFfpfGfxDcd/0viv6zxn8Q3WeMb8f+z+v8S
39Qa34j/n9X/l/gya3wp8XHW+Fjiy6TxpcRHWeMjiS8rjS8lPqo1PpL4O2v8
LfFh1vhQ4qek8ZPEh53+UxI/Z42fJf7LGv9J/Nzxz0v6bZLf3an/kvz2pPnt
kn+dNf9a8t87/Uck/z5r/r3kp2fNT5f886z555LfXWl+t+Sf15p/LvndWfO7
pb4ga32B5Pcnze+X/P1K8/el/iBr/YHk12fNr5f89Urz1yW/Pmt+vdQfJK0/
kPz6WvPrpf4ga/2B5JfWml8q63PW9Vn8l6T+i6yfWddP8V8q9V/E/8rqf4l/
Uat/If5Xpf6X+BdZ/QtZf2tdf8W/qNW/kPW31vVX/Lus/p34p1n9U/Hvkvp3
4p9k9U/Ev6vUvxP/JKt/Iv5vVv9X/LOs/pn4L5X6L+KfZfXPxH+t1X8V/6tW
/0v811r9V8nPzZqfK/nJSfOTJX+2k18n+ctJ85clfzpr/rTkF3fq+yV/OGv+
sOTnJs3PlfzhWvOHJT+31vxcyQ/Pmh8u+dlJ87Ml/7rS/GvJH8+aPy750Vnz
oyX/uNL8Y8mP7uQ/Sv540vxxyY+uNT9a8sc7+aElfdaSftL1pvtcQwe6hv6z
nz/1rEebDnU6CTrXxKGrnbbcYu7XfnPsl+R3yvoZ1EvncfaAjjpx6Jb7/KJO
PHH2dRlnOu2d/rHr7bH0Ymv++INqtV+sPWqrb62T+XfEL+vT0+B+XE+v6X80
/No9v/5y7xtDmv7v9z9y2dZbjm/sq33mm96DfpPmdz1/yHkbrLfky87v/PbG
y6749fr/0B8eevV/Nx178vM+Pw7s0617uOL3G/Xp8TX+O3UpMnQpqIdB/GvQ
m4cOfXoZOvTEvwQ9vt1ee3rabk+tmGeanp6PH735Xls/ssXd9cHTpm11yE8G
5km/vX7JTYY0z090T6otTK+jef6me56hg562M/1zv76RphvOedkL/XAfD93y
GjrmaXXTL/fzL+m3cF5x/un83PHIife8cseQ/M7oYe/+9ZxBadVFLjh5kzMb
/5u6WJx/PB7xuXY//f7ubPfbz091VZ4wvRHH5f2r9P0r6XedftJTYy7/9t/q
1R7//Kgpd/akRf4y+pyTn3qzMz85/3R+XvvqEjcfO3Bw2vyKn0zddPlp1W1n
3PnTU7dt4tMHTfcd9+GV6knTf2/m3/K3H/L+5s/U+22166+2O/jd6k/jTlp0
t5MHOM73k/NS+8+9dfNDa9959+D0/De+d8Qfx9xRPXvE6veMvab5/RX+su3u
c84alic9+fV3jn5vcJqz1hdv32+N9/35nGDzMWN+plE2X/34sFf1e0/u9/dB
9bppMbNnVXB9tV4f5+VIzIMZev/m5Ct/NmRMSkud+Nbd6+yQ133olCMvfmas
4z+57SPHXL7+u95f+O6T0umHLdfYH+ZPT8FxtD5EdWu2Ff3LCWYvfV7+0Oyp
4yNw3p9aeNrvZ764adb5K/YlqX1Z/6pdbhy20UvVrph/n3xx++GzPrW44w9i
3MHnf++/T/vGBvkps2fN8Te+PD+74od2Ftcx+IlH7lji6sa+BPpxPcSH9r03
Td7Od/v0hf5B3wK6sat98g8HLDFqeBot+rSr2Ptc8f3eyd53x0v6Uy/ZfKsw
//KKNh8dL+mXj+67LvZzoX0b7Phaj37jz9etvYzHxyfst+kOD9zQ9J+xz3zT
aNwffX/ffTrtvPSQUR5frH7MgK1POmRxH8/n8w7Wlyfl+di8G4q6otHJ1sfG
P5b1Pan9LOlL5cHL99yx5RCfd6gv8ONvsfvoRyYt/An3326efMtmP9i7yU/i
+7E23it9P+T9S/r+3WL2LG8H+3aN2Ts/Pp/71Xju1HsiDnuUYZ9q2CvHn4H+
7K62fqZtRX9W7H9W+y/rY9b1saQ/KfYxq33k/OH80Pkj9jOr/ZT1N+v6W9If
k/W3M39k/ah1/ZD1t1L7JetHreuH6rKpfyLrZ9b1U9bHWtdH8R+y+g+y/nX6
r4r/kNV/kPcz6/t5/oMDVvrR3gN9fmzxX7OWefbKB3z8nzDue7DP94p/udnz
t46oVh2Qqeu26g6vrnfkc018FuiT+vyz5/MP/Sf7/q6JX8T/Tup/zxl4zJAZ
l79efxXz4/IDDsv7nNbk503D/fssjqP+verqzelXv/l5nzewR535NcbWx6Tz
C/OhXh3+FeZLw79Ar3xlW3/yT2098ufzhM3nvC/m9x0235v4rqAvJ/Y1q30V
+5XVfol9rdW+iv3Kar8Cfdle4rJ+JV2/ZH2qdH0S/yyrfybrR9b1Q+xzpfZZ
1o+w/x7W1078JutHreuHrK9Z19e7zN/z5wZ/0M9fn+siol8v70fW90Pi06zx
6ZZmDxyHvfDzm2TPK9E/Xduep+Pi/2X1/35n59PUz9n5NvwL5g1xPkfifO95
/OE23/34y9rv+fjP2fl01jfi+vxwP/z+3W33y89P9CFr1beU9zvp+y3nl/T8
An3lXuKDzB/29+Mg85d9PPkXxi8n98+/5HXh37d1jsv6pOvgvdgQ8ctU86d8
vOl5ku/t6TU/psl/f8Lipcz46SGLpxzf0OIJ70t5mMUbjoPP8fUHfE9k32u1
78Kv1MqvrGbrWaMPaOudz481zB4l6rfAXjku8Uut8UtJv5TPh7g+nz+YPU48
/n+avfbjy/yodX6U9KsvtPvh9+85u1/R+lPp+iPvT9L3h/ab/OBgsd/y+5X+
Ps+UfqHmB3za/IW8Fvi7Dc0P8Oun3/kJ+J0fNX+0Y3/IT6r9kfmZdX6Cj8nk
R68yvsaPD74w8zpMn7epTxD+NCt/Kv5bUv9N/LNK/TP+LueV3j/xn2r1n8Q/
qdQ/Ef8pq/8k/mVS/1L8p6z+U6Cv7vNX+OOk/LHwn7Xyn8IfV8ofC/+ZlP+0
T+d3O/G38KNJ+VHhd7Pyu8J/Z+W/hb/Nyt8K/93Jv5b1Oen6LOtv0vVX+Kuk
/JX4F0n9C94/4nr/xP9I6n+I/5TUfxL/Iun7rfsO6l+J/a469rvNL2Xll3q2
6It3fP8A8ZCPX9PiZeev97V42vExFs9V8Bux/v4Dv4XrYXyi68czol+t+t1i
P5PaT1l/Kl1/9L4o/yjra6Xrq6xPbq+Iy/pb6fpb0h+X9bXS+yP+RaX+hfB/
Sfk/eT5Jnw/4mnQU9jeWND7HcfB9iVdsPGfDH4j/ldT/0n2N441vlOP7+taZ
/8LPJuVnhd9Mym8KP5v1+Ql/3YmvhH/Nyr8Kf52Vv5b5nXR+i3/dOT95/7K+
f+K/ZPVf5P4nvf/i/1bq/x5k+1k8L9iHJj9N/ItK/Qvx/7P6/zL/ss4//u5B
mCe6fyHxQa3xgfhXtfpX3j8K/7X/TX2p8XlqXx/7dUXncp7XtbKu13XQgXvf
CPTlyPfcvfqoXzX1CQfu8vzcK4YunM/t64NzV7XGJ0c8PXlMkx/0fFtXXeqA
m/4Y6PNTU0eE+Li2rkjTxxs481pZv6T1IVPOfWneCycumcdJn07iO76w2DHT
fzk037bKupu9+dk360e/fO/xnx/U2Lf30ffH+nYNS1tDR4b46rje2+366/1x
P4jzfqlOIPHH8Hv4fT+fBb1/rIuhbsuJUr857sbPPH3T1MfqPfvqyj6SRuVJ
P992lX/oT4/5YLpW66J+dLzj/HuMz2NxvAV9PnsW5hfvJ+5v/uDif+yD1swP
9n0eJ/ND+8LyeRNfuPfNY4c/v2oedtX2c+dutGK2eKOp7z0F/sXy8Cu+v0va
Ze1Vm/7/9FuWhl/2wcLn3rLsWaMdf/v1nd5Y93eDcv7R2U+t/8dc//rHFzw+
+LTm+fN4OH4+Eb9HnLwP/Oxq48eOOG2RUc37w39rHgdxXE++ZOudXjzs2sXy
wX3x02w//rc233jX408bmjVO9vn14OxlTkof3q+HT//Nu/lv9Vnn7bXGJr1N
/pzFY7PruWtcOPuWExZKX59y6ipXDl/Kf5/Xe6Ndv98Pf39wv3Sfirj/nv1+
9QLPB/j64/I+Uy5fNqsfQvxQXO+ldv2J94P4mz867L+P3feBau3J+4w5ecai
6f1Z3592xnVN/h3nA+ZH4nwh/h7+fi0bn9/G8Yjv/4V3Hn5j5Ac1eNvqWfC5
xHm+X4HftgGuh/iuuJ9/tfubcT0Nv4rjbQdemL8nx6/xfP15E9f1of1fU//N
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
SJP2bwrWv+b68L3ldbn+Uk8bXzGxbkjfj2B/149/kvA/j0j9E/JuEvJwktZv
IK8G8/fPtdavfAzfM+/5ZKmPmWV5Q+luyyNKWr+xguUF5W3x/SelvgR5RdUh
lmeUtH4FeVUJeVad9+8ay2vKfI92kvoS5FWlpSzPqvP+cX27D+ub1jfx/VoP
79ejUt/C9/MxvJ+LSP0U8toS8tw67x/2jbiPlLR+5XLLa0s3WZ5b5/2z5zcq
8z3+lNRP8f3CPng6UepnwD8jjh6WtD5rX8v7S7+wPMCk9WMrW14f8/yS1kf5
95YnmJaU+izkLaZlLI8xaf0Y8hJhH5fO70r9Er9fD+vkolI/FfTPbe5P/++f
4MPy2a26bv4X5lc060v/+yuOn2h1n/XiVgfa6b+0vNV11qjzrL4u/aeetrrQ
apDViaZnpb8V6lYz6liz9l863+pS82FWp5o3lP5QqGutr7U6107/KdT1ZtT5
dvI3UVebUWebtT8U6noz6nw7+Zt3WN1u7rU63vqX0p8Mdb/5fqsDrnaU/lQT
rK64nmB1xp3+Z5tbXXW9odVZd/ifc62uuUadcxov/adQV53Ptzrrjv96sNVN
16tYHXX1kvQ/Q911+p3VYaeTpP8V6rrT763OO/1M+qvdZ3Xn9RlWh16dKf3f
rrS68trq2BdOw6W/GerSE+rUk/ZX29zq5vMNVkefz5T+b6iLz9tZnXw9QvqP
oa4+v2F19pX2PwviTz9+qb9psL/q44P4LeTn3pL99yC+8PsTxJ9+fkH85ngQ
fzkexFeOB/Gn40F8JfxqJ/7w8UH86uOD+MTHB/Gt378gPvf7H8S3pfisFN/7
7wfxm+NB/OZ4EJ+Kf9GJP318EH+W4vfcPn4nPvfxgf8q708nP9Fx++zpZZx4
kvingf/nvx/4Nz4+8E8avH//1Z9/4P/5+MB/czzwzxwP/FfHA//Mrz/wX3x8
4P86Hvg3jgf+sc+vwL/38YF/3PDT/ft3Pj6IDxwP/D+/P4H/J+ff8W/9+IH/
6njgvzoe+P+OB/59M3/6z9/16wvydxwP/DO//sD/aN6P/v2HBu/fv3Q88M9K
/pWff+A/NfOzf//Sjx/4TyX/ouSf+u8H/oePD/xXv/+B/+3HD/zXkv/l4wP/
Xc6/4585HvhnJf/Txwf+peOBf1nyzx0P/G/Hg/xuv/9B/rOfX5C/7HiQn+54
kB+e2sdfRPO7fXyQv+14kJ/t1x/kP/vzC/Kf/fhB/ruff5B/7+OD/Hf//SA/
38cH+d0+Psg/9/FBfrnjQX65378gP9+vP8i/9+MH+YM+Psiv8/FBfpzjQf6j
40H+of9+kD/o1x/kB/rxg/y/Un6d/36QX+fjg/xKHx/kd/r5BfmVPn+C/E8f
H+QPlvIbfXyQv+h4kL9Yyv/06w/yO318oO/j5089HejspDmirzPS9DyT6UIw
ruF/H76fpseZv2I6nflI6MQS38f0SOtPmU5ptR10golDFzVRl+Nf1Vei3gSP
o/NvR9NjzauaTmsNnVYfT72fR00HqFL91VdMj7re2XSqq4VNp9pxrR/X+Xm9
6Z3W0EFN1EElbp9N/pfOT+iJ19AZr1Y1nXE/PvRYqydNpzWNhE4r8WtfXeLm
YwcOTreecedPT912RPrCFT+Zuuny0yT/pemPqPrid5leeg0d9UQddeJv3fzQ
2nfePTjNOmL1e8ZeMyJ96G8c8ccxdzT8vOnt5jmmw1ufAB1e4ieYnnhe1nTG
K+qMF+5fxN909GOoL0td+uVNB9fxkr7XUZhX++O4nzcdYsepv07d9Q7/Af1z
6p5znhIfZ3rVFfTN06qmY+3HZ34edc/5d8Tv+fWXe98Y8mp9/yOXbb3l+Pc6
++OX9emFzartveG85X/zqucPOW+D9ZZ8uf7tjZdd8ev1u/2vdX6+K/oyB/Tp
KT5cbdSn8/jRpPrvf4LuN/M2/mY68X5+1H+n7vsgeb/uh57WmZiX90Bnizj1
7alrD517/33q11O3HvPL8eD98ed3GvSTh0A3+X3TKfbz47wjfzFC9G+oLw+d
9078f63pSqd1TSc7JdPJdpzPYzvoW14u8+t+zI8HMD+gr+2/P0Ls46dMZ92P
PxH61NSl1vm5wVW73Dhso5eqT764/fBZn1q8E/8Hz9/xAze+PD+74rzqo088
cscSV3/MddCJP4y//zN0uw8xHW8/P9Nle6P6bp8uHP2GZv6W9IP+A/rcO0OX
+22x/0eJPu3qn/zDAUuMGu54ST+O+uLUFZ9s9s3xYP1yPFh/HA/Wl+b+9L/+
Om6fnfXF509gn318sH47Hthvx4P13e9vSX8wWN99/gTrk48P/BvHg/XL8WD9
9esL1teGH+5/ffXxgX/ieOB/OL7Wo9/483VrL5NP2G/THR64YYnO/tjovvdh
BPTX+Vz537zq3afTzksPGZVXP2bA1icdsnhnf8w+779pGubPcvJ+Xd1nbz6M
L/rWpdfqP+I9Jn4/3u8n8f3bYv9L+pTB+uv4FruPfmTSwp/IN0++ZbMf7D2o
w4/kwcv33LHlEOa/12rfAvvruObHr42/I47nnjEP8jbiXz1r8yr/zeZZniXz
i3qmWN8y/u3Hfwb6xNA/rne19c3x8x8csNKP9h6Yt/ivWcs8e+UDnfgseD6O
b/b8rSOqVQfk1XZ4db0jn5vZid90/f6u2Gd7Pz+o5/f5BeX+k/PFf3h54DFD
Zlz+en35AYflfU57u+O/BP6R4zzfl6DPrM9f+yeth+O1z7+xL2NsfZTn/zzn
UWd9hF2oTzE7Ua0m/vmTZpfyFLNT1T5in5aDbvnPbB2qV7L1x+9PSV80eH98
PPyODD+kwx+9hPs/tX3/Hfd/Qz9d8cD/dHxLm5c15mnHv6Z/sWzbv3B8ktm1
tLbZuQ5OvUI8l871/86uq8Y8i64v4T52jm+fzfqp43He+XN2HZ37+6Ddl3qG
3afO7wf2q2QffHxgHxwP1geZ34vg77v6j8H64O9P4B/7+MD+lexzbp9fx/46
Htjf0vrl44P1yfFA/9ePT3/81bb9cRxxYZ5jcWIHD+Ivx2GXa9jpjv9G/3pQ
2792fA17bgnPsYPzflPXUo9f0lfGvE2Yx53jl/Q1cd75ILuOzv29yO5L/bLd
p87vB/bT53fwfqbC7zf8Hs5/+77/LthwGYnvlF94T+JD6nvDD62VX+P9H4n7
P0bis3Uw3xHX5Q0lPkTcmh+2OLZeRuJX09Memi2uIK/N/+ZVn7O4LR9hcVyn
f36w/vj5B/5HeH/Av/j5B/6H8A9N/wLVXw3W19L6L/Ozs7778YP13fHAP0rt
4y+SeR3zRR8W62Z9d3t9cPxCzP/Z7fnv14f7WuM+d/gtvX/Kjy2NeGtRi8Oq
kcIPf9r8rvw53Lc1hZ/S9XdL4cfA2+WrjMerDhL+Lph/Ph68VTbd+1l+PcQD
/s6vL1j/Hf8x+Jm72/yM44F/IPe34x84Hvg/jgf+jeOBf+N44N/p+av/5njA
X/rzD/g3f34B/+bHD/i38P69K+9HwB/6/Aj4Q8cD/tXxgF91PFj//P4E/Jzj
wfrYWV84o/X4wfrveLC+d9YXWd8dD/wbxwP/xfGAP/P7t4bxRvV+xiNVX5H9
n54t+uLGGnFk5/0ea3FrNcXi2PQniV8fN96sHoZ9m2HCnwXrq/9+YN8cD/g/
xwP+z/GA33S8pE8e8JeOB/yv4wG/6/h2xhumJYxHTLp/F9x/x8ErJTvvEUmf
33nYr5tsPGg6T/jPwL+R43fWF8eD558Kv++4rUej8H4w76E5/8C/8vkfrG/N
+9n//PfrD/xLx4P1vfT8HA/8U8dxob5/cZDEf4H/6vY/8B/Ev3L76p/+fFHv
x0/VN9K+OtQbWFB8/Rs/8/RNUx+r+Wl6e01+leoW3IV6Zjm+6xtMF9z1QNp9
Qvz4P0c+OT/XFP2T0njq8fGTen3EqV/IzzFy/NJ49lOXPut+/3vRL/RQfM5F
PuKCjp+Mehd+Hi39y3+A4/YGx+e4Sfg8Ssav/skRT08es2jm5x19/Vbu8uuf
oH0j0G/Bny++nxDgH0Bvmp/aP1H7QqMP9ALjFp+Nzvz86+xL5yw7oYlfvyp+
Lfk+4vyefuNwwZ8cMOmM3VaeWfNz6cOf7D12xwE63nkz+tOKkxcbKDj5SH7q
/gb3s/g5C/Z6QcfTvvBzEPaLiHO95+fjcnwd/1EZz/08fmr+A/eP+El7uKDj
ma/Cz+OxH0j8Lzjuy+19qryg4687/TPHfXzwkMzPi78989iHL3iu45/yk/6e
4le3/VjHLe56vebnvF9e9dohmzT5ucqLzYG/TPxywV8WXO229mfSdUHrwyfK
+AlB/7FIf2UM1oU9sS6Mw7/l+G73dTzrhUQny/GOXRf9KOZv/6atw1pH4+dL
/yn+/XnBeK4L44PzO6Ktz5oPl/7QatdVfwP1Gok6u1rfWBqvdn2SjBf92Hyk
nJ/abe1PwnXhdqwLa+DfPj/a/YNyp7+m2G3t/63rAv+t46WPkeNfFbuu8bmu
C/w3cbX7AX+RhSfx8bou8N86nnZf90do15+B3dX8BeEP8gzhD8R/rD8h/qOu
C/fK+OGyLmj+wJKyLmh8qHb9JeFn1a7r/sv5sMuTYJc1vpD9m8542nXJE/Hx
L8q68Iqcn9p1jc+5LlyEdYH/Jn6F2P1r+uc3auFB/P5einXhr1gX+G8dj/3Z
+koZD7uRoviA68HZsO979d+fMnX6TANfG3qv1N9WfpH2/aK2TpAfn3qD1Okh
T0T8IfRDEJ1YP773AwzsE/++N7CfzBuhjtDHoZdN/KCWHq7rjPvvUw+Adays
xyOOYb2i0yv3d1haGzrn6MfrOH+POkQ/hB43cekb04kPvo1+E1In7+fPflYv
QteJfd7av790kjp6v7+0twtBx8n7tQFnPwLJ8/fx1CulPs2KqNcjTnv7degM
zUW9H3H2a2Cdws+lvnkD9sNA3eF01NPJ8TN1gM5DPR5x9rMQHR0//7XQr2E6
6hOmo96tfX7jve5U+yOwXwT7kJ+Fekvi/PuRbZ0oP7/tcD6iA9TML/T7YF3z
QOkfwn4ZokPk+FD0ezilrRPlx98B/Tr2b+sU+fXtgL+nDtU+qOfz37e+3fUB
0BmajHrR9vkvlaTOx/G/o58E6w6vRr0mcdpr1Hdm1nsSfwj9QKROycefin4Y
uI68Euop5fg1daA2Rz2mvx+wp3uJnSXetp9LZ9pRv/6WveranzZ/MjJdCDtL
fBzspugQOM6+jROD+Jx63NKn2M+Px6XdpB2V88+R/Wnbz1dq2lHitL/R+oP/
6ZU+PX58joN+W5oKO9o+v2FJ6qwdp/2M1o+tYX8j/zvoX+v4NNhX9iHS+m7a
11HtPpiOLwf7Sbu5k9Rv0/7S7qp+Cu3rK7Cru8LOEqf9nAG7OVDqt2l/aXdp
h4nD/3a7SjtLfG3Yz3thN2eI/grtL+0u7XD7/Eann7fr1HP7/Ma73dX6f9pP
2k3aUeLQ18vbtOucHaf9pN2kHfX5xX5L7T4JPp79jqbCbqo+C+3vDu06bB8/
GMc9CXbzYNhR4hzHOupfwQ4Tfxv2cwrsptZvT4b9lTp/H8/9MNpV6vkRPxn2
c7V2Hbrj1Bun3VV9G/IbtKtLw84Sp/86Fjq11GP19wc4v4cORMf/ZR/5R9BH
XfE/4ft1pf8m8ccD/oL4BOFJ9Pwi/5bjI/vb5ncG4fxv7xz/QXx/Nv5O8cg/
b59/d30hHtnnNt8Url847od2Cf369fzmr2Hfsx++jpc+/B2c3/Pv9PhT0aee
/dgVR/96/zs9/iHoo89+8orze/5d5/mjj/ye6Iev4/n9OPydjpc+9Z3z4/df
wN91ni/6+H8V/eCJk+/bGd/z73Q8+/A/Db0Axf/c1hHw41N/4YR2n/+kOPvY
n4i/0/ObAp2DseiXrzi/59/p+U1Bn/tx6Nev95ffsx++4vuhDz/1BvT4e+D7
Q/F3xNnXrBCf58i+QO/J8870/bofejWRf4VhvdB/qV0PBvh50JO53/qf1eyH
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
vfxfytdefjXy82JNfrTrn+L96eWHI7831uT3Ri+/l3ihNfnl0csvZ781+c9Z
Tf6zez8i/zl6+c/EU63Jv49e/j37rck/z2vyz2NN/nn0/Ms8315+NfF2a/Lz
o5efz/Pv5Yfz/NbkN7v1FdLz6+Y3u/GlAxP7fTX/l/Z/L7/b7HNO/jHxlmvy
T3Mv/5T1dbz8Xp7fmvzc6MXP8Hx7+cnIL401+aXRu195fmvym6N3vyP/NqvJ
v401+bexJv/WvX+R/x1r8r/d+53ntyb/OdTkP8ea/Ofoxb8xf9jL70V+eKzJ
D49efjjzh738ZMrVNf6BUOMfyDz/QKpvVu93xH9mNfGfbvwoz7cnX8N+Emrs
t7lnv+X97dnHYV/KauzbwbNv83x79n3YR0KNfTZ49ln4B7Ia/0Dw/AOwH+U1
9utYY78ONfbrzLNfw34Zavwnuec/Ib56jf8g1PgPQo3/IPP8B7y/Pfs4/CtZ
jX8leP4V3t+efZ/ns8b+Hjz7O8+vdz/z3Hnxk5S3vfhHi59x7Fuwj+Y19tHg
2Uft/Dr2Z9iPQ439OPPsxzy/nv2c57PG/hk8+yfPZ439PfPs7zyfNfbhvMY+
nNXYh4NnH4Z/Iq/xTwTPP8HzWWOfV5x3tc9nNfb54NnneX49+zP8F6HGf5F5
/gvWN/Xs52l8XYP8eKkvqfbda5P4wPYYF/8+y3Yu4o/d+ks8n559GvYRtz5V
qv9W7buw37r6KexH0bPfHpDov1X7NO1enn0S9q9YY7+Onv0a9p1YY5/Na+yz
WY19Nnr2Wf7fs9/Dvh1q7NtZjX3brV8H+3b07Nup/lq1/8K+79oXeL959meJ
L6/YT9P9XY1PS++rBvmLSfx51f7L/e/pJ7TPevZT7u8a+6irv3H/e/bf8dyv
jv2P+7vGPhw9+zD3d439M9bYP2ON/TPz7J/c/559HPbjrMZ+HGrsx7HGfuzW
F+P+9+yrjOfz9Gvuf8++m8Y3V/O7Uv9FNX+C52a/M54/baWtfxH/MfoXl4z8
R4lfzPYf4vv98TvSWR957d0Hjj/0qZn5Rf3HDRj8ztxK/xfi+5XxO+1/xOb9
e1y8+M/3+mb3PfjAut9V6HM3Lb6/lr8T+sDHD52086mv503vn3D3lbuV8rXd
h/j+KP5Oxtd/1rDRZ76wTFj6mZmzPxi6krU/kvYnfL8rfqf9n3rLYTf/YcFF
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
5vt79mGdN7Xv8X2988f58/YP52cxzMvRmCfdX5yXjpgn0nvi/T35kfNXI59Q
rjScadLhP3H5J+26Nf6FrMa/YPva8S+49wPH7dnf+b6ef4Xv79n/Yd/Oauzb
oca+7coPfP+a+y3z7L98P8++z/fz7M/c1zX3Y6i5HzPvfkzPW3V9of9lNfpf
8PQLvp+3vzm+mvsnePcPx++tD8fn6afQfzJP/+H4Pf4GvuSevzp8ePTn7i/o
X67/iflrHn/m8zz+cTT69+RTjs/bH5wfj//xuZ5+a/X9PP2p0Hvd+Dc+39O/
rf6fo9+NAB6K4SgKforSBwj9nCKfNxyPPN3jk3z9n/VzqXuh9S+eFfoAoR/R
lm80f+zz2MbvtD70at4bn6TfgnqkrFO6vdQvrqNrXpLmJ/UR+gjNX5K673OX
Seu/V+rCS314rYug9REwv3EIvh8idNYVOhP1Tc6U+kJ1dK2bovVTlL6T0BUX
TPNL6uixrZ7rs9mayy31zpD1O0Z+2v5HvFoaZ1/GT9TRN0b86Jw7Cpw1fpK+
JOyh4gcM80r/7P27Pl52QLdQyI+9Ij9JX0z8UuqfqqN3P+PNlj/uPV98Y77B
Vx288rs5P0nvCH28O/Tz7mI/qaNPk3tB74epoC+O7xcXutrd1P5WR79Q5DKV
z+roKterfK/0j4WucrPKz0p/UOh6r+n9pvR7hX7bb9/945RbP8hGXbnxhUt0
Wjjyk3Tl68rfPxb6vUL/7Ib7vzhli+/ywm/1pX3a+9Xwf943qPMSJsr9w/sw
5Vv8+/n9Etxk8vcSP/kF5N0UdRn7BPqbSCfeFnAGK/hcwh+j8kfWdWE/rANB
OutVMA91Sak/Q/4FHMQwQPhXUZ/C5APgNJb1PdZN6t4uHi6V+rfFZ2wdVNyb
YbzIF6xr+Ty+P0fqW/4O9TLeKOpohIFS/0b4etD6dsR3NL4s9W2GYj4PL+pw
hfOkfgfrbaQ4iWX9EdbVpNw2XOprMh8GdRiC5o8dgHoW5LufSP2a/VCfAXVa
wkpSn4X5MqhTETR/jPU4UhzFcn5ZtwZ1MMILUr+G8bOo01GJz10a9SD4vdaH
YT0G1GkIe0p9lnGoN4H3zN6T+jHPo94D6rhU6rcMQlzxpkWdkaDxxaxXsmRR
xyTT+kWsy8P6JsdJfR7GN6OORWiS+GjW7UEdn1zr90xC3PUPRZ2M8JDEXyPv
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
5JXTIb9ofWXWpU7tz6V8wfrJlJ+0/vILkFcGQH7R+tOsq03+cozU12Y8zFzI
Txp/vefhhTxxOOSL3lJ/m/IK6qDH56T+M+surwH5Resv/wnyEt4zHy31oan3
HQj5Se3j5Gs/QT5T++p3kCdug3yxhdQn/xLyCuUXrb89EfJKf8gvE6U+NevZ
Yx7DAKnPTb0Pdawr/gPytfcgn6l9mfIK6nxX6ns/DXmH/OVlqU/N+vQZ5Kfz
JL/gLtT73wjyi9Y/p7xD/rKN1NeG/JZP2rOQn+6Q+uiSn1PRb8S/FtS/Jv6j
oP4j8a9l6l9rwl+Kc1W+n/iPMvUfif8rqv9L/H+5+v/Ev5Wrf0v8fzZe0sW/
EtS/Iv6loP4l8R9F9R+J/yuq/0v8P7n6f8T/FdX/Jf6fqP4f8e/k6t8R/0nl
fIv/LFf+IP6xoP4x8Q8F9Q+JfyxT/5j4h6KeX/EfRj3/4v8K6v8S/1Km/iXx
f0X1f4n/L6r/T/xfufq/6vKHNe9X88MkPy7X/DjJD4uaHyb5g1HtN8Wn5b9V
43fS/LJM88sk/y3q+ZX8v6j5f5L/lmv+m+RH5ZofJfljQfPHJH8pav6S5I9F
zR+T/Leo+W+S31W5XyT/rYKfJvldUfO7JP8pav6T5Hdlmt8l+U8V/HjJr4ua
Xyf5gRV8OcmvC5pfJ/lhFfxBya/LNb9O8sOi5odJ/mHU/EPJj4sqn0n+WKb5
Y5IfFzU/TvIHo+YPSv5brvlvkj8YNX9Q/CtB/SvifwrqfxL/Sqb+FcnPyDU/
Q/xHQf1Hxaf5Xyr+X/EvVfCnxb+WqX9N/Ee56hfiXwvqXxP/QlD/gvhfgvpf
xP6fq/1f/C+Z+l/EfxTVfyT+kaD+EfEfZeo/Ev9Irv4R8R8E9R+IfySqf0T8
B0H9B+KfCuqfEv9aUP+a+Kcy9U+JfyWof0X8U0H9U+JfydS/Iv67XP134l8K
6l8S/0um/hfxL1Xwp8X/lqn/TfxHufqPxP8W1P9WV3+E/CLN7yr5h+QnRc1P
KvKeDJ8T/o3yfiEubeo/KeN/xf9SwZeW+iW51i8R+0VQ+wXxNlP/SIk/uwjw
KJlXo/isxNO8uMDZDIo/uy3wQlP/SOmf+emdIm5p0wLHM0wQfFre78ARreQ3
E+8SOJjx94IPS/mC/QwX+YJ4msDZzEcKfuyTwDMdW+Cchj6fpPi9vL8pB+j9
fTbwQoEjGhRfl/leVxc4nHG4yA/EIwVOaXaT4O/eBjxP4NiGWwW/lnijwCHN
FZ+XeJypf+Nf9BPEJQLntILfSzzQ1H9R2keJ14p1hf+ixC8W+3xQ+7zkPwbN
fxT/RKb+CbHfV/Rf8U9U8OPF/xvU/yv+h1zPp/hnMvXPiH06V/u02O+D2u/F
flzBjxf7fVD7vfgfovofxL6eqX1d/A9B/Q9iX49qXxf7c1D7s9jXc7Wvi/05
qP1Z/BuZ+jfEP5Orf0b8G0H9G2Kfz9Q+L/6NTP0bYp8Pap8X/09Q/4/4JzL1
T4j9PlP7vfgngvonxH8T1H8j/odc/Q/iv8nUf1NX34u41WkeXDk/6X3a1JTe
t5X4g0p9iYEatyD5dTzPvH9Vvh6P+5B6dCfBbz4D9ynP70GCb/0S7rtm3H+d
BL/6DNyXxBnYVvC3ed8Owf2r+NZNM4v76hncX4rPzfuO919XwZcmrjTvV8WX
plzN+1Xzi3nuH8X9rfmjf8Z99hXut28Ef5v3md1vgl99Ae7TV3G/Kj435eZr
cL9qfjXP9UR8r/mzxPXm/af43rwveb4U3/pr3Lfb4f7dQfC/7wKuOfVcxTcn
7jbrSCr+tuTnR40Plvz1TPPXJT8f3/Ovkl+fa3691B+IWn9A8rOj5mdL/nrQ
/HXJn841f1ry1yvxF5J/HzX/XvLLo+aXS/591Px7yS/PNL9c8q+j5l9LfnnU
/HLJv456fiS/P+r5k/oEUesTSH5/rvn9kp8eNT9d8vuD5vdLfnrlfEn9g8r5
lPz8qPn5kr+eaf665OdHzc+X+gVR6xdI/n2u+fdSvyBq/YK6+pKiX7r5EWnd
T/5V9Mdc9Ufxj1fqm4j+UqlPJfpbUP1N9LOK/VX0y6j6pehXUfUr0S+j6pei
X0XVr0R/ylV/Ev0kqn4i+mlU/VT0z6D6p+hfmepfon9mqn+K/hVV/xL9PKp+
LvplUP1S9LdM9TfRL6Pql6JfR9WvRb/MVb8U+StT+UviPzON/5T4iUzjJ4jb
y/YzBL+XeL6Hg674vcQjZvsLBb+Y/yd9JcEvJu6ynXvBX94JeL98fg/BByZu
r7UX/F7iBvP9+wt+MH/P9sMF35fjIf0wwX8m7rQ9X/CnicvMvNABgs9M3GK2
V/zigfg92x8l+M3ENeb8KL4xx8P2in9NPGc+f4LgPz+P/x/G+EHBfx4PPGvz
7wn+Nf9P+vOCfy3x15X6oaLf5KrfFJ+0G3apxBeIfhBUPxD5tlIfRvSDqPqB
6C9R9ReR7yvyieg3UfUbkf9zlf9FPo4qH4v8H1X+F/0oqn4k+ltU/U30o0z1
I9EPouoHoj8F1Z9EP8hUPxD9J6r+I/pBpvqB6D+V+lKiv+Sqv4h+V5EvJf4/
1/h/yY/I1b8u8eOV/DmJrw8aXy/x3UHjuyW+vlI/RPIDouYHSPx71Ph3yQ/I
ND9A4t+jxr9LfHiu8eES/55r/LvEh0eND5f8g1zzDyR/Imr+hOQfZJp/IPHz
UePnJf8gaP6BxM9X6o9JfkbQ/AzJH4iaPyDx9ZnG10v+QND8AcmvyDW/QvID
cs0PkPyKXPMr9Nxo/Kjcv7nev3L/5Xr/ifyRq/wh93+u97/IP7nKP3L/53r/
y/2Z6/0p93+u97/cr7neryJ/5Sp/ifyXq/wn8ldekb9S+SFX+UHkr1zlL5Ev
cpUvRP7MVf4U+SlX+Unko1zlI5Efc5UfRT7MVT6U+Nag8a0S/xs0/lfiTyvx
axL/GzX+V+KXo8YvS3xupf6BxC/nGr8s8bm5xudK/GrU+FWJz40anyvxq7nG
r0p8dKbxNxLfHTS+W+Kjg8ZHS3xvtb52Gh+daXy0xPdGje+V+PGo8eMS3xw0
vlnifzON/5X45kp8o8R/5xr/LfHLucYvS/x3Jb6zDl+D9hrgfLn4A8CRRDv+
fZat/cohbz+yzjImf1x83JZ7TR5dxj+9iLqk3xc4leFNwf8h3jFwtiv4yIJP
UcEXI94V+xkv+F7EHZtR4Hjlij82DbjfBxU44EHxvwt8Ltpbm1qK8ZXtifsI
HMKwh+A/Fp+xFThflfrXTwDXcI8C5zD7m+AbXgq8MOCIhc6Cf0bcjAeKz6D4
fsT7svqbgm/2MHDvQoGDFzYQ/DvijXH/Kb4acXeB6xQUf3d/+o3w2U3wsYn3
zX05SfDB+X/285zggwu+i9nJdX+Rrvvrr8C7tvw1wcfm70lXfO6P8XuO7x7B
zxbcmdAe4yVdzk/Q88Pzl55b/n2WLQu8b9L7CT449x/puv82we+5PoofPhjj
oX6+DsZLOnHV2f8Fgq/O/7P9c4Kvvj3w4i2+V/Dl+X/zrwi+/BvgJ9+CvxAv
1xl/1PFjIltOBH+bKPOzK/jBweAP74JfkE5+Qv4y/d/jA8aLBB+QuH3cV08I
fh/3H/mj7r+HwS+2Bv9QfFniJZJ/DBX8QfKrs8G/FD+V87EC+Jfuv5QfNjWt
kPDLz7J1wU+awV8eEnzRx8GP7mb8voNPCD5Xwd9cH/wG9wr6L+0Ha4Jf0f+o
+Il1+FC8D4GzXYmfu7sN74fyfFNLsc6lfDcKeMnAUa7gWxefsfXHNtzvRSrx
+cRjBg52VPxrri9wlMOlsr5yv0blf4JflSl+FfGc2c/hgq99APCsgXMdPhH8
cDk/Uc8PcbN5P90u+NmDgHdNu+Pmgj9OvKtYfBoeFunE/eb9pfjfGwH3fvXr
11l6h0PXjcRTt/eTfaH8W+6vqPeX8G/0y78K/4vK/7g/SNf9IfwxKn+U+zPq
/SnyYVT5UO7Pyv4R/h+V/8v9GZV/yf0Q9X4Q+SGq/CD3X9T7T+63qPeb3P9R
73+536Pe7xfjPPJ8Li346TyPPJ+KX0t+QP5wv+Crc//MBX/Q/ZPym6amOxN+
VJFvo8q3xKXn+d1X8Om7p/j02UKCT2+471hXxX+X+6uy/sS15/k+XfDtbwM/
IK7bB4Lv3hfndW2c32acZ9J53onbNk3w5wU/L1P8vDp8P+E/ufIf4Y9R+aPw
n6D8R+4f17+ensuyvo7cP5neP3K/BL1fhP8G5b8if0WVv+T+iHp/CH/OlD8X
n3Y/VuRXuT9yvT/kfox6PxJ3GDi9Ffxhzr/tE5l/xXV8Q/CJ5XxFPV+iP0bV
H3skePUljj3pxGUGjnH8WPCZXwTecYGzOyt/U/CZRX7MVX4k7jtwzONqgv9O
vGKun+IvC25kvo3go18JvPvVp2639IN/b4rtP+p13dC3yvhZrj/XV9f/uKNv
u6N9u9n5ryc3zx3b0hTX6LzPShuFMn9lmuBrKv4m4r/yTXEO9XwJfwnKX2T8
QcfP85niOpfncy2MF+MPx+J9bP1wnk4qcJTjW2I/Efk3qvzL9QAOfFB8acG/
ND+atQeu/OoFznzsJfjyTdv877ks618V/Zf8cXXgLVt9e8FnfgPn7Vicv2cE
H1vun1zvH7Gf5Go/Ie4397/if5+YnKempqWT8/bz/sV54vlaUfDBRX+Kqj8J
Pmqu+KlcH86/rs8qOG88f/vgPDr7J+r+4f5L15V/n2Xcr2vg/HE/k16HLyv2
n6j2HzmfQc8ncceBQ17BH5fxBR1fum7LV+qfcL+ujP37J+xn0gXXNVP8bvbL
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
Nr+UayjnqHxDuYhykspHW0PuaU5xooxOfAjBQYpp//NH4jKofET8hUVSHCNr
3xNyCeWUA0U+eQFy01WQo7R+G/ENBCfI2g+AXEUcK5WvKDdNghy1t8hPlFso
x6j8QvwP4n40i3xC/IvRkKO0vh3llj0gxywl8gvlqkchZw0T+YpyE3EfLhX5
iXKP4CzZ84l/QdyLG0S+eQdyUQfKSSIfUe65JcWJsvbE01olxdmy9pSLHk5x
vIzu2C9s/lW+2UTw0YgX3ZzqH9Y+xY+38+nJNy2KD+P41238rNdNOWd34FyT
zvqbtNsofyL/EhyL8v3FL0mca9LT+ssLVOSbOcCjVpxq2z+o13a24FCTznph
qJOYvQwcatJZ74x10FAH0sbH+qBnCg416azPyfqbXxOHOum/rIs5EDjXpLP+
Jetean0xlU9mAyfa9jfqsX2IOm19pL4d60uSL7UQhxp0q4eHuqNHAiebdI6H
ddBWBQ627V/Uo7sBderGS/01lV9Qh9XoK6Ie3ueCY026yk+ow2ntWZ+VdVlR
p9Xen/XgWCdud+Bgk876mmMFhzodf3fWDQwBONSkX434Dcap7Qqca9JZH1Rx
qElnfVary1rUabXnU166VXCuSXfso9a/Y/+29k58qo3fsY/X2X+t/yb8UT9R
/cuxDwt/q9inrb1jn66z34v+2T5ynCmOtWsftvdz7KNGd+zTNn7H/lu+X2P7
rY3fsd9ae8d+bXTHflvmhzS2b9fZR43u2L9tfhz7dp1919o79n17P8f+a3TH
/ltnv7bnO/Zr69+xX9fZ7629Y38U/04l/tjaO/K7jV/tG7vK/c9jwfN7ncgX
vK97p3KCjY/xBJMhB+j9f53Yf78W+YFywXqQE/R8Uy6YCzmhKfn7eX9BLrgn
rcNt/U/EvU98+jPk/l8UcgPrWL8q8gPr0x6b1hG39hMkvneA3P9Wn7XA98l/
EvmB9/rUtM51uT4Dinub3x8h9/cVkCtuhJzRVeQL1ovm9yvJ/c7zPQfn+3uR
P8gfeO53E/niM9zrK+Oe31rud97b/P5mub+HQ674HeSMCSJfTMC9znu+v9zv
ev6ni/xB/jEW/CMT+eIpyAVSh9vGz7hNxnHuLPc/5YZz0zrm1j/lgu3SOuI2
v2uh3jrrsG8i9z/r/7Lub9wzlR+IH8u4ac1PcfxTRnf8L0Z34q9L+35j/4yN
rwl/jXE0Xf+TPd/xL1l7x79k43P8b9be8a/Z8x3/jNEd/4PRHf9BnX/J9pfj
n8nS/iv+lXL/Nfaf2PMd/5L17/hPbHyOf8Ge7/injO74H4zu+K9sfI7/zdo7
/iujO/4Xozv+O5s/xz9j43P8M0Z3/E/2fMe/ZO0d/5KNz/HPWXvH/2bPd/LP
Svti4/wr2x9O/p3Rnfwsozv5WcJfKvll1t7JLzO6k19m7+fk11l7Jz/L5s/J
P7L+nfwh69/JLzO6k59ldCe/yuhO/pTRnfwyozv5U6X9qHF+kbV38tOM7uQf
Gd3JX7P5d/LvrL2Tv2br4+RfWXsnf8/oTn6W0Z38rIr8KPln1t7JLzO6k19m
7+fk51l7J//O6I7/QvSXSv6VrY/j3zC649+w/h3/jdEd/4z17/hnbH4c/5W1
d/xTpf29sX/D2jv2+zr7u7V3/DO2Po5/w9o7/gkbv+N/sP4d/4z17/gf6uzz
1t7x79j4HPu9tXf8P0Z3/Fc2Psf/U+e/qPN/2fMd/4bRHf9Gnf+mPH+N/TPW
v+OfqfNvWXvHf2XPd/ILbf9QnqCcoPyBeHbEJdXzT7xuxfEm3cFPLc93Y/+G
jc+xb9j4iE96tuB0k048OOJqKn4x8faIi6rn9yDgzZ0qON2kt0e8IvIDYz/g
gJNOvDjF4bb3l/v5YeBsk058UcX5Jp3ygeJ4k048wB2AE/g0cMRJJ/7qxcDh
Aw6r0fX+HS/4c8RnvUlwwG1/yf1/JXC8Sb8beHi3AydvJ+CEk048O8XpJp34
rMRl3QY43aQz3+Fk4PzdABxw0om3R9zUSv1P4hUCV3aC4As7+bn2fk5+rhs/
pPKxk19sdCe/2Mbv5E9beyc/197PyT+19k7+aKlfN84vtvZOfq7Rnfxaozv5
sza/Tn6xtXfyZ43u5Jca3clPNrqTf2p0J3/Z5s/Jv7b2Tv6yrZ+Tf2vtnfzt
cn4b5+ca3cnPtfl38o+tvZNfbHQnv9jmx8nPtvZO/rXRid8qONxi35pl91xT
8lfmj7VL77nS/9DYPx/S/kv7md5/xG/lPafnk/faYimOtNGJL8t7Ts8f762F
cY81y/3Fe4+4q3r/8V4irurRcj/t+XFx7xAnXO+fY3EvPpHicNv4eH42wfl5
VO5Hnr/XUhxro/NeEhxxW98Lce+dk+KQW3vit45McbSNzvNBXN6Jcj/y3uP3
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
R2vvyD82Psc+Y+Nz5KO6+9/650gt/1D4nyMflPFNjeUTa+/IJ3Xym7V35DMb
v3P/GN2xf1j/zvmx9srfj5b9p/On+M9835npPrX5Wx77bhj24Uqy//T+1/3L
fSk4wSI/zMmLeavWn3Dse9a/I58Z3ZE/jO7Yf+z9HflE7G8V+cTojvxlz3fk
qzJ+rbF8ZfPnyJ/W3pEv7fmO/bPO/mfr79h/je7YB43u2Afr7JvW3rFvGt2x
b9bZd629c3/a+Bz7n82vc78a3blfrX9Hfij3Z2P5wPp35AN7f0d+svaOfFRn
37P5m4R9MRmf/B3pxCcnLrm+/1HAi+8qOPKkE4+c+OKV/J7G96uNz+FvNj7H
PmntHftkqV82tr9ae8e+anTHvir6acV+bO2Jn74Q5lnHtxjm9WjMs84v12MP
zLM+35FPbP6WEv61nsy/s35ZzfON7sg/pfyL79cXnPqa/Wnjc/an6H8V+dHa
O/ezzY+zPta/I19aeyyU+TeWkuc78qf1z+d9Lr8j3ZG/jf7UKhts9fWmX2dj
5ZP0FA+FelG5v4TepPRfnDO1+/jdZ+Xd2z7nZPz8/9X/EUvMmbXnjN6G21LB
j6qhs34g8wS1/k8d/T8cf4XO74vffZ/xc17pHM8LbZ+fZxPxqfQJ/57uvt9E
0Cc69N0OXrFrj8fbh6WKdeZ6W/+3jnru/X++smgs9tmCgZ+k93rqDx/+fddP
rG6N1q+po++31IJfHbf6d9nya/y4116//CpbDp+kM26OcaZa30fpVwv99C1/
c9+gYV/lk/NuLS/cMzfjJ+mzd3uw85Lb9grTXrxlkVe6TM35Oa906m8ta2R7
HH50u8DPeaVPHXj9Hu1vfyY/Y78Rz9y5+Q8ZP0n/VuhnCp334xGDzzx36U2+
yPg5z3TEtzAOXOsH1NF33fOx2Q99Nn8YMvbPSy112WcZP0kftOqNXYbvvbXl
P2h9hTp659eX69r94I5xuXW3nThn//kDPxufL+Uz5F9zMuzvvIfwL6d9C+l9
8f3vwIc2bsx/eK7snP37/u9r9trr+awbX298P0D4JOkpv2lq6iv8Z3zCV9oF
5S/Fvfp08wbot13b95Nk/J/be2j7uvWZt/G1C88580N+RT7WQ/hXyl/bxRek
PfmZ8jnSrwC/mh987CrhX+RX5GM9hX8x/3dttB8h7QeDXw0RPkY6+dVp4GMv
Cf9iXgn54I3S/lzwG/Khc4X/fAx+9g343FvC38ivhjvtyQ/JJ2dI+9PAr0aB
j50l/Iv8iPrtQOFPpI9w6OSLs4RPkk5+dYXwMaODX+0CPnaJ8C/+XvmgrR/4
1QngY0OEfy0LfkU+trzwL/K7E9F+qLSvk5/4L48/1LWfx/5rzu+aIa17MO/j
A/+KvdHPfzn+lv/b+DsFfs5j+xZt3zdtX6F7/c9be39+6+Zvi7++scIKz3QH
X6nWjxmB7wN+p+3X2uZ3fecstFx47N6DOh+48PsV+yC/5++0fSqfVe3fdf1f
k5w74kKU9Glfdhl59t9XgfzAuK//dHxdI/v5T8dfN791479789PPO/fALqH1
xpZbf/tg+wq9bn3Yjv0ova7/uvZ181s3f7jf8/SztI/9t/xpYJvcs5XphTgv
kfTi89lm6Mm53u+FfNA1pvJXaT8cc+1G6z427B958flN3tr2WdoPnfG11NBt
/HXjK/TflSDXdarId2MwnsfTcYr8Y3pjrvJpKr99XqmfWzx/fvCnmbnKZxNr
5g9yWexWyN15Ia+V9Q+m3LH74b//knrhrEr90+c+HLlUz29MLrLfkX7zimMv
ar/JnOyutv07Ky/2cdn+tzfefug+/Xqi/cRM5ashfUY+ecpy7ePVOKeFfFeO
7/wxz+79xfs/5Kcutepjq0z8Pj+57bPcvz89f/Li6/+jZ/ho9d3WXWu9yVnx
WeIrrf34Hlt+2GH9wLpqxWeZ/7FlPPaTzV7sY+ez+Czjb467tu9f/3zmW3nx
/ew8PcefZauc2++am1boFF8s5MK8+FzU6Pu8NnK+dXf/Iv/9Hz45ec573+bH
tH2W8U/5eWNfO67dwsZ/i89Sfl30/KdfWm1AL9CnZCmf/ix7/xczNr373nez
Zy5qenX9k77Mi89SvhnXtn5bRMo1Rb5PGf+653UfXLTShQuEN/psvWO7DjPz
t9o+y/21+IxXpuy22zeU0/JCvyz9S4scusdflmz3NfjQ5xX5bNjWI8f0G749
5TJ8lvbfN4/ddplTOswXfrnKgZsP7vBJ3q/t80d7/llfrLbYDjP7kf9V6gOu
27a+i7E+QOTvSL+g/5ADu184f1yz7f75CfdQ6Z/cJNEvtwobCf+Sc1U5X034
I18YMfx//+5oJZ18i/xB+Ze2b0r+zL5o957yJ6G3KD3Hcx/Dc1uFP0G/bK3R
L/MXRM+sGX8L6ZCr4sCEj5b884WE71X77wO+Rz7YW/jfUuBr5HPdhb/Vrd/1
4GcTwAdVP7wbfC3lcyUd+h/O2QrheuGPg8H3Uj5Y8r9TwNfOBZ9T/ka9Zzj4
5HDhj2PAj7ZK+FjJv6Cv5imfKvnTx+Cb5KMzhX8eC75FPqb86zLM11rgs5cL
fyXfPDHhoyX//Dv41psJHyv515vgSymfKtd/DPhhK/hoq/BP8i3yMeVfD4Kv
LgY+O0b4K/XLZ8FHBwv/HAq+l/LBcv9uDr5GPqf8jfmXI8Anhwp/HAp+dg74
4KXC/9YGXyOfU/5Gvkg+eanwx3mV//ip+NP8/pbEflP1f8CPIHpUhe7Yz/7v
8l3fpP8lAuVgpZM/pXpghU49sTJ+vpfn34B9K6T8umLfDBv/2/lZIqr/Qu6v
uFGih5btH7hg3N0fXtI9qnxH+kFjTns6PvMR5KfJufb/tycPe+2aJbeI27Xp
Qas6/c+uyHek399GnwH/wER7fj/QP9mo85wb9tw1zGjTY/pW3h/jFz2wpB9Y
jD//EPxM6VMeWn/pSRf1oP280n9BXwjyQ2k/pX33w7bxhQA9Kzp00cMq80P/
SWV8BX0G5m9i5f2K8W1awZcmfeTEli2fW2+R8DT4qY7vvrb12yCmemyFHkB3
5qdHVP4m8xcoBzr7J2D/WP/rp+9Xke/k/SLkXG//ROwfG5/wnQr/qbP/8/fy
afRCfvpba2/whd7zpl+31NCbSOfvU/1T+RPtV99X9EOOj3xL+Vvd+8/r/NG+
/+/9L9Xx18lnk1755Kp957S3c6/8a6VlXn7losE9qT9V9KPU/zZfxKf1v+r6
PduP3WF50W9L/rXLp4/e+8L8S9C+BP209G+k/sWu/AzzOr4peL9U/y3fb/W2
8a0r+k+ZX7lz2/jmD6n+8y/29cQ+1C2+W3wafXRin1ukIj/0l/e/Rt6/bv7i
oBmDThk5i3auqPLfflN6/ub2kRuLflie/zGJfWxOxb5A+1xhB2wf8Wn9183P
qjK/Q2R+6/YPx0++rPyr7v3r9k9d/EUT/sS/afon/WqUM54U+ewI0cv0fKJ7
1/4+AHKRtI9ee+jHpl+mctnS1O/0/rPx/af8iXKXvH+ejn8ref81pf8loozP
5o9yFenKn+6H3ET6FiI/QW6xe+Bjkb/ug1yV9l+er48gN/H93hX56UHIXWw/
XOQvykWkq3z0EeSetP9S/qFcJu9v46NcRDlD5SPKbfL+Nr6XIJeRPkTkM8pF
6fhL+eh+yD3p/JfyD+Y3l/mV9dsgSHud30zm197/TshlpD8j8hnlKpl/G98D
kJtk/9jzMT9B5idP6ZvK+pb86UPITen6lPITxh9l/CK//iz3tP092Kr8g/Fr
jP9gnIC2b8JfY/4zqXmsY5+X9i2Nn98l0D70C4k/Kd57Zka+MxB2JtLTuIyq
fIRzYXov+Q3p8yZf+v7F9P1GVea3sN93CZCTKvrdo4M3OnmNr1aLd+20z4en
P9w5PD1uyQWmbrCktV9iwn2n3XZGU3j4/m1efKVPu7jvVa+v2WFWOb7D2uxW
64XVinu+gu92yMT3H822fS1rmnLlzT/Eb/I+m+1zV+9ryvjp5b47qOO7M77L
b5557zkbPfZB/s7xHcZ2nlzaP++4aelDNrhuRY4rjvnTzdmR+31k4y/sSk3G
l2Zt+GnfdRacz9oXdrVdIu/h1XCfk35lm91stvkB+0MeIP27lpGdTlq2fXz4
qws6jtlpfH5p9uhdC99W4gP1G3nsPtMO/jp/vBhX/sOyC+20yoHl+Bdts/us
EimnUl4i/ao2u84mprdhHo0+dZmNZ21/8/tZa1v/3+XFPJTzV/hfuhIfK/vr
Ll12vvZ3ZX2LR9rWtwPmb4E4eaEv//THY0v71o7XLnDa7NFfZtuOm/va3sv/
lN985lnXvxnK9+/SNv4FMe75K/LR0q3XDn1l2WUj1jdbevfdHt+nucTPPWFI
pw7jxjSFkYdtdPyOu7SL7zQf+sb4af+C/9hmt9oxYH0q8WXNbfPbLWB/Yv3L
+lfLrja74y39F4wXPHjWXj+MmpT/cMWwt6efWa7PvMWX+vyB5556m9pXaB/f
MJF/YnPj/p9tVv0Pz3Xt4/MaP+vFj9bZ1+r8q3X8l3rJi9jfqp9QLqacPEDk
Y+o91IPUvsp9LXqExD91Zf5NRT6G/J/z3F0t+gnk+SByvs0P9SLK/aofcfwr
YvytMv61oTeNSfUoa0++8wLmT/GdyNdET7H21BtEjzA6/BFmV1f/xLWYn50x
PyNkfgL0puGpHmX9X4H1WR3rc52sD+3XB4D/avxU3fsNxP4ZnupZIW3fNVAP
vlTWD/b5sE+qRxqd+2eEs39ML3Pmt87/lsoVXYLKF8XnpNb1HPtQareZCX2k
El/Lc+naT8bX8A+Pv1BuId+4ReQX5HU093We78Q/NdnzIZeMh5yi/rVHIHdQ
DlH5407ILY9AjlH5ZRXIJYdCTlH+8RfIHctDDlH5g3LLoZBjeov8si/2FeWM
VUW+uA9yA+UIlR8o11DOaRX5BvJOTjnjR5EveH7Whhz0qcg/9A9eDTlnZ5Fv
HoNcMQVyxliRLyg3UI5Q+QHrF7pAztlZ5JvtIVdQzlD5IvVvbRLXFPmH9SPH
Qc5R+QbvExeGnKL84w7IHZRDVP6Y+1IhtywDOUbll/0hl5wNOUX9ay2QOyiH
/CjyB/ZnpBzzmMgv82rf5Tf/qfyS8qOmpsb5Rxbf3aL24Xl7PuMh1A5UeX5L
4+db+yZtXyd/LLbT1ZvuMuWfxgdVvxn0/W9vXGcw8WqaWtT+sNnyaxzzzMI/
Znfd+b9/45rfFv/xrh2vOXh2N9ZLY/8l/zgB/Rd8cFjr1dJ/8XzmizW1FPJE
eT/U9d9+3w1OevAfK0r/ZfxA0T5Ye5WfT2x7flm3TuNf3v/ruObu1y4Yi/d/
vfVY8d/L+Jt0/HXzz/Gn81+Ov6mt/QvWXs+vjL9Fx1/0P5+9fyGvlPinsr6t
ur51z+/Q1j/ztfn80n4kz2/R59etj/TfpP3L+jTr+hSfsTnN/yrPl+aPMI6G
9DT/xvJwxP7L+MLvs40gh5CufpnG8T/++BgfybhIxHPK8xk/umYFv6/u+Vci
LuYaxMXo/nw8ia/7yuR50jUuRPOnxiXxj7Mq+W9p/OG79D8bfW+Jmyk+y/zb
NL6P8X8lPt5hEjd0tdgXGd93CeJSdH+dncTPMb+rlJ/Pl7ij4rM8P4wrgZ4T
EEdndMZXYv6j8t80vtTiTK39cRIXhHgho3eRuBr1z/8FcVn0CyEO1ehvIe6m
GXE3xWdZ33udJH6wa0W++FDikp4W+yfjkhg3WXyW5+cqxPVgfSr2jy0lbov6
COkat/Wi5B8Vn35+K/PHPPtF8Tmp2dNP2D8//9PzT/tJX5zvvnL/p+Ov6hcc
f1173lN6/jG+Vt4TGt9a+KOeaz0Z9/zNsn/ZP+9xPf/F55RW3qPvyv2J/pvn
rf9Qsc8Xn1Ob38M9ofF38za+Sc0nYnx6v6N9E+/x4XJ/c36Owz09RO5nPp/3
rJ4f0nmPbiH357yt333N/bB+b+r9nvTvjr/5vxt/bO3gjL/o/6PWhXHP/0n4
73+7vui/2euf9/aANE9A/TPi1y3Pf5qX4MXf1udP8RPxJtY/7QOMu6O/V9rT
f9Ss57/IX38zL+zrsyv7Y+Cr92xzwbQns8J+/EOm9uM9fjxy5OG3zM7uObnH
Q7t/Ol/oPn3oOeccXbUPFnb5LpXzQ3vSOW31OxaIhT3gFza+3Yr+c/b7VzyH
9H++tebjJ/dcxvwuGGepP7TlHfaJfE7R/2rWnvf5fnhuC8Yh4ze/DN+DdI57
ctv8vYJ4hdK+wPHQ76L2Ad7nxfyzPpDSZ9m5KeywX+r65FwXrhPp6xfra+v6
AtZZxmfjUv8Qx8P3moL3JP26xD78ZeV887ns5wW8J+mduk48aZ1/Lhh6xQ8W
mNSvY7jj1DGnLnn4i6X+Wawfnr9a5Xx/Xqx/vBvzrPYr9B/Z7/J4Duma1635
3eMhFz+f2vmtPeXuxxI5vJS/6+wHqdxd7R92vzggzQOz96dcfhXkdLX/Ue6W
PBOjj4bcLnkyRh+G9ZU8JTtf1KcYv36syN8fQm6nHD9L5HfmyzwPOftS4b+n
QG6mHH2KyM+U6ynnjxL5nnL1+YmcXcrXzC+nHnCjyP+0V7VAzh8q8j3l6oGQ
s8eIfH0P5GbmN9wj8vMwyPWU868U+WVzyNVvpXk8Mv452cQkv6Lsn+cxlfM/
r/DntdI8H5t/ynOUw98W+Zty+3tpnpQ8f4N4NeR0tf9NhtxNOVzz/x+D3E45
fozI78ybGefk99Xdn/y+r3P/0j7f25Gfee/yXOr9+xL47QK4Z9W/dy/us91x
jy4l9+ed4M+DcA/r/bs67iPqV3o+l0R/6D+/V+7P83B/0a+0v9y//D/vSb0f
J+A+4Pf7y/1HfvwZ7mm9n3PcN3cm/Lu8/7hfTsY9foDc31cl9SG6Rr2fOV+7
4p7U+5HPw/1h40nXb0bGc6n38754X8gBYarcjzxP8BNmen/z/PbGPT1R7udd
8PsrwYf1fPbEfcZ79G65Pzne6/CcCXL/Uh7iPav+vb+gv864R3vJ/cl14z2s
929dfaa6+B3k34aJzv2I+zk+79ivdvrx6m7PHdAU8Vmh74zvd8DvlP7YreOW
XXjy1/ys8Jcx+P5R/E7p8W/jplx/wioBn5X+J3z3xWtfTfh5XMVnhc527Mcb
/87O+NnvRD6ncfu4gzM/HS9cdHKfTV7O8Vl5vwdP/mTbf/ZZKOKzar9EO3xW
5q8V89fqzB/7fQjPceY/e9RZH5tX5/35/URn/h+qeT7f/yHn/Rvrd/fJ/eP7
f+D3jrQva3wf4q8s7kr1tyJ+asGY6g+l/xB+0YxxVyr/Iz4q0G+o9wvij0S/
2tj636HwW1pc1HaFP9P6R/xTML8h/MWkF3LZLhafQH8i6aMKv7Xof52Nfmfh
F470CzvxeXE/+MURp2d0+D0t7gpxWDJ/3WKqf3U2+vuFX9juNb2/Ed9XxvUh
Doz0xQq/cGCexGT4+0lH/F9GvzviAK09/KqBftXzC3+r0Yu8xSaL+9P7ZVIR
VxBT/bHcf/DLh6HwyyPOT+yzm1hcnupvhd9/PdGvS/81/OYWd6f6M89FN5wT
PR/FJ8+V+T+MTn8+/PuV+lU/4Vw045yofMD54jnbRc7XPTg38L9Xzg/PBfz7
+fZyPlL9Y8d4gJwv7mfEoVb2P+M9uM91fy+Dcwf/feX8cd/zHNwh+38lnMtD
cE73kvOJuE7GoVbkA+57ngPd/9OwrxFfwniT0v+F84T4gKjnj/t+GZyDP8r+
57l8B+dUz+eOOHedcQ6fk/PHeBHEj1T0J56Lb3FORsv54H7jOZso54txYdfg
HFX0J5yLUTgnKj+n+u16cXU5X7BPxLH41Pjqwi7VnXG3lfjngt9vJ/G3ZfzO
cr0v2+b20+YLP57xm8PfXHXReMyhw5/sOLO0j/P3xf2ybCX+eVc8N41PLvGx
Bs/+eOIx/ebkv/ms5+gFnmgfF5j1+u+n7VLK/4W9cMXw+Qmdb5k+untU++R9
bfLtFznk2rjD8t1W6vZyGR9T1FvrHIdN3Wt6h0fnjx/N9+LNs+4q41umt9WD
+zBvv+JKvS/osFD8TeurXx28UNn+zqL/7FdFv7GnyM/3FeOLyxTjyr8oxqnP
D3gux2H0d4vnZ3huxDiMzrhNzFtlf2L+Jf55WZ3fDPMaDy3m2eiFXW47rnvF
/4b9Y35Ljd/G/uC+iD8U+8TouPdgX+1eiY/F7+Oy2Ge/l/2Vxk9uh/iocn/e
jX23Cr7X/fdb7Ksh2Ge6v9L4yyXip7I/uW9Oxz7S/cN9yX3aTfbngthX3GeH
yv6CPTPegn28vexf/J/0iv2T+wrjC7q/fot9xX2m+2tp7Nt7sY91/2I+4k5Y
d91/C2JfYX4z3V+s/wH5L+r+xP0T98Y+VP0V+yFyn/0o+4vxfROwTzX+rq6+
b139y+lrdvv1lj+0Y3xEJb+W30/D75ROvLN87MjNrn5+xQr/rcvfZTv2o/Td
Y8+z3/u2k+UnKF3jq5XOdruiH6XXxTcdcPhzrXds8FNe5LlV+0cz1395ZJtd
Z7rd20pnv4fiObo+bDcI/Sj98q3+uPrxJ39peqX2z++vxu+0/bI3bbDBU7/s
anmb2p52xWXwO6UX8XHfIo7rW8irpf1oZn7VHevtt5zUNyj5l8Tvcf6N/vqn
r3+x1F1f5X8/bPujb22am81+4rzt8lml/ZV5BaOd/Opzsa+YV7jyoA+++/r0
Mv+zGN/O5rfgPWH747szO353zy9jMc6lguL7Der7RuuwD5tixzWeyZ84rils
23/BRzafWrVfePadqZefeP223da2+CXmU5JeV9/ws+f+ccABaz2Xf39x9vzL
5/yYHdDl+AV7far+8ftaN4X/XOPjdhi9/fYbfzY3W/idIy58/MxvsrMefuKc
z2eU/pdj9+q09Xp7tAth0Kj9ruzxTTbj7UNXvr5XSS/G/2O+dpqnZeP/ncT3
D5T4/hG/+kvTqB0XCL0X6vnI9mF2NqLbIaM7v1n6D7Z659ULz3p8C9ufen8P
+McTLTN7dIzDBz/5xoRT2oUjJH6e+ZnchyNk/z2DffUG9tk3sr8w0S3cp9fK
/lwT+2Y69tHysn8Wwr7gPtlO9seYmvwS2s92cuxnn2Jfc1+uIvv7BOzbLtjH
un+5b5rGFftI909n7AvuE90fl2HfjsM+vlv27y+xb7iPdP849TVtfzNuh99o
/M462HdTsA91/3FfDcc+u072V1rXeL6o+5P8j/tQ998I7jvsQ91/dfXztX50
Rb+oiR+e+NMX2+37sNUHrPTP/evFBxX5wWuEIn5m8Yp+Mxr98jmN45cXj+yn
kr+VyAfzVfqvrR+Bdql8UNK3ffnRZU760xKBdlila/6Snn+22w79KH0s7AHQ
Xyv98/tn8Dtt/7czP/n4gq5r0L5SeX9+/xB+p3Ts/5yfg+94+M33FirtB7cv
On/vK/buFYa//MTrfY6Ylo9f9p6VPn/7ZWtfV9+XdXcYR9R/2BYvfXvkMra/
i08/vm3/JR4789lOneIO+eX5O4vMzYv7uJRfp93w8eBhr32e73LMu7sd8sz3
+R0r7PjADr2q+h/ja4cn91y5f1gXqdhHX5T7b9vJo1qvfy9boogfyImHQPoh
P/y03w+D+sSCjy5W4X+0P95z3Ko3/GHjL/Ojdjj8V/NdWfrfaPdvdez3zPdg
/o7yn0026vDNVbf+zPfWvnn631f4Ktf8sPZfvL7he19vbnKB8pfzJX/tXMlf
+7Tfucv3Onf++PtfLTDypKN+yvc98pwHZ/6izD/cCOv6MtZZ15frxnXU9RuB
fXUb9tkE2V+7Yl25znfK+jr1n23/1eUfIC4k74517i/rexfWjet4tKwf80Op
310n+6vOvzMC+y7lY+X+64999RvsM91fm2NfjMI+0f3xAfbFptgniu8zCePp
iH2i++MYrPsn2Af7yPrX1Zepw1fpv0g8fExrj8BPxX++4ZtlR836boXw6lf9
L7wg6wL7VVk/Yzno85etP6Z1gS59wkJtftoSP9Gp791C+l5nfTfg/ud7cnzZ
6jf0u7hX5+k2vgU2XLXLj79dls8PjMcj/a2nvlwyHLNkuGj4qb/e94zVAu1l
pN931epHrbP9KobPpetz9o2rDxn1j2UZ/xGIA5GO389P5ft48Z9fX7HslO+W
XDEU8tWi8ew2+Wqazd+FiE+5p+1+2DeMR70T0v+EeaXfu7PM79k1+BOvYN24
foWdp7QP3XdVzyPDbR/lGx808pWlj+sQj+n86IEX/KW8f+78n2OOv3PB7qFY
ly9y2mFIl/ygJs0P+rbPsn+74eqPs9m/eXjGxTfPH+HHt/5v3rjfqrfc2z5M
bRvfnPyUo/55/nx7/Ut96kfzbVt6fJ49c+y3Y0evMX8FP2SR4zdYqMt+85n/
Wdf34CtvX2qt8zLIDz2C4sfV+V+L+M5+5t9rHN87rZV5PsdJfO9rh/bcYv7n
28Wtl7z33T/c1ylucekKGy++ZWl/U3yP6XI+uX7X4xx2lfPn1L9vIf1inAue
kzPlfLyHc7cnzqGePzw/tMc53F3OH+eT50znv66+2ao4d2fiHJ4q50/yr1p0
/v+Gc8M4rylyfnjueA7PlPO3Kfb9X3EOjpX9X+zbL/Nv8Kn2yz5ND27w0RUf
ZIX98oe8mOfS/1GX/7ZJ8fzw9yXfvOD6FeZDfva/4GcVz80+u7zrfpMG/ZTf
vNomO66zR3k/1tU/Ow/rw7pK97etU1n/4PDsh1t/ObUpLA7/XIeVL5tzzJ/K
9hf0XXnAkadui/qNa1T08zr8gk9+d+FJF1y1QPyxTQ/9JN+/Tf/8l/rHNfhd
X4NvzAUf6ST8g3zjJvCRU4V/rAG+dQf4mPIv8pXnwWeeFP7CNyGfU/5GvtMF
fEjnvy7+hXzpEPAp5U9p/Fq/Cv/ZBnyFfEb5C/MO+B6af8B9uwn28Ruyf5/F
vsQ5CX+R/fkF9iX36U2yP/lc2Ncq9du5b3dw6kdwXx6Gfdpe9ifjSVM+VO5v
6K2R+1jn73vsy0+xT3V/OvgbTaTH5rv/fuvJz2XT8Kn4zN0WXfP+o05pH7sl
cZClfwH3Ymha/qb1Z+33KvhLGb+M9clmAH9J8emKz9i6mJPfcn9Sv+77bMBj
Fyx+zs6lf+a881vef/ry+cL8v+m79mH9Xs73ubfpjw88VT6/mM9tRH4q52/Y
GuMW6fY//cy+Sj8t6cx3e8qpvzFtueK9OQ895f0H1OBXFffTHPIBizclHXw1
3HH7iatd8/iP2ejt3hhzy5EfG72wH7aH/bdjZf9xfr38oI0en3rO3X9eIHy5
+8l3XnbOD9lON7z91LBPSv6y56z9p/V/Zyurr6Xzt/29Z+1+403bwT6zYgXf
ti6+rQ7fEP6xrCv24W6y/yR/ukXfvyP2xfnYJ/vK/tgQ++ph7LOBsr/Sc7nN
f1w/c13sqyHYZ9vK/roT68p1flTWl/uKn7e1+SGnG735kZ0ff23UF8T/qJyf
OnyfK9vvfddBR/+slx69zv37rrJAKN6nlM/q6ofCfxGfRd3ATe6OC5+1+1L2
/C13v+il7//68/58+7Uzm9aZld27+bG/6ttaqS/q4k9yXz+Efa7vx33bF/t4
R9m/dfn5sO9F7nN9P+7bB534Re57ngPd/8xn2ATrpOPnvHMddP4d/CVbvzT/
auPK+DnvW2Ad/irzz3qPHLeuXx2+J/9/jfzO9lfbvu8s9ctLOutnXo7fKR33
f+Dn/nd3mbzFdq/b/Bz/4QsvL3HOZsxPrrx/Xf2ERz7qdlr/dzvEGzdebqcl
Xp2bPd1lrzmX7F3KD2PQ7yA8R/tnu4fRz1hpz+e2xzj0+XX4pvy//i7df/NF
8HfU/ynjK5z6ChX7O3eUU7+X9Ep8rdTXtjqUpLO++mb4PBr1grW9xLfHeX0+
/5/iKPSe5/aKm6z1wSl3pHVp+Fe29/Bn3mr7G9Na5I8+1bpRw/H7/Rd1N+5E
veRRrZpfTnzTpQTnlHStuzVO5rdu/WivGCs4qKQvCzxT4pruD5xT0pH3wTp9
WQfEeZBOfz8/1xE68U2nCM4p6bfAH3ElPjX/Df6V/GaHfg70tfPEDkV6cd52
e2ooPov2x281r+1fgj3kI3x+DTsJ6bSfvC12FNJ5Hw4UnFPSFff5JchT89q+
WJd1txqOz2Ie+z+l/SuOKumDkQ95qeCkkj5E7g3Nz9N7ZYTQiedMXNSFgZOa
9r+Cxc8TZ5V0xnteluRBlfS6+ldO/c18XtvPW32tSVqfoly/xvVnbPwOfpa1
d+rT2Pz9t+N36rNb/3Xv5+BLG92pz1Npn+ZBfS7zV6kfVPqna+bHqZ8o/tFK
/R3jf059GWvv1IcxulM/yOhaf4c4hqQ79XOsvVMfx9r/KPWDPpL654c0ro9j
/Tv1YwLpTv0ha+/UlzE685ZHp/WJbHxOfSVZv0p9Ilt/ra+j9dGd+kxGd+rv
GP3qxvV3bH4WblxfqPQfNa4fZPR1G9cPsvdz6i/Z8536StZ/17a/m5op36h8
8t/ylxTvwORTGz++bhG6Pb938vumlg2T/irjb57H8bf8Z+Mv86I9/Apv/Myr
Zv2RjWvqHzn1C93nS/+t2n/d/Mv8Nun8biFxU1pfK823p35exmepX17Pr8SN
tKS/r28vfqdKfKfaTdX/I37hSv088Su0KL6Exr3o+Ovmr278ajdQ/qt+bR1/
+vuHWu9K+qusX4uuX93zpf9m7b9u/tVvo/OrdcUpD5G+aaKfrhmPgrxFOvFR
pT6J6s/8c+qPKi4E/+rbC750pvisdf0rbrPWZ4F+2uzpp2ld5RKHcF7HD/yK
nLg0jfEryvGNl/ERP7Wb4GTo+rLOzHhZX8pTrDtOeYt01h9n3fNJkNdIZ3ze
Tfjd85D3SD9FcJ/Pg7yV9j8RuM5lnRTSqe9Qvrsa8h7pxEfVOh+kR8GF3hry
FunHCq4z68yQPlNwqVlnhvTHIM89hucMgrxH+iWYN8TZxjUhT9r+grzzhtRB
If1pwYX+APKW9S+4zpS3SGdde9bhGQN5j/SLIdcQF/XvkPdIJ75qRD/EWSWd
+KiUr4iTSjrxVannEmeVdNobiJtKHFXS1xLc5z9A3rL3T+S2FSLxplN6iSvN
epGk18knah9S/UdxG/R8C75gYDyyPF/xwerG1zKv4+fv+zjPF3zBCj6q4BNa
vft5ff+6+dO69mpf0/Gr/lx3fwl+X671pyS/KVP5QPDjDEeOdIl/reiviouh
+q/iGjDOb17HV/d+O4nfXfUbid+p6DeCLxiIM0h66j/vBnyxMn6t7v3r5k/9
Nip/Ka6G1l8VfMFAnEHSBZ+QdgZ7ft381M1v3f6pG3/d+9ftH+prrAt3m9in
eV55jjz/geDUVNqn9al6V9o3pX8tNfQmpdPOOEDqX/H9BKfeo1fkM/ZPOVHx
M2R+KvxZ/DfxaHn/vsn8fG94hKSLfB0gX1fGR1xn4g0qnfyBeIakExcuA27h
fcAzbNx+ItrPqNhveX6JE639A3cuAo+uMn+0ixEv0Bl/rvlzpDMOiH7SxvR2
kXiIOv/APQzAQ4wOPRIv0ZmfnHmQzvxkxIlWOuU44jyTvn4y/hWCxjdyfFsC
t5B4hg49EC/Rmb+cOM/O/BlOtLN/IvZPpT3rahPnuXH/KzB+M2j/xC0kniHp
dfipvxBcwh7iv21cl7rEV21M559LbyG9+Czt90+L/b5oN9Ps7IqPSru51F/S
9Y+CP1/KLzXyk8pXjf0bZr9qUf6m7095kfRHBddH66MQ35D8aZLUNyFukNRH
MjrxCaV+kdj3S9wgxmGRvpzgBhHHkPQ1kX8o9Yms/Ujg/jye1ncyOvEJpT6W
jG8X5iVbHArpzDuS+ljWnrhEUv/I6MQnlPpH1j/xDSlnTZL6L4rbo/LZNOAO
SX0pe/4OghuE+ltGV1wi1Fey+VtacX0a1qcqcYNYD4B0xQ0ijiHpxPWR+llG
J24Q+dN+Ul9IcYNQ38rej/7+J1IcLpvfJvlTeuof7FThb0ck+MydKvIZum3h
Z+P2SwTE8eU17Z3x+fodvxf5yOjkW5ifyvOPSPCb13Tef4nIOESlE5+ZuMxK
pzxE/qP0gyBPUb5SOuUZyjeN+59tea+N6TMQXzGx8nzgKxNXudI/5RnyJae9
xS877298SemML2P+gDM/+T8hvzWe/w0i7fCNx7+p6S1Oe8NldubX9EalU54a
C/nKmf+M8puzfwyX2Zl/i8trTF8oDIZ85eyfSPnGmR/jP877RcpXjeOzfHxA
yhPdIF9Q3iC9zj5Oe4+HT0B8ENq3NmhoX7q1NY0P8ew31fGPF/o4oVMeot6m
8kvd89X/meIglviGUufO6KhbE1P7eDm/ituMepL2/Bshj0gdutK/D3nmcvAX
1DO0/ikPEfeQOIik3ye4yJQnSD8Q8shakE8GQl4hnfIIcQ0pr5CuuM/ESSSd
9nupgyj+uRIXmnVI0v5LXGTKE+n4StxlyiukE9/wJsgnO0FeIV1xnykvkU58
w7+mdRaNTvs1cRGJk0i64iofD3mFdOIj0j5OnETSiX+4dFpH0fpXXGXUITT6
/oLbTDxn2Z/xsbTOodEZz0X7hfrH/2/6U4lf0vpY218r/fe9hb+l/bnxtbX4
y/8eX9riYyv2q3mLD/Pfn/Y+2v8axxfOyRn/OVnkc9ZFoh+H9l7Sae9jXQGN
r6R/jnUtVpX6jLS3Aoch0/p5xFcmrrLjX7bvtT4j8ZUZH6P1cWivHu28n+Y9
Kj4q+Qv5r9a3pD2X9l3Hvx7pv3sC9ljSaS+m/VjxD7Tuhc5f6t9aoVJfletz
PdZH62fW7Z+6+blU1mcNWZ+6/UO5bUiqH1Xmj/M6Wuavzr47KYlPrMaHF5/E
J/s60/zwI0QuUXzUXwhuYo+G+M5+/4qbovjrjL98HLgsjENIx7eV6E+sx13f
/+OCm8I4PdLT+Mc5htdCuuKy0E9Meop/ODmnn5v0cYLLov4Z+st/D1wWzT9N
4y8nVuobpfGJU3KNP0rj77raPZaObwvTLxinSDrj84h7qPjujP88FbgvjFMg
PY1PnVWp/5fGh1qcgo1vMcFF0fydFD9xdoU/vSm4LP3gZyeduC/ETbxb8OPf
F9wUxhGQvo7gsqh/i/EIbwCXRet3pfGr5AOl/yGN36T/qrRPp/GrczPGsZJe
d7/iH4JrWNIpt0j+SAvpaf7G1xU6z2tjPlb//P+2/zr7M+vaaZwd6Y3rWpb0
xriK895/47pkJX1QQ9zCsv/Geffz3v+JDfPOtb3WbZn38TXG9Zv38dfNf934
G+MalvS69WN+Z5rXWdI7NMy7m/fn/7f9161P3fzz/6l+UvKn9Nw826z4qGlc
y0zDYWzcvorfPqkmftDibhx8xNRvvoSTP1Pxv5j+dIjgNin+EPEXU/9LqX+j
3lLm4R9emsh9VfxC7tvU/1LKH8BvzD38xhOBu+Th7/1TcJ20vv+QRO+o4j9y
33Hc+wn+FPutwSeMNfiEWQ0+oeE6TRJ8JKxP5uFjHiK4UoofQFyoGnzIrAYf
MvPwIW8EX0v9L6X9hPVaPPzDLwS3SfG5sP7ifynxtzoJLpTiNxJf2LM/wr7Q
XGNfaKH8P7ZxfRj3fi+e/3Ir40A2Efme7Xl+Nb4O7Zvr2pO/b5rUUy3pXMeF
k3rYJf7uMOzDE5J6zWV73n8nJPX8Sv2I5yqtZ1rWJ67r//fg39OTejVWR7aZ
65/Wg6qO78SG42tqGeaMr8DfvaOZfCqt11TOD+sMdkjqnZX9837rkNRLKOk8
Hwsn9Taq67eZs35W11vWD+NvrRl/6/+v8TfJ+IvnP8r1Ce2TegFle+J0vvcf
ri/6b/X6T/Ovq/ip6X06qnK/Ki7yeMl/1Pu9r7Sn/4Dfq/+A93V6f5f+B96n
PVKcRBs/8Rtp/+uI+5r0O4Xvn4D7nvRfoF/BeZT4xS7h6iS/u9TviM94AO7F
oXL/En+RuIt6/7PduSnOo/Wf4mItUOH/vBfuwPe870kn/iLrNmh9RsonxG0k
jiPpvO8ixqHyEeeV87w/7lvSib/4SopDaeN7Se7NYYmeVN6vxF1cB/c96and
7ssKvirxXO7Bvaf10XYRuePKRA8p8RmJy3ityBcj0a/gPNr8Eb+R9j/iOMr+
zAWH09rTHkb7mObniF29kp/i6M9NXnuN/6Z+ndr3y/ylS2APo31M8yeuZt4J
8zgk/4T2uFba6SW/gnyRuMWaX0K8e95f4yR/hva42bDPzZH8E+IX0371B8mv
uQz2MOLOT5D8jjSu+6fsfMmveDTJH5liOMikp/UDuhqOMenX4r2ugP3vt5Lf
Q/xi4hbfJPlHtIexTtBRkl9D/GLkoVi+bzq/XYhbna8j+TeSN5xpfgrvZdr3
Nf9J8pYr+Tu8t+nfW0vyTyRvOntP8ntegj2M9T00v4n2NK7D1ZI/Q3zjx2Gf
21LynxgvqHVm0vNTp7/69qtfCG6e1s/uAly7/k59QOJPko96+JKMz2McHemI
74pe/SfFzaOfl3Ti5m0L3DzGuZF+OHDpGDem/q+lBffO4txAv1Nw61T/JP7k
3fDTqv5L3DziRtLPTLri8jGOgXT4y/PHcQ8qvls/wb1T/RP+csYVRvV/Ke5e
X8Zxgs663/BjZ/Rjk078SeJOMo6TdMSXRs2TIX1dwc1jnAHpxJckriTjJEgn
fuRqksdC+tXAzeO+8vAlOa+MYyC9Lj53otxvE+V+U//RePEfKe4IcWxIJz7J
+JRu/WtddeIUk0584vEp3eZ/vNRFZb1U0hV3mHjEMn6j7yzjU9xj9ifvF8c7
78/xkM7xkq517VjvjnTFHSaOscyf0VtlfpoU9xj9yfxm453517qRHK/Mf5T5
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
Kb9+1fn1yr+bOv9urPzmljr/t8F/KOVT/uHM+Ydj3z9WP9YvNB9R+iIz64uM
PZ/04WeL+V79+3H+pPLrZs6vU/7hxPmHyn+bOf9N+Ycz5x8qf3Lm/EnlB06c
H6j8yZnzJ5UfOHN+oPLnZs6fU37gxPmByp+bOn9O+ZkT52cqv3Tm/FLlZ3bO
zzQX1fmFys+cOD/TXFbnFyp/deb8VeVXzpxfqfzDqfMPlV85c36l8k9nzj9V
/mTn/Enln06dfzr/ZH2z8yA/X/knnfV/6+vb+l/8pqWvvsbrB/qm9e+L/kCx
N/QJxr5/Bbv5ri19lP+fy7+825rKv3PRaa2v/zDjbtGR9/XEoTr+9P1n/ce/
81ZPy+9/RfFRXM+5utcXlJ/+4/N3rsdv7PMVys/v7V/+L/r+wl09TevXxOet
nlrtox8z+H78EvZPwQPh9x+Q/2Ks/ufX/+ky9b9Xo/5Hyr/8o5YfO7+3/2Xs
/WE/ofH+yHuL/uhse/Fp6rzNFp/FuiM9v2ajuBN/2eB7maPj+9f7zn58aOir
lvKT39fijzbuv1SXv72/JO+J/v134t+sLX+2z2s3Hwf9+t0b44vr3/wb4gXg
4Jh/Y914821YdySvLPkJ/6n+kl8HB8f8G+vGv098m3r/+YvJr+jPD6zL7v3t
D5J/mbzL2Ux8mq9Kt937G/LvknfXXSJ+zaXSjTdf52dy/npwdOlfIP/mOdJl
9/6f/M7kdRY9eOzk5/15dNu9/yO/j7izy8WvIT/xAdGNv1Lx5+QFJi9xYn7O
w63rLv4N+fxwbs4U34b1VfJayXMt9g3SdTf/5i7pxr9JfJt6/7lP8rN6Po70
IVYbfAftH3v/bL1/ww/W8wXFdxiMX/X49L3ZUzJO1fcf8OHL/c3d2m4hH6O9
/6v1opaWnnIvn198nInXp2PXj9W/9Om6p2l9pPzkznwL5SdPLxG/Qvmx3Sbx
L5Q/PDPfQvnDs4PEr1B+bPcy8S+UHz5bVnyx8sOz/+zPz5QfPPuO+BjKD+6c
36P86emLF/MziGPtzMdQ/vlsH/EplH8++bjiV5V/3Dk+VvnH2Z/1fApzvT4r
fobyr6dbiY+h/PTOfAvlpxfeF3bl53cPEv9C+eMz8y2UP97tKX6F8vPLOFb3
n55f6v43/2zvf2r91t0G/v2G/uzY/Vewc/5Z74/Wfj5i3ezF+nXt8o+tr9bG
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
6/3YRcvH6P6nVuvZ65etPzp2f+miLZlPe4R0fay/B6/y0xce8f/+W7+6ufSL
6vX69cvPk/6byr/q8o/VP+XP9y9bn8q6Fubn1vFIFy27/NY1uZ/5uvX7XfH7
Hft+6VasWL9B37/i7x97P8RV8H420/31flb9fur8uqH/eyx+Z2x+rLmCD+zM
FyReYutwn7x/Ij4XjuBd4gfyfpIfMXP8BXorcAa9vzRXyvxA2i8cQvMHLxe3
aVX+6+QDkB/Qmf/3wsS9vjRcJ/NRPiIulfmAcKWSnzAd8AsTd/uRcKvs/44e
f/fAcJusD7sSLhS6tHeJ/7c+fqfrw3Uyv95cKvMB4Uol/6Fbb/3+5Fu8JNyq
3cQnhCdwdbhP3j+fG64UHEHzA8WF6L4q/uDPJd7oJeE+tc4v4AiaH1jvX58W
jk4fvzQWn0v/QV93e/HZPH8+SfMb/Yd+s6f4bPQX9i9bi79GfSoPqTw//ec9
6Tf7is92kLierxN/jf71gTpPqNSPuZnmq5nLaX7aR8TVNN/tt9L/npB+d7j4
au8X1/Mi8d8K163OEyp2czPNVzOX80Hip707/Ud5ZAP/Pu3wFvHV6D/0m5eI
/0Y+3Po6D6nUz7nibn5XfDbFbZMnV66vuVj3HfDbzN38iPhs9L+3pZ28VPw1
+hf96gzx28TlbPA52/5Vcy33M5+ytg/1j6XLvSp9ftln1u9e6/3HyoeupPWX
zf20/uTHY5+F2zkT/1P2bia+51qfb6x+0CWzvj15o+fl99Yv4/r7htt5X/E/
ZZ/cV3zPsfpx/ZrPae5mq3znNZ7PXEHzBcm//I1w2Rz/Hz7XFI7gXeIHMr5f
E+6b+Wtw2fbN7x1fb+6b+YHs38lfMH8w/LMpnEDzAeEO/mW4a48SfxAu3B9F
f9j8wB2r89HHTs0nnJfrxevmn6/fyM/YzVV7qPiDm4nb9hLxBeHCpXwDvuB8
3F+3Lly3jfvmZ+zoYuf5qY9y/dnhsv1c+DvO33ipuG/mD5r79lXxC5+b338y
XDbnt5j7doT4g/X53XPgCBb7EeJamk9IvDXt+oXiD9brk5/qrhW/cDNxLc0n
/Kq4mW7/b6/WJ48oeThuv7Rb8wXNtTS/8NfE1fy/4gs+rmqffTvFji4uHEPz
CzcT99J8Qdp3+Icz8wPNxTTfkPYJ5/C94hvSvvdVO3f7hFNoPmH4kTn3Jv6/
bz+0X9qt9y+0z/AvO/MJ67ylu2ebxB+s1xe7lnaMnXPvcEDKp9vnL4T75v3J
mP8Wrtenw/W6QvxB1s9fCdfrXMU3w+t4ULhZR4kvOLZ+2ClcrehLT78i/Tm4
YEeFC3Z/8QWd33ax8tuy7u6+Fm7YnopvuUn+oT3lH/pCuFyvCJfL/ED8G8Rx
Oj/l2HDBfi1cMPMFo2c7/Uy4Xu/U+fhB4YbdEc7h98U3JP/x9xv5JXAH4RDu
Jv4g7ftT4Xrtovxmc7vMH6T9PivcrqfLP0p7LPpa4hN+W9zLT4svZ66m+XG0
zw+lXX5F/Lmx9S3t7tVptw8R/+1ZaX+0u6PMp0v7/VLarfk1u6T9Lafd3Sl+
3UVpv/mc/Kzyn74gbuXLxYcbO194XdrfA9Lu9hGfbv7ZrRL3s076Owem/d2V
dvfVK2t+3YVpv3+RdvtZ8elof7S7M8SXW2v+Je3yn8Sfo33SLs2Xo33ukXb5
LPHl4h+f3Bzu5ar4mLRbfm8+ZlkfhEsJr3Jgz+/3E7/S+cnmt9Tn68Rnbj74
ftpdJ/4mdn7v9sn3Hx0upeM7zb08WvxK7L8dbqX5mnw/vz9YfMvG+dWS7fzG
/vEyvoR7ebX8x9j5/aniY/L+HxbupfPzuZ5znx3Fxzw+3MHlcAf3FH+Q/Ql+
evKhsY+dr7xf3LADxA8kPnTn6H5dqviinxW3bF/xBa8Rd+w08Q/NNdtD8bGM
n4eE67W/+ILef5sf+LfhfnGfdybeAvsfiFt2tviCybss+wjyZLHDNdsqXLOf
Et9we3HFviD+IONPraPTl//Y5F++vpF/ae7YK8UfNHfsk2q/J6W94J+yPhHt
g3ZhvtzY+TncyX3SLsy3G9OXg3v59LQL8++uSvuiXZlvN+a/oV3Qrg4RP+4P
xJ003w6u3MlpVx7/aB+0C/PvzNV0fu/DxK00n472Q7vx+Er7eHnahfl01p84
tqEfAMfO/Dr2l+E2Tc2fZP20RX5/vfiSjF9wJc2/NBfT/MlGfMWS7fzG57eU
D26k/Vdcj3/OfEnrc9h/YS6m+ZPcv+awWl+k52a6fXH9ZZV/vz+fYj64uNIX
e8ig/BeGS2l+JXZ+f6H4lY8W98z8M3hQxzb4hC8Xd/CD4qNtJ66X+Xfz9n/I
uvnncRv5ubYP4mdWsJsr9Q3x0/5K3KorxE+b60LtsW5+bvrCjevzM3a4bb8c
rpX5beZKnZB4POxbilvl858x/ZD5+PqF5ZuSB3m88g8OErfq++Kr0f//Z7hV
/yA+G++P92Z+pLmUx4oPdmLeV/15XPGv7Jj3D+fNfDfe3515b+aD1fEjF606
/oL3y3s1n8zcPfPJZtX732PdhrQDvz/em/ljvH/e+2K+IfzQoT7Di/L+eG/m
j6E/Sd7JrdIP5f3CKXuT+GTnhPtJv/sH9b9bxNUzn/QB4U6+LdzJxyg/i3iq
q8Ilu1x8z0b82gr214iLdoP4n7eIa7aT+KPki3wz3DTzR+GSvSRcsgvEDx07
P+H9/WS4Z/YPKD5mxfEx5p6ZD8r7+9dwzz6m8Z36p97fJv7nGB+R9wNH7krx
4/4w9U+9v1d8urH4JXNfza/j/fHezKcbO9/i/fHezJfj/eyb9/KT4tOZy3qj
+HNrjS9E59B8OsZFOK77i99KvhqcVfNVXydu5ZvFV328uJPmu87XA7++7qP5
nP98TBm/eBL2l/Yf/JG4k+a3Eh9PXoXPH8y19Pi3Iu6k+a3/lLz0P0v89Xrx
Wet4qaWl5yt+jPqj3sz/pP4z/0w3F9/zo1X9HbORn13/n0u9m/9JuWrOVD+/
jemnvSb1n7j1qfmf1G/Nee3Hf/L6L069OT8F7iccUPM/G/GzS9jPFLfO/Lrf
Ce/sDxr8xfXh2p0Zzt0V4tsV7mC4cA9Rfjc8vTvE2cNOfuw5Df3uTtw18+/g
Zu0Z7pr5eXDRGIcuFx/m3HDX4OAdJf6duWven6+K+2f+5GGq10PFlzN/8WuH
1/xF6pdzuoeKv7dBXMBTxKdLQ2jqn5s7uKf4dXDp4NT9ivh0cAcvS716/BjT
nzKX8wbxOef7w2dsnO+zXryOn7HDpfxSuJTmg9bxtTcum++5X7h4cDzvFL/T
XDzzP+EvPifcus3E93R8hvmd1M9vhIv3BOl3PzrPR7/9gvib1Mdpqic/HxxA
8//WGv/Pc5sPOBY/84bUz1apl33E9+P50S1/gfiA9JtN4ZZuEr8U7ugF0bd5
kvyXLwyXEs7ovx9c80XH4rfhjp4SbqTz562/Zr4oz3deuJTuHwemfJTrDeJn
8nw81wXS/2rkZyy5fC39zOfn+Z6S5zpdfMyiD55ynye+JtzFcH6n5i+ai+j4
7LH8kcvFPVzMX3xMB8dxg/iNY3xGcx3NVxyLv6d++F7zF/net4freJ3007D/
fX7/dvEffy76BXAYN2vwF48Od9Hx6Rp/uz8Un9G6yG7fi/Pe+/czZqfeOF9x
fs2Y3brBzn8dszfKt7JWu3XBnP87ZndctvkUtb7H0C79oyY/UvkVa7Zzf87F
fD5mXV/7V8fsG6p1x92zs6X/u0nnot7fXB878TWOH6u5Og8d6CPjz8e//+fV
friPT+P3p8pu3V+Pn2N260pbH3jMTtxL4mCIh5ms1c6+BT+c9ZGtm3yC7GdI
d9v622P2A+v4/an3VwdKd9rxp8TboA9r/Wn7Xe1/HbNfIl1u63MrL7elb955
HMKO/2+EP9u8Pt+71NIfcd5wK39xRP+98zjxw7//3GVff+29ut7lb5evfp6h
vv5Y+bl+hF/SvB4uw4i++aylb57zm0lLP55xbUT/vWvpvzNetvTvGY9G9Mu7
ln45/t8R/fyupZ/P34/ou3cj+u7TEX33rhVfxHg4whfoWnyB9dKtbujrT0f0
9acj+vpdS18ff0NLP9660Q3+QNfiD4xdv9b1Hb9Z3P/6vE6vLzfW3J0V5yes
dXxTwVbunb2Ub8Xla+g/lvYrXYgV883G5g/df6XFR+f7W+Nbq35Uv0uuX5/b
e3zbXOc+5vttLr9B/Aml/Nso7svrO+4/nydPKZxG7P8cv/6c4/ip1fBiu7Xe
n3z7+v7/Sd9L+2a3/y20L32L9ldH13E34Qj29avyL7v8Y/WvuO6VP1f5D5Df
1+srlX/F5SeudF6+q5bn/O3v6f3ct3y/3+/Y9/vc33wBff+qv3/s/ViXw/fX
+1ny+5l/XrFMP3H/uHZkfYZ+df3Z9z+4Y8m/nTn/9scdvw6P3lO9/+z5X8S/
wafcIeXALv7jzOPPYZXu9lYD/8A10qVcvL9FX/PO2eL1Ybv+4ZnDN4++VrHX
um3XDvaf8JITvzTYH9W6ZLfPblb7uz56SvX+sa+/X4heEvmr1r+rdcn+fRZ9
slJ+c+3XKz75hOht1fvfvv38s7j30WEq9l3FpXf/eGP0sOB7Ryer2NHN2zn8
Zq8f0PNChzs6X6V+r4yeV+0f6Mf3X6l03eBw9P67U6LnVO8Pe/28WtfujoF/
Ab2tZ4RvHf28YkcvrN4f9+PXVdH7wn92os7n0FOD/x2dtWKvdf3unHn8ekWl
q/etmde/6KkdET76kZo/5p9t/xn7T/T773PP7zetyh6+8s7o+Dfu33OEFtuH
fI/5Z7fMOmmj1kd8/0j5Vn+88hV97oF/qy7v0kpj/7rSNcan3H917P7M8x6f
sDPP7qX5tbY/tnC4bGcd5PFp/nnjcvzzXaP9LI3dn3nY7Xf+ef0q8+znFs6v
P3r55vznK5dflXXQe7X+mdtvW94665w/0/qmrv/poH/PP7tV1iEe/9f2/rrV
LRrvL+VfHSn/6o9X/nOXyWu7SeWn/l6RddIJGv/X9n43LRNf7vUTz9e6f+Kn
Z+KvFjv96bJ8/tUP5VvDx+ifz1wN63ON7e8Yl/he92/xrzvzr3erzk0Kx6TY
pf8/GJ+tK9HYP+vckX/9/Xdv3J/8Z/KP3X7/WHnlzn9PPuuUc1D333OTb5w4
5G5v5Zf/sfLqnb9+gHQB7lD++FnJByY/+KeVv0++LeXaX/nXxydf+5Dkbzt/
PboG3ZHJ7/2+9A3IhyY/ejvl75NPTr/cSfnF/Iwf0foF1lU4Uvnvxyvv3voI
ByafmO/x+HBu8rEfnnJbvyC6CRPyu62fgN+O9+Lx4VbpLhwi/YKx87noV0+l
X13KH33umfS5PT4X//J8PDpT/MPbZ9L/b16/VP0r+5fZJ6p9TP/89DvxiYr9
E9W+Z3g9+5pLs8/x/mbMfxP9au2D+v4d/eWZ9JfL80e/diL96nI9etvSly7X
R791Jv3lUr7oS0+kL13eb/SjZ9KPLtdHv3cm/e2+/rJvkn55vz/LvkX63+V6
nkf65cVOe5c+df/92bdIn7o8X/S3Z9LfLuUjH1766KX+ox88k/73rC7/ZybS
R3f8yVT616V80U+fSj+92NnXSP+9b39Zr0jfvKvvf+dM+ubFHv3omfTfi519
kfTHi13jR2f9e83rU/cfc7c8PuCvMUce+1L+sc7w/kTnTwM+B/4Wxg2vHxgv
0Qf/4f7fiwbnW6xPdqvGVf4V/Zcu+i+D8YP5Gv0Zrw9yft5F32VwfsXfo6/j
+R89HvR5rE/Dz+jXWL/npdJl8fyOngzzvPWLrNti/RrGh+gbDfRdrDtj/Rrr
qgz0f6Rb4vm9Pv95Tmf9G/p/zp86ry+i79RF32lw/hT9mY51gOf/6B/Non/U
ef1AfUXfaXB+tJl0baxvtFb/J58NfvC01rnq80t3r8aH3bqnqn/KPn2qzp9r
riccru8N7p/5f8AnU/kb6/vCLe3sH9H5eDM+C/6e+29t/2Lh+WFH/xE+XXRO
GvffbrD+xw5/78vR+/f94XreovwnlZ88zcH9o/8xO03549ivTxy9zzeww5/7
qOK/oxcz/ZfwD78Ynl3D3sXeqp+pz2ewvzh8xtukf1OXf4cSp7jYfv8pvETs
zH8fDh/yOeH9NezT2Mv9f6muv4F/QfU3Re+/0X6mU+mL6PkG+wc9X4eftNF+
Onix2NUvBvG5nEe04lMYLy6rP8v3o5+a85OyH8E+/2z7H+u4kiG/ayz+ZOz5
xq6v84b6PGjsdfzWN8hXKOV7dPR8aNfu/847dH5THRdyn2k+m+U7TeW7UXkj
zt8l7pV+7/ZLftQnK85Er4/xgE89ctvtfnvL7pG7Pvvauw/6iWk+u7U+31j9
OO7Z7f/Ah232b694/Hcnj/r5u17wgmf82+SR88/+fDX6BSdUHJevr/n5v6P6
e63qb+z9j5V/7P2OxcfW/afElxX/P/M68+zfaX4/VFzhWs9/wM8c8P8U93yv
+x/7C5Wv94+Ji+v+9yFxYffS/Hu+uLCna/4+T1xftz+4uZTvc5p/zc39iubv
68Wd9fx6W+bN+v79/HmuuLSe3+HGMs7fovn1fHGHT9f8f5a4sp7frxf31/Or
ucp7af48T1xgz+/niau7l+ZXc5mtf3eduLvWH7hOXFz37w+JS7yX5t+zxCX+
qObv68X1df9m3q3fTz//Xidu8wmav+HrMY/uoPmT/lr3277/L7bzb2gnnh37
2PzPfp11gM8fxubXK6Xr7/79z9HTRqc6+jDl+R8pXfv3zvW6i/3k6KXvn/g8
9++XRW+c+MODlF+H7sGB0S+/cK5nXsq/Z/S60a1Brxw7euvwL+ENYD84euBP
Rld/rhdeyvdS6d7vpPy2vcVNeM5cD75cb1388AHK9TuaWxC9cuwPEhdif+m3
XSSuAXrm2DdFj1w6bqq/b06+H3386MiX8qN3/tbon18410Mv9lOjN44ujfv3
NtFzr3V0+/xYcxXeONeLL/ffNXrp6Ke7f58l7kTqodjNnYievvtHyV/5hPqH
/N7Txfzadnwlum5X/oj5LYxbhzb2z8enXZ5Qr0NL+2FdRHzw4VofvT3t4iey
DrT/y/orx2l9ZP2OL2p9+T+ybrso67jXaf3GuvZ/ZJ17nda3j8i6lnXuo7S+
tX7du/X8zPfHZJ3p+OOsV8s69qe1fv1Knu/beb6b9XzwCdHpeovWtw3921ld
vkF+Yf9+yQ9M+e3/cn62328jf33w/W9vfD/r4tMb739s/uL3uzfmv5ofee/7
B/Me/eIvNf+dI66G+4e5Eu/T/MW899nMg57/zAXx+zV3w/MX+vUHZx58geY/
5iXmKc9PzDvwe35V888GcS08PzIvRfcrnI9+fir5s5lHX6T5k/73ssyTj9f8
yLx0ceYpz08/yLwT/Tl48KX8DzdXRPMj89J3Mk9dovmJ9s08+tyG/inz5LWa
H4suW+Y5ny/dJa7JmzR/7ZN57wGZB6/U/PdVcUHc/5i3mMfO1Px1qbgvnv8W
rz87rS+Jex2e747F/zPfJf42+9m+fsl/2Sl5wIv17e6Y1Oubfv8DD/yyav3Z
t49Hh9e+KZxxry/hndfrv51K+Y4N//yT4ZjP4xH682vut6nmgOv5HtNxn/n9
ty/2w8Mjr9en/fh7Z3jfZ9ec9XL986Ifk7gNePTFDk/8zPDFfb4UnrjWh70+
RMpX6tnjG/PqgeHDm+/OupLfz9eXXyzX/7d5+aMDdt+p40/Qb0IHMM/h95fv
32mwvvyl8OTr9W0fv0a58l6n83zcG4r9nVV+178OzneJB6vX//35HO8T/pLX
98RdXNWIH98t/YZz28PVf+af7fjYx6dfEf/r/sX8lfY1GF/pd3B43f+uS7+6
X/qZ14fXpN/QLw5S/2H+CLcejn2x0y8OSD9x/0CPBx2lD6r9X5d+eXLK5f75
vvSLB6SfPFr94w35e+KjD1L/PSvloZ+6f+bvS7t0/0h5pyn/5GFq//TLr6ef
un8mXmxKPzlb/SPli+713w36L+V5Z/rHNeqfGQ+n9DOvL1+YfpPxbXqj+g/z
527ph9eq/z03/QqOpvtX2mOpZ68/Tq3W99t27n/XVvuy4fqQdeWVDf+HuUoN
e3T77j9cn4or1bB31/J3sm8Z3lI+B/Pv+ugN53OYfwLPKfex/YKR8qN3fXG+
p1U/FzTqpwvvKp+D+6OLl8/W9R33adXfNY36g5uwd76n9X6ubbwf6zo36mdy
caP+zW1o2Lu9G8/PeRz5TY7Pyboa/8og/jX+F8Vv9uvvj1S6vffDD1Xs8/yg
B07h8Hn99IRwDer41n78jX+owy8UTl6xh+fXoZPh+Nbsa+D04Ycr9hvn+67J
asY1jw/Z17Cv6Br+yRl+yfgpy/XxP3XhFM7CKSz2rKtZP3Vef2Zfw75q6vkh
XNMOnQjH18b/17GviR+w2LNvLH7P7CeLPfuC4tfKfqHY4//M+uepg/O1+H8V
39vHt2RfOXl29pXZbxb7nJu6WfFLenyP/7eso+2/jP9xln3MLH7IYg//sAt/
tLW+6Wjnbt91/ODT4CQWO/zX8FMH+krhP85o527fPG/2b+Ew/af8+7TH8GEH
60P8DfE/DNonPI3waQfxW+HToivf3aX2S78K9xIOZrHDx6UfrVf/ib98Sjs2
fyp80Y526vZJf6Afrar/sJ+lHbv9wscNv3ew/gp/dBL/QOf+k/OELvzjwf4d
fwnt3O371Co+ddvO/QNuSrixA/804wXt/C61b9pb/EcT81nG9Imsz3GG7NbF
9/WXSBffduvK2z4Wn9FJd972D0s3fhDfIf+u7Vx3Qe5j+1h++u3hMdXxZcP8
tlb+lHXzbef8m+/x++E69H1tf7a4AoP7iyvg668TV2GxPsKD0e8e3B89S/Qt
H6L9y4vE1WnpI9T138d3574z9Lejx639C+3m2nAMev3RW6SbGT3Ncv2vRq8x
5RjwD94vLkd4HeX6sf3BC6SLHL3eUj7Os+vn5t94/h1crL3DxQovq9jR/UQf
c9+5Xmax//foUbIu9Px/6Mj5ELqw6OdeMteL7etHuqIe/9DF3yO6+O+b6+X7
+ulhaUeef9EDp528Wu0jFVnyS823K3qqj5q3k0epffDe4bP8/uL3X3RB/f7P
SLus+VbfUP96bEc7dPvbW9w9v9/PS/fZ7cu6qPvo/VMfdVxj3/7G9E8y/3S0
I7cf9IJpJxerfYzFZ9FuLkg7cvuBp5D753ynbz9j+nvWl7J9TH/l1vDU0DVY
nP/bzg9+RHhc+O1s57635HtsJ+/y4bmP7fX8/NjB/cfi+2birtn+tvDIOIdr
8d9a55tcd1ruY/vvievm+5vr5uufH14d+wpfz+8PyN/ZDpfiH/M596//p/zN
8AIeH37A58S3hTe1vuKa8e/rk++IC4Efsm4/t6yis/MK5Q/tLe5VeFjFbq5D
eAPFPhb/aa7pz855kcX+Z+E94J8PD2KK/bfDQzg/fASPb3Apjw6X8jlzXmUp
35h/5mvhHeAnHexfw5OAL+H8KHMzPL68fiS+4dxwaZ4aLs2Rc15NsUfXuvv3
vOet9H55b7xHv7+fT7s6M+3M7etZea+8Z7/f9Qu5Z337+7y4Es5Pe2Te60l5
z/fX++W9bZn3+Gy9P8d/3Kr2Neb//KK4pG5/tKuD087cvmr/+Z6D9kG7+Hja
yd+pfdAuHph24vaRdUv3gbSDl+v9j8UPW7/V/L8ueuC35NN8K+t2m++WvMbZ
duHC7T+PQynXk2+4saFPuJjL0ecv3Rhe6tz+wJJHg/1DVfzu99D7LvbvwQO+
as5lnfOG+vgo9MJ/4pC5fvhvzvXEe/+LdMf9fuEJPLQ6J+qfDz7BFxP/4vjx
+We3uk1DPyLXz54WbtOn5zynYt9c3MYDVP9vlL7kcdKXjG7HjM/wOosd3t4R
4e+Fx1fs8ApPD7/w6jnPsPQfc7Ud/0veTM7x4WmW+v2ouMfhIZf6gycIX3B7
5bdvHt4f6wC/v4PDS9wv/ETry+OXX2343+OvKn7Ee6vvAo/yueFTnjnnVRb7
qD5y+jP5g+9U/941/faE9ONnq/9+Pbxi+on7x2KuS98/t0y/eWP60QvVf05K
v70q/fhs9V90+cNJ7g5X/625L88avL+x/JbkX062TT99nvqn9PFWBvlV6Xf0
w5vV/45Mv/iX9JPfVP9Adz776/gv+/NDeDTwacKrKeX/cLg2b0le+PXih47p
E8J9Pizc58N0vv/u6PZfGN3+y+Z6/sU+lh8DF+aK5A2EF9NfH+7JXuGefGDO
Qyn2k6PXX+ev/af5PfkWte4a/xjf/2X21XDjwgPsn39EH/wpaX9wWT3+fCrj
Dvz1b2n8OSPj3l9nHLxG4x+83D0yTrX0NxgnPT7CLd0y45jrf+z80FxYj2+/
nHHrooxjrn9zc8/S+DSmD/m/0m7PSTu+Wu0XHvnptFO1T3ObXqv+AW+Cdny5
2i/lop+Y72D+g+sXXg/t+INqvx8Vt8ftn/wO2rnrF97hXWnHbr+1Pj95R/zr
9esvaejXm8tmPtXrw9uCv5U46HL9zpk/br3Hf7zf9FEL+Wdt/eYUtKm/db/w
yLL/nSberHw/PLP/Hb4ZekvYzV1z/cLbZH8dHmtpP7fnuVjf7qTn+13pWx8u
feu5Pu53oqP6nZyf9PFLZ/za+5Yu2ud+093u/9Mf+dXptyZnPPTgSx5wU88n
XffZf/xfr7t0r+KfaeiTre4RfTLru778BVs98xf/232m06MvOvDkHb49+eJn
XvKz73p077+br5/vmv2CztGxb/Pd12753XOeEf/pwwZ8nf1G4ifG+AgbRvTD
Hyfu22vU/qSPu+L6MffutWofN4h793y1L3PlXD/4Z96VdrSt2g/v9fS853fq
/cL14fOgOe+n2F8Z3g26N36+sxdy3fj39cItg+8W3pv9Y838U/hS5M19aM5z
LfYHi/u6+ZwHW+xnqF+4f+A/pJ37+Z6Rdks7dvtFV5Antr7gLmnX16edD/gV
abf7NuJjjkq7f2D6gdu/uUQuv7l6rv/F3Lj+/fFe3tnIf/id1DvvYQvVP3oG
dTvu398YP6SOr33qwP6n4emGez4Yn+Du8ne2c/7B51/PeYqlfpbFHRzRpx7o
X39D3OTwlPX+vjV5Wr7H9+e6r+c+79X1fC/cZX//GB+Fn/du8AHgjX87n46f
tu5bKz7eOvZrvX51/T3/VuF7kO+11vsv6Z/z050309KfkU7Lmq8f+35+3r1x
/7Vd7+fvln+4/VzxadrlH7Ob+2S+J/EXnLsTr2H7uxSngd3cJ7dvdLP5dP5k
0X/L57Wys986Tn4o7Pgz4P/9rfh/Y9fbr2n/pP0ml+j+XH9K43pzmbx+9rrH
68ex61mvXyJOCvYTdf+f1/25bkPjenOffD7NeH2C5oH6+x8zbfFH4aPwuVqd
Q/XjX60T1vNFx+yLdbH5Z77AcHybf25CP3ugD0W8Kzp19h+SF1Hrz/brj0b5
VtZa/sMq/kDRqZ3WdvgC35vN/RW3l++v+QR3lzje+vpeV9P5G1dXujrk+ff5
xWP1x/X1+NVfP4su5/rocq5GrxM7fIF6/3p9aZ8vky6n9bfQ5WRdeHP0OrHD
F+D8YOB/rvgEnN/39Wddzr9XfvDJ0b3M/Qfnv5dWfIJ/m61X/6j5AtsO1g9f
lq6n9TnQ5aT/wRnA/kbpfr4qeqDYr6r4AncM4s/uqvgEnxvob50WXcz4J4f+
E+l6ev66Obqcy9HlXI5eJ/b3RfeT+Q9OQV3+vTr8o/Z/vr7iEzxmsD+1Lqf1
gQ6WbiZ6mti3li6n9bd+Q7qcR0avEzu6ly196vyPdPV7e2N9toJ9MRdk7ePT
2uzt8qMbWuuC+fu/N6l1C2xvrz9/3Ov5+1b9jtUfcV+t+LrFcZu9nfinOu5p
7fdfHPfT2xdzAfr7L/Y7r/3++FXrftfbF+vi39vyWTd/7eUfq/+x8i/2W/b2
sfe3mIvQ249ZuK9c+/f/uPcfez9j9c/P9C/zdTeKS9DgA8xafAD2bay7rO/b
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
c2vq9tDzTaj/Byu/ZCy+mvfN+3f7hi/zpYw/R2Y8wk5cJPMD4xn2hr5qeT/E
P1zbiE8wd+mTGc+wHyXuEhwa7OjtUz6v/8L/nf5NuCrf1PnnmP7rsrgocFiw
w1eBqwIvBTvl4vMgxUe9KVwY7HBksF8nrgwcGezmunwt5cG+QdyYp+Z5sFsf
7ijpw+07wm/5lrgs/Kz2Wa7bR/nJDX25cn/0165u8AvQl0Mn1/q4yb9PXDC6
cf37dVy+5+fG9SvY+b6s30p5sPM86G5aH5f4fvJkrN/L9x5a6fQO8mNL3pvj
n+vnuWjZz4f+5rwcO5c8HV+v/D69n6K7O7X+Lvp1f5Tx3fq5cFmYZ62/i67u
X0a3zvwf7pf7D/Rzz6jOFbabWj/uufn5k9GdO1Xjp3XtjpA+Lvpp4csO+od1
9ayfu3+lj/fSjftGJw87z5vnL/WB/ezU188lPsjxKy+Vrp31c38m1/1GdOlO
0PjJ86Kze5f0dcOPnX0wunjW93189Pfmn6/P54vL81m37qHS591Mungvkf4u
42Z09YrOXnn+/D3+fevvWvfuq9LvbehXlvI19CEH/aeV/9PQjyzXN/grOp/q
db2fpOsb+uLT+vt37mr+U6/f2dDP1PVt/c2Gvmezfqy/2dBHLt/f0C8t9oZ+
ZrE39BuLvaHfWcrf0Mf0+Zr1Lcv9G/qV5f4Nfc9ib+hX9ucXi/Udy/UNfdBJ
/f3ryrjEOIW9oR9arm/om5bvb+iHlvpp6F+W6x9XjS8vXsc4g72hj1nu39DH
LOVv6H+W72/oe5b7N/Q9B+sj6ZuW61l/s07YXfP7Uv5JZ28Ju3UpL5N+tvIL
M//fPnb/FezbV1yluyfmK42VL+ub6aEV56kfX1iPoNtpfgL9/xMVp6n3P409
/4bofl4a3c8N4i85L9P3Z18Lp+ki8Zlulu7nZ8RfYv2D7ue7oxOC/ZT4p+E0
nVydI5Kf3Ot+Xif+EuPPtdH9PEPno+TnPaHiLPXrF7hJb6w4Sv3+At3NU6O7
6f3nq6MbCmfp1eIrofs5qzhQfXwQuqKfrzhP3l88cQpnyfnPvxzdTjhKzxA/
KVy7yZUV56lfP50T3dD3Rjf0HPGVvizdzzsUH7Q++384Txvk3zkx/vePR5fT
/G3rfr5F/CWedyW6n/jhsHOednh0OTeIz/Ry6X6+XPwl2sMDK47TsH+JX7RU
vn/Ozwy/4Pzl3Rf2b8a128s4hH17cdt20PpnSf8Wr092Ft+yj58bu97ctsX5
2TuWcWmxvjC6wt+eWV94rP7Gvt9cN+sLX1zxE68v4xR24k7fnnHnpdIfvi7j
C/oH1hc+PeMTcUS7SD+45l/eMdAfRhcYneA3Sh8YvwTx/U+Q/i/jy2syrvyJ
9IlPy/hU669sXq43N+7z0i8mvgtuo/WJGV/QCb5Z+sCMT/TT06T/y/jCuPIe
6ROn3ibEd18lfWDGl0szrvyK9IvRJf5WxqW7pU/8lowvjCvWFz4p49OfZVy6
RvrBPNdJGXdWpD/M+MK4Yn1hxifGpd+XfnDtP7pzZv3hxdwP/o37f6TfPbWd
/2utX55cr8smP9r15kKt/f5j1691fFla+K/oh4s70tsXczd6O+ubOq6+Xz+O
3X8xN8X3v3u2eRW32d9/Mddj7fdffK7a2xdzOe5t+e7T3a+Km1l7+cfqf6z8
i7klLn/7/dH/n1+dy7n85o6s/ft/3PuPvZ+x+t+ofmP/if0v9TjT91+ur/vx
1yfvP+uef/GXXLTq9dGS/i1e37TvL7/TSos/x/WL94f9uPKUxv7L5cTuvAjz
eU6r8iMuWnZ+yanVevz6ZefnHKG4XOcHRO9g8h/RGxcesX7V96/3K0tLmyv+
e+z+6A9x/80U3+K4BvN7aj2Ji5aPUfyG437uZ75PXf4Vl3+s/h33Zv6Rz/Uc
33BKVf6lFfOR6v3Y9cvP0/m93u+q3+/Y99P/U//LR+v8St+/6u8fez8+FzQ/
Se9nxe8Hfya6UNaHqv3GQ31h9DWy/5lYH3mjdFdb+uzWacY+/9y0+ouN8kUf
ZxkdR+s74ldmH/R30lce008es5NXfX10F61PZV1H6yefWq2bt51af/mFOY99
aXQXzV/6iHQdrZ9M/0te8cx8dvLnXxLdROdfkpeODrL1j8mfRqfZ/gHrQlof
GV3H5KWTp97vn5Ofnrx08tT795P8/Kujm3hG1d/7/H50kK1/TH5H8rIH8SXk
d6OTfJf0kclPT1761PrNeb7pR6Ib6fwm8okeGN1F+1dXkv9PHuNd0k9m/Iiu
AToHxX65dBdXpU91ZvLz0VG2frLitrqvSn9Z+jrTHcQ38bjR0l/0OIDdXAeP
D+KnDvq/+IrTJzbGN+u4Ypf+8sTnQ2PXS/9han1X6T9Mb5F+q/QHpldJ/1X6
DFPru0qfYXq49FulPzA9Tfqv1j3/iPRZpb8xe6n0V6W/MN1X+rDSX+heJ31W
6VNMXyL9WOlboGdUrpe+x/S70meVvsdkk/RXpe8w3VP6sNJ3mG4tfVbpU0wv
kn6s9C2mD5c+rHXTre9qXfYHSb9V+idlnMBu3XTru1qX3fqt1mW3/mvNdS2c
o4F/tHV+w/7l0FpHvZR/bH9xdeWXRCd26B/93dz/qT/Uv9rmL3yi/iz2w6Tr
cLjyn9m/Ej/1bs2/X0ne3LeTN3ez8nfJOzu9irMfzv+/kLxJz4/H53vRJT1B
8/cjogsL5+hR4hsdn/Jz/un1wyelS3ud+Efz9fmu6+bl2n/d/Ppdy/modVGd
30D7e3sdJ1rK9xbpwr5F/COu+4nUz6mqn/CQZnCSflp8pFuU1/hFvR/0a+ef
r9w474/PK/El/yPPd1Ge73V6PtrP6Y32Q7sh78D6hM6LdvtwXKbrj/muPp/o
9ZGX6n8DfoLPBdx/xvyH6l9T6/sRdyF+U7fW66lf6tXx+cRfRL941tB37qLP
O3X+ZvSHJ9Efnll/mHov5xPKb4YrRr+zPjP9jn5rfWH6X85HJtaHjn51/BDD
53NekfWJT03/pd/Sj7FHn3kWfeaJ9Zk5N6HdWb84+tAz+p31ofn7nJ9MrJ9N
/6PfRT+6jC/03+hrz5yfPNY+qJ/kH06sr12fPzymsz72WPtx3LvPr801a8yP
2mcP4jd0/tjzyZi/tX/v6uv78eHwRv9T+Yr9lJzrYbd+jrkm5o+xPt69ur6P
f/6KuCPmk5F/+KTYvyz+GPXN/c9Xfp65IeaLfTZckifG/iXxw/L8Mz2/yrd7
eT/mi6GPqud3+yvv5wbxzYi/5/vNF4NLsntV/318/VfEFTHfbJ24KB8SX4xx
T/U7rct3n/L95ptdLu6I+WTrxDU5T/wx+qfqR9/fc0ecf2quyZfFH6P/qvzF
zn615gwN+y/9tsUPOqyxPqb/ij9S7OYK2j5N/zs3/c52cwUX23uuoO3m/tlu
rqDt9E/6pe3m9tluLqDt6b/020H5zCW0nf73j+l3jfop3ELb4fZ9MP3OdnMB
bYdLRL9r1G/hEi6+/32SF7rD4P70X/qt7fQ/+l2j/gtHqFF/09TfwE7/o981
6qdwBRvP1+X5Bnbihet5cshPaJ1vk1dPHNH8fKrnIyh+bxA/E33sGedEXp/P
4p84q9Lv7/2jzI/kBZqvEH3vLrrenfd/0QfvoqPf3Sg+Av1vt+i+Xyu+gnXV
rf9t3fazxTc4KLrr+IesP2/d+IdJP4K/R//nGvEZ0H8/Orry1g+KfvyMuEbr
o78vuu0PiG77o6WPhX/vgOiuW5//IdKN/6D4B7zXO6P7bv/xG6Qrf5D4C9Hn
n90vuuze314j3feDxEeg/0W3P3kMvf8qfIGSn9Y6Pzg79TyT/5n+BwfefIW6
/9wuDlB//kv83lMb57+t+NvVSlf8flO/H/pfvT/p2xf9K/r0JQ/X/Sf6+hO3
X/of/e5o8RHIf6Vf7SK+Av0n/ICJ+QfF/5/6/5r4BuEXdOEXTMxfgHsQfsGA
f3CWuCVHic/A89Lv3qH9S/gNM3TlzD+4TtyRU9R+t6/ye+47NX+B/kc/Okj8
A/oPnAbzGc4SF+Xr4i/Qf+g3Hh/of+xPtxQfoc4P2qn0M+zwBML3mHj8pP+d
Vu3f+/yeOq/iXwfx1eTviE9f7NfK72n/yePhqkZX2/4DdLvRNb1cfIQ6vvwX
p9wP+1elq+34b7gI4a51l4iPwPwUv/70WvEVNkgX2/yDu6S7/SbxDeAuwGEw
f8G63+8T/yD8te4B0e2+UvqC1Fe4fhPzFx5uXWzxD9DdhnNwpvgGjA9wGMxf
sO63+QeXSrfbfAby9w6OLvgLlF98jnS1Hd8OFyHnx+U8yf0nXL/pi8RXsK62
/Sc/iG53uH/MT4P4znD3CocP+1h8AO1ffMNip72Lz1fuH77hRHzDcj3tX/zB
Qf8Rn69cf0Y1vxT+YLHT/sUXHPQf8RnL9bR/xUEM+o/4kFo/9tyRz0ofn/4j
fmEp3y3ielh/Hl158RnL9S8U98P69+FDduJDluvDz+zEz1T9wTUr5/Tl/rR/
xVGU5w8ftBMftNy/nl8K/7J/v2n/4l+W90N7Fx90sH4Tn7Lc37rJ1pdmPjkv
v7e+snUlB/wQ6c5af9Lcjtb9z2uUz9yLVekHyj6zfhH2+4Yrcl/xSWSf3Ff8
kbU+X9HhbdQPuhb7SV9H9qn1Lz4e+yxckZn4JLKXv7u39TNWv63yjT2fuQg3
iI/A+Q6cVM8/Y/Hffxjd8tx39l7xEVi//3Z0y81XQF/3OdEN30x8BLdP8w/+
Nrri6Ke+M/4o7H8g3XPzEeb7l2fk/PXF6/JzOR9BF/1L0UU3n6GO37xx2XyE
/aJbDifhTvERiD+Mn3Fq/tzroov+gOii7yN+wuOle25+w3x8/vWN889j8vnr
5XyK851DG+c7q9I9N1+B8fU3onv+BK1f/yq65nAWzFewrrn5DGP8hdeIy3GD
9PPH4peZ/2mXB0tff2x8fkPa3VZpt/tI//4PxOU4W/r7cENOTru1vu+j0/7Q
xfmC9Plpv6el3dKO3f7Q0bd+/lh+wrFpf7+Wdmd9/vlnt4xfYJ308y+v2t+v
r7s87dDt93Npt9bvX5/2d2ba3RXS33d8yaGKD6B9ss58gfT5/0rcjyukv29u
iPX32b/B9TD/w1wQ8z8Yfy8Md8P8Duz8/kLxORw/c4r8TyfFTnya96dcX3Ns
+uc3d8Ttk+svq+K7+v7Nuuziav/b++/wH30lXI5zdf6J/UP5/VfE72jkvyzZ
zm8cv8794Xp4/cP19H/zP3g/0YWamv/B/bfI768X/+OccBnQvfsH6d8xf35C
nAfsyn9Ycf6DddXNVyA+dOfool+q/G503feJrrv5C7dIl30n8SHwx30zuu/m
PzBvvyS65xeIvzC2vtspuujc5yvK735WdN3vH133o8RfcPyS+RAPiO7726L7
/hj5t8nPuSq665eLz0B/+9forn9M7Z/4pNc24h/QZf9gdNnNZ2B8+snosnt9
OMZvMHfjRunvj+Xf/ay4HPtK/5/4ZPJzrb9vLoj5ALQv2pX1/8f2B7QL2pX1
9dH9p13cX/r/P5P29aW0K49/tA/axdvEB6B93dqIr6H9oON/pfT7aT/ZZw/0
+18ubscHpd/v+LdjG/FvcA9/Uvr++KsfFq7GbjpfoH1xDrij+Btcf3O4G6vi
g3A9vzefo5GfuWQ7v3F+VYkvC1fjavmnsPP7UxfzN5rxo2Pxa9hpN534Idj5
vdsX/fbocDt8Pmfux9Hie5T49nA79pP/zvy9/cT3+Ln419F530z67sdGz/qP
G/wGdN9fHh14678Tt31KdMkdH1V056VDX7ffQf7tCnbrYlv//TDpblv/fUW6
2dan51z+4uhyvzX5+NjRvc441F0ufRR0tdGJ/xXpwxdd0sTNOb9oPr5+YfWm
xJEcr/OPF0VXG51468OX+OHoal+n+B7r9r9SfI0VvfdjpW8+xm94ft7/U/Le
T5c+/eXS7be++Vh+pHX9ra/+T3l/f5b3tl766uimo6Nu/fRz8/54b0dJHx1u
wGV579Z3ZXznXPEPFR95kHT9vy99dPQhOfe6VfrnvN+/z3t9u/TTjw8XZTlc
lD3FR4n+ziw6jFN0QrDD3dgq3I2fEp9le+mmf0H8k0b++wr2b0u3/dPio1wj
3fXTxGexrvseyo+gXx4S3fT9xVexf878FOuyf1Lzy1j+6vuly36A+Cm8vw1V
fs83B/VPvZt/Yu7O/sqve5i4NNa3p/6p9yukny9uzpL17eHiPD31bn39q/L+
eG/Wzx/zn/L+eG+HSP+e94OOvvXzqX/q3fr4a9Un4L14fmZc3BSuzSbxbeDK
XJD4vSepfb4wXA04M/9+cM2XgZfxmXAx5v7P/vzqwHA77gq346tX1vwZnqTm
kPb7y8KlCRfjIYov+iPFf3+tEf99XrgbHv/m5y57bJzHobxw4zyPbY/ivzJ3
w3yasfz7A1N/1NsbxCeh/qn3CxTffFDq747U2/fFP7kwf/8XqffPik9CuWod
92F+QSu/h/qPH3/yUPFJyvlv6vU88U2ov19OvZlfMqvqf491G/IeXL/S31jC
jq5+OGxT6+ujx/47Df4DXAd0+M+Q/v4fSbfe/APi+swBwE5+/DnRbbd+/wbp
wp8ifX7eFzr/G6Tvb932ExKPin3L6MKTl2p9/rH8I+qHetlN/IvDVK+HSv+e
+jlR9YT9Nanf6IZNzQfoxC2wfj4tgXq1Pj7tk3qzvv6W4hY4f5f6pV49fozl
h8AFCccEnkmpP3MPLha/hLzhr4WLsaf2JzdJ/2JP6V98Ibr9r4huv/kh1M+z
otv/dO2ved4HRVf/KPFFxs7/qJ9PRbd/F8U/7JLnW85z3Sn+x0WpDz5/VnyI
L4iL8nLxCdaqH7RHnvtZ4heMnX8y/7869fIQ8Qd4fp77n8QvoN/AUdlf/BTi
6eCgmH/yOnEx3iy+Se1vX1p6vvRNthPXwvyT+fWHJH/rkORvHTcYn+FmuH9Q
PsplfgfPF87GdHPxORr6Tkv19x+S/M7j8nlImb93zPPB8TC/w1wX8z/OFBfC
fAhzG3y+MaY/BZfhznAZFvMh7tPtGS6D+RLavxFnMvX9ue83xH+o9WsuWrU+
jrkWe4oPwff/z3An/kF8CuxwKt4kPsWjxYVo8SHQR3D8IT+fqL/D3ogPK9cr
vnJgH7t+zL5Y16/fXy7Ou+/tta5FyU9wfMb0Ew278pI6+7fG7Btr3YCZ9b8o
L3nET1Z8+JideFf4pNtJP7/Bz56s1X5A8l1PSB7sCdLHJa+ePF8+sTf4zLO1
2rWuGugnj9oX823XbK/3VX0cQ8t+muxHL+ZLTtdqb/DnB/Nfy07e/6OSh4we
APYbF/MXi/07sr9W9qzvZ+Rpf1L62GPjA/o6V46MD1f/UPud+vT4VLgpA32b
T4xcD+/g6sb17veN8ZG488H1jD9XN+zzzzKuLS2+fz9uNZ5vdlXD3iXejc9B
+eq4xab92oZ9y8QD8mm74ioH9Xd+HTc2sHPuxWejfJ0539hZj+49cv21jevD
fyyfthPvxqft8UdOLm5cf/7I9XlvHZ+N52PdPbie3+/dsC8R75lP2+XXG7xf
/K0XN+xrXR+0xg/yj63DWdt7XeIGH6Vcbz5KdMUn6yud8S95fTDVODDFjr4A
eczmU21f6w52OyzkO3TLNb+rXz80nn+ptt8+4xzF/Koda923Qf7Fy6K3Fb9D
Z74aelTE8V+o/JXE05f4d+en/HP0whwnj126fd1lyr85OXpf++f80+uHB9W6
eN3+Oj/dNXpP0X8arB+ST9ApjqfYpTtX4vSx4w85UHH42K+sdRMH+SPoidV8
lj4/5NToYe2kPAzsL611EYm/LNdLl697o/KDHlnrPnbvVf7PRbUu4CD/5qxa
t2/m/Br0yL6fOP4Nyl9JXtKMPAvnJ20TvbCaM9b7B/eudRu75yj/Zmz8GePT
bai5JpPVjBPYG/qexZ77LS3ux039z8H6X/ql5fqGPqm+f6BPWuwNfkSxN/Sb
i72h/1nsDX3LYm/oUxZ7Q7+02Bv6n8Xe0O/s28difc5+fFqsX1ru39DnLPaG
fmWxN/RPi72hb1nsDX3UMr409F3L9Q191Cn2hr5nub6hD1vsDf1Pvb+B/mep
/4a+qd+v9UuLvaFfWuwN/ddib+i79vb8q/ud/ROFbzfl57XaG/df+uH2cws/
jvGG/PMfPj4N70/86ZMqe1fWT/X9rlj1+DJ2//CTyrjBeQj2+fku5wvbTj+X
n7HrfKnz+RLxLfNzkjtmjk96f/gh/J6fff1q43ryzv4+44j5lzr/6Raf/xS/
3GD8gMuOfqL5yWPXe11zuspH/PfjyJPW+EH8EPp+K4ofQp/xNzOOmH+p+KPB
9c7/c3678p9yft6Xj/Ohx87PPbpVnQ/B39qQ38PL8fU5Xyp/hx3dB8YN56fP
8zOo1ztme+Vn7Px9zSHsrx/zb8JfaumPsq5o6bvw9yPjh+1r/v7/mvu393fc
qXV/xUVMfD3xzOur99rbdS56r+8f/bfpn1fvdcjXQAfI9x+7/uz6XHxQP2P3
X1/HdQ/sY/WD/lw9Lq+9/siXQ6fLdsVdDJ5v7Pt/3PuP1e9Y/V27pvm96LpM
rE8Rvtk0/MSJ+YmH11zHjv6Iff55xTLnEF6fb19zJSc76Pxg7ProvnV1P7V/
pZxbTLy+gOuHTho8LexwGZmX4KFhv6nmDk72DC8Mu7iHhTeGHV4b+V3rNb7/
aXhp8/yaHwzmh+vDW0v/nNj/IO4hcXzl/j9Zc/8mnp9PCc8MfZ35Z6//B+9r
nufxncmRVT7R14kL6f4++ql/H94cdnh06MB5fj8hPDf0X+brl/58+3XhkTHO
2P+wa829LH+HXdzFwmPEDm/v03P+nnglX5/AYyvrMMX3vCK8M85fvT6DOzlf
192R/t6/v3+uuZiFZ4f9qvDaWJfAm8QOlzP8vMmrwtMrzxf/wG4L57n+/KH+
7NuHuPX0/2JvzM9L2OEtxc8wdf/OH660/BO7Vd9bdB6LnfhU+ArbhbONHV5w
OMDT7cQnPze8Z3TJ9haf/fiauz41/z1c9e7IOQd5+n3x1cN7Lvrz7r/wkJkf
dpL/guvm/sMHD87X+XvyOuFgY7+15qZPDxF/HR52+NhTeNm6f/bVjxjk/x+Q
dSX97w7x1w8MT5n7uP/Cw2Z9s7/2x+G+T1Luqfnv8MBT7imcb70fuPfTvKdi
Pyu87PCzp+iFlfYRXvTDE1/5jfCk1T5mh8zbxTTtpNiZl32Ohl26pfjPS/3u
Fl03fn+4/GNPrv6+6Ptrft203PK/Le53w/219FfL9ejpSX+wvN9ral039PPK
9fxe+oPyv3x3In3AYkeXTvp5xY7+mvQBy/dHf2wi/b9yvXTT0E8s9ujfTaQ/
We4v3Tb0G8v16BNLf7JcTz6P9AWLPfpmZd5z/3xIrVtX9CCxR19vKn3L8v6i
3ziRfmO5nrw26Vs6Pmgq/UK9v6Ib11lfED1E6XeW7+f30qcs948+3kT6lHr+
LabS7yzXv6HW9UM/slw//+z3l2ec/h//ziz9Z77+feCU+Wn7hevf9v6V/J2W
/wsuwKG1DuSa75/1xDT86kH+WPi806wzJuZ/Z70yDXd3Zr43+7PwqyfmV4ef
yzppZj53+Lhd1mGd+dvhl0/DLx/E92a9N806cGb+Nn69cIkH82vWg6wTO/Pf
qa9wczvzu6MPMAsfvlvMh79jlnX8oP+GvzvNOnyymO/9xC5c4qG+4Hw9PiV+
23x5+mf44DP0gOvy3z0Jf35m/xP70+xzuovCqcYe/9c0XOip+fPhx7OP6syP
PyX7gezTOvox9vCbJ+E2d+bDh+8+yz6wM999LL5ucf85d/WH2/nH+vlntH/u
8xP4S40fxX9+fa0rPeCvoQvO+d3nlN93Xa17Pcg/uL7W3e7eov7/oVrXvNur
8nP8v/G31gXv3P/Pq3XHB+fn0t3u0OPW86t8ff88r9b95no/f6fnL98v3fQO
HgL2c2td9kH/vC2653X9767v30Pvr++f6K6zz0GPXfU7Vf2W7z+/1pWPH7gf
X86rdce7P1f/QRe8/v5ev0y65531M86tddkH+sYfqnXNaT9TlX+m8vv8fKrP
Ur7556blyxr+I8eteH+Jvwv/l8/Xpds5dfzAE2rd1ekdOh9FVzRxG1Ofv4ZH
1oVT1nn/k/gL7Q8H8RVdOGiT7+t89ProVW5q6MNI17Tz+viB0SvcvxHfvWOt
qzrz+XnOTWfRTyxxGNhzLk9cz8Tn8+h57tTQn5OubNHLxJ74lumBiRNw/5Ou
7dTrR/Qknz0/p534fPYjtW7v1Of/iUvo8v2D/X3iiyb1/re/v3Rlpz7/vzF6
n6vZJ3l9nPgf+Qf6/X/ib2aJuxmcz7P+DJ+lu889v99U5j/HtXp/O/9sz4/H
1bo20+MWxkeXvK3B/ip8sEn4YMln6feHiVeecH55uOKX6VfhgzXO/+6ehH82
2B8m3pk4aDhMg/XV2xvlf0vNfeq8Pr2l1oXpvqj4+fDlZvhv3T8+WXOtJl7/
5fwULtZg/xe+3TRx+NNHKf5e3KtB/mj4fLPw+bqbVf7Ew09Pb7x/3nv0VQb6
xIfVuoSD98v6m/f8btVP3T6H+Q/EH7TaP9fPdcOmg/l9/nnjMvmv9p/P13u3
rW4916WIzkS//uL+S/P82pnbD3b0V/aq9CbL/ZfH7r/NXBdnkB8x/+xWk583
s398beXrVrf4oeW7cvUVyc87Qf773H8puoyccw/eX3TbBu1//nn9Knmdn6v0
Fv6r3t+VyyPlX/nxyr8pXPnvSC+ir79XzXUVuvdqfbe293vuMroeN+n98nyt
+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
Z5nYv1LHl+85qL9nhWsUP97Af0e5WIfZ/+f4jFvl32Zf8oG5H67weLB/seYG
dfb//Xy4RmfO/ZSd/ZNwgT4+95PN/k7+sbH80TH9wQ/X3LnB/vn8mns28M84
f972FKR5/n1dzU0bfn/iH7NOGNy/q7l0g/s/u+a6DeyOH7F98/ACGHfdvt4o
/QGvj8V1HeifoXsSPunk97X/SvzulLwf+7/nn+34h4/W3IzCcyjPV3M70Oss
1x8cnsJ8HbDNoP8TN4K+MzwR7GP6lPX571MH9YtuRPbhA/sB0iW2PePqFO6e
7exvs44c3L9eXzxrYFfc4cAOd2LLeTsa2OH+7DXfh00/oP2XuM2D840Ph1eT
PIHp9Tr/auS3L2GHh3PYfB8/9f69q7lLU/sP0d++InHL3t8eGV7Qv8z32dPf
1P56TH/0hlqXunu+zofQVf76fB6avFfzj3XHHd+0Y/Kntp370abPk/8M/x3+
lb+OHjX2fcMd+e15Pxn0j8/XXNPO55dwR/ET/aX8W2P6A/B4c313sfxLZyTe
mnJ18m9tGNE3aegblO+Xrnj3Wp0fnhGuy1/PzzG7a3R+ybnXvg39yCeHW4Gf
9Wb5h63r7fWPuC6Ts7T+OinxBFfN/dzTs+Xffkata995/5ivXck+tXuH9qdj
+rjk2+ybuHDiibCP6WNa19L6D/81+tnks5Q8btl3Vl6N9e2+PUn8/czx9/X9
L1r1/cm7QMfO+pXSpRvkr6KPGX2K2WJ9u/J8g/wBnmdjpb/dz6/J352hi+n8
3d+Jbh3zhOPD0c8kvt3x9ejaoYvp+Plbolt3afaXjg9HP5P4/5Y+Jtc5vj35
AUX3crC/j64c44Tj25OfUPIf7H/aVX4n51egi4fupePj0b1DN9P5F+jOtdYX
Xvc6fh79y50a+lWnRXeO+zp/A/1LdC8df8/6L/kdM+d3oH/J+brj59DPPDv5
DS19zORnzJyfkfyUkj/i/BT0M8n/2F35F+jaJX9ioG83Nr5Yl/uqhfY7dZ8+
v8263Pxcf39vv1r2a3X/q3V/1m8aX8v11u32+GNd7qt0/SbF1bbyK+p641+v
363yl+uvVlyM+bjW7ebnUn9wl7m/rve5IT+X8ku3Gx3vtV5vv/K+4r9cLb/Y
NeJD87PKX+z4N69u3N/7tvXiz1lX+wLxw71uN18c/e6rG/f3ush8H+t287Oe
b6rnK9d7XbEqvuFAtxs977r8M5W/XL+29Qf6Vr3OFfZt7/n3nuW5vuTG1d3V
v8auX9K/hn53V8/7vb7l2PU/2v37/P7V9ff8W41+5upu9/L+6FeiW2n/Kj/X
+hP9+uNE2X9edvSMzpaOZSm/+K5/mzgT2/m8RHbiXaxjiR39Sz4/Kf3sset9
7tHiH6MPdq3uP3Y9epPHyQ+EHf8YfqvHaX0wdj3rihPkJ/H93yU/XP1+B3yi
Yke/kk/v/4j7u0Q6ltj5/YaGHb1KPq0vQNwIcTlef2A/pWGfZV+Bvv5q9hvY
6/60tPQk6VvBp9+t7qfTtdq3174i+vvl+9m3/G32D4vHh37fwn4GO36/lv4H
+WuU74kqH/uWOq6Sf71+NvsK9hvYfyv7lnDwusOzn8GOvjb7FnS2sXtfwX4D
+wbtW9jPYGffgq42OtvYP6J9gfmB1qXdlP0Idu8bXpn9BHb6+wnp/+hwY/e+
hXN07Oaro8ON/d3ZF9ySfQE62tjR335b+jf7EezeNzw8+wnsB2nfAw8AO+MD
utnoaGM/Vfsi9kv1+7tthm42+436/ff7FnS49X7LvoX9DHb0s9+TfcW+2W9g
976F/Qx29i3oaqOzjX1MH/fakfUF+proDETPvzw/+4maY9TvL+afm8znKPbD
Kn3OnRv+jbuLTt7DNP7U+potfZL29+PXqMe/Xr8MfU10ery/v6vS5/zc5Dbp
b0TXZbqcvKDl6HBiR1/zkkp/8/py/aWVPue/NfU3md/Q4cR+VaWvif5mfz5a
63PePdDfjC5P8b/7/HzrSp+TdUT//mt9zQcVnU3svxF9TuLajoxOJ/aTo69J
fK7jY15W6XNy/tfrb9T6mpzP9+379ZU+J+c3vX8VfU386jdHZxM7+pzkFYX/
VuwHV/qamxfOIfZan3O7wfnD+6K/yfoUHc76/XKu88ShPkulz/kTA/0V9DfJ
G3tVdDix13q5RQdB/avnb7n/wvVg/f/Uxf7Vtd5/pbE/adrH/Ltj12t/tuz9
GfkjXO/+Wb+PYXxXzWu+YPX9VZx+H39cX9+vL8fuX7fnpRXr44zdv+YdL624
fdZ6V0sr9Tn94PuX/P1j9XdLpQe1tOL93xnVeEX+Qn++ofpddv2O3b8e77H3
45++f8XfP1Z/uv8gPkn1u+T6tf+Pn7Gzvt+9sb5X/1ty/zus0s/1OUivj8u5
ATq59f1Z9//UYH6lXuiXu6t8zPsPjS4uOoTY3x3921+N7i16ldjRz0X3Mvqn
xY4+bvRPO3RysaOPG/3VopOLPfqwRRfH7w/93Pr8oI9P5jp0bz0/8/f1OvzB
5Xr0b9G9RQcXO/E26Oaio4sd/Vt0bz0/Eg9anx/0+x/0b1mfevxBP7c+P9jV
5S+6t+jgYo/+7wTdXHR09X6KLm70i/3+u+gnkz9fypf2UzjB0U92+5ihixv9
5GKvdb2G+rjoZ1rn2e0/n4P5U/6zwfyDfmaLP5Xrl0f8b83vRz8z+tyzP0me
OfaTsi5El+Wa5IljR1+TPAF0NrGjn4lu5nuSh1/Kn/Eb3c3fTx49dvQ1L83f
obOJ/S3Rz3QeOPbTsq7H/3ZS8sCxo595s3QIyv0zX7B/RocT+zvSn9+uPH7s
6G+elPugw4kd/UznyWM/vfIf9Xny2K+Lfub10mmoy//EoguADid24vf5nk3R
UaivJ+6410nAHj2B6Ar8YIaOJvaLM78lTpL9UPl+8h7it5ttSJ4/dvQz0WFA
R7Oun8IlSzz0LxV79m2zbyWO8e7oFGCf94fbJ+JDav/5U1PyGBt8h0mta80/
r0+H/Cf0y1r+r92reXPHonONHf1qdKutP/Ki6F8fl9+/VfMXf4+u9Tu0/43u
ybSL/8P6I+SfoGN9UPRmsPN7/CPRUS7lix7JdIcq/6/3L6F/Tf/dMnon2FkP
nBN9HOdXon/N/Hqy9r/0T3Sr0bHGjv41eVHWf9g+8w261Y7vQv8aLrb1S/4m
+tXouqMnhB39a/zn6BFhp3+Sl7HYP333BN3rXaIXhD08ueLntP4R8cln5vfR
Syrfj741ftCjoldTl3+L6Q3R1bH+EfrX/P4UrS/Qt047Hujfjenj1vr29xn4
vxafb/Fv6F+6XP4l/Gbi4xb7zsnPEF+1fP/fRL+T+AbqGzv6nOKr9u0z+pvi
n5bnR7+T9dsmnQ+RNyn+aSk/+pvim5br0e+sda76+RX9TfF1S/vYJvqdtf5V
P3+gvym+bikf+p3ip/b+mehvip8q/9IvlvUvebLY0d8Uv7fYE59T1r/ESWFH
f1P83mIPn3UiPqv8Y9+aiO+r8j+37E98voY+p/i75fvJLxV/t7yfnGdMxCcu
348+p/i4g/0fn+6fNbdhyE/S9WPn14P7Rz94ih/AdvSr6ZeL7fePLtKdg/kf
/Wl0pxdfv0fpl7b/TfSpL8/6efH99yq607ajZ0D/a1w/RXe68fzlfNj2F0d/
+mvxe9tOfjT5T4vr/4DU/+6D7z8v+tX0v8b1RXe6Ub+l/y2+/xfxGw/un/qf
Xha/aaP9lPztRv0X/ZxG/XFu0Go/U/x0jfohr3RQv+Sdvjd+8cXz352Tlv7h
zff827CK//Mp97L/HRt9mjckr2zx+f/zNs7n7eetm69/Xrmxtvd5jWdofEM/
lbx/x0eg74puxXXRscBe778eM31V8uCxPyL6uOjiHhSdXOzo+bP+3CJ5ztiP
z3nAidl/Plf5Jyfo+cwHID/rM4mzJ08LO/q47O+sz/WXaRcnV+vLfv5/ZPRx
0cXdOjq5dfkeU/Qtj1L9UL/Efd+h+h17/9fl+W7L831Tz8f75px5F9Xv2Puf
v5dd1833gbtunNfD/uuwJ74k/WNYP7Tvlr7uNeo39v8ck/V4S38SfdH3N/Qn
We+39D0TTz8Z0ecs6+pN0udkP9TSJz04+7WWviT6ovX6rt+fMe619E3fnf1I
S9+Uvx/R35y19Dd5ny39Tfw3Lf3Nb2Q/09J/zfvV+q7Xf31/tf9p6p9OR/RP
u5b+Kd9b65T2+qfozbX0PfP+Ji192Lz/WUsfNvqks5Y+aeaP5bH544ic/94a
Pa7a/vVlnhMdQOxzfd+LsXfoiPn+6Fqhw2M77W/r6Dzp/qtj9+d8GB0D26nX
raNz8aOWb0nlm3+eu8w51BbJ863Lf+Yy53DkO/v+5C2j51Dbu2XaHXmuvj5+
yu7z9/L9pfyrI+VfXWv5j1lY/qWVU35o+c9dxq9wVPKcfD3v9+mN91t0TRa+
33NXW/dHPzeco87+2a7KS9xu+kz5t+v4xycWnV3s+K3RzbX/mn0F8QFfkH++
juvYtttF/u3EIxTd3PfJfw83rY5P6+34bYmPuUn+W/R38a/bv/z/0Xbm8XpV
5b1/UyFhEogMIlMFZRAKVwoRkFP3skGxkgD6URSoymAhDqCSXLVU4eBArSBS
BGJArKK3NRAEmYTkhL3byJzEUIKlAiGgIqiMFVREvJb3932267fOZh/Kve8/
7+fkl73fPay191rPen7f5wu6rvjcdrL47iKtG5C/O9vWD+Dnkv/wKVvfOE/z
gnlqP++1+D1xbbi5n7H4dp6fTH5aG9+Hn9to3XtDi39/Xs8duLs32PoK6wLk
z/j6wM80ryA/6XcW3ya/9uvqf7fY+gHrJuS3+PrJ4ix+/8siPk+/IH9nrq2v
9PF13Z/h/g64ZHneEp+Wj7pa66BwUtF/KP4p3AQ4qOjwquAaeH6X16Xx+Mvh
4puyHzin6OLOxPjf/Q93iG9xibimcE7RxWWo4aLit83bZ3d+BXxUnu9wUtHZ
7riO9/Nj4qPyHPLxK3zTj4pbB+cU/UbxUckfuEGcVPRPaP5wcsf8AT7qOuKi
ev3TdcQ/hcsEBzXOb9qQf8o4OHiG0uGfbisuBxxUdPo3nG33F8gXnfBFM5/L
t+/O3zmFfq84xnxxoNHhO+f1u9v84pMy/t8zNZzouL7iOzNvFO8z9g8fmvbp
/LYttL4C9/mL4kCjw3eG6wznGR0+dD6u5dPynU8SF25/cZ7z9tk9vrhT/Gfy
DE4RBxodvvPG4sb8wPoXfGja3UxxouP6azy7mfIa7hIHGl2+/sQ4HF4N+l5a
H4R7AQcaHX4u3Fw4uujwd+HuwuFF7xsfw889T9yhPcTRRWc9JOrLi8OLzvPg
XeLm3pfxCvvjN3oeJtqpnpe2/WMV3F1vf/Bz4RrB0UUnvv4VtS9/Pn1V/Fy4
ueI1xv6v1biL9gWHN+6vuIg5N7dtv3n+2WCwwPLP4OfCzYWjiw5/92Pqn3B4
4/7lfF18QrE9/NxrxbWCo4sedZnFrb1S8cr8/rT+xSvMv9iXPwhflecPnFX0
4feKEa7fZJv/wFel/cBZRYcryvsFTio6fFW4qno/hp7zdR+POHBcf6vb5usf
8FHZT85bf7Q6WHxV80+HDh8Vvi3ngw43A66qeBht/Eb81BPF9Zshjir6e3vi
Y/BV4arCAUFfIH4q3B7WA9HdH7fI/G/wlfN1iLb9w2f2PEh0+MpwlT3+Rruj
fWxo82POh/f7L8VZRiduCZd5RJxmdOMrF/nxOV93VQWnGf0s8ZXZj+dXwmfO
4zjt843xCPfnweH9it8/weLbg/fl8Vf4y8FdFIcZfVPxleEqe/wGPjPt5ofi
NKMzHyCuvbY4zOjwc8lLE48n7j95LcwTXiYOLzr8XLi5/ySOLjrrS6fr/p8t
Di86/Nycm9u2L+a13z32zquOvfP6sXssPxl+7qHi+oj3E9eP9VHleVWXi8OL
zvOM+N2UjLfe8nfJW5hj8XW4bdRZ0PMmdPLq4BJ5+4GfC1fvd+LoosPfpW4G
HF50+Llwc+eIo4u+i8Y/+6p9f14cXnTj6wZnF72Pr/t+vddmdfhf4bvS/92f
Bp+V8T+cVvQ+fzx8VqvfMooO35X+z3ob+r7it+brj+38AT4rz284rejwXeHy
VOK8osNnhX80O+MFtXxX8m79+UO8jPygORnPsH0/39UR/1otvivPl9+I84oO
vxVuKxxX9DPET+a++/rjudYulll+Cr5DxqczxFlGh5/M9uQTosNPztfH2/sD
l5X9v1ecZPSFyndQfYn6ZHGW0d8mPrLxY2L/8JXzdZqWr8V4mf0nW/+aJT4y
23t8nvaKvqHFJ/GVcX6rxFFGz/lYJV93WQ+fAv4r41s4sOjwXek/V5t/Fn6r
8blG0Y8X/5X+BQcWHX4r8yc4rujwX2uNj+HAoud8PPgD7foe/FfjDMT28F3h
usJ5RTd/yMD9IQPxX5nfwYFF13xH/ohnas2HQuf5xvtxA3GO0f2+7m/+f+ry
orv/Ff4xOvkw6PCN0TWeDx0+Mvqe4iSjz7C6zZ4fx/1Bh5OM/md5fevmVnGQ
0eEbo8M5jusvPnLe7vm0/GP0hdb/+vi68F/hvsKBjesvPyjrF3Bk0eG/Er+E
A4t+o/oX44vHxZFFP/rZz1UjX+1Yf4H/CvdV9Zji+Ihn3deRn0D8mfipP9/g
v8J9hQOLrnhtjY9F8dzYvs8fdY/4xHDx4BSjwzfm+QOvGP234hMfqvGTxlNx
ffn/PH/gHEf70Yfnwmxbv4IrzLo+vEd04r+bKD6leFXsn/1xXTUeiP3DL4Zb
zO/l2/+6zrnFfPr5up/p4XuICxrP5y4+LPNLOLHoC8ULIj93sfGDdKCx/jfb
1v/I/5qp+JrPH+HHwo3VeKWN34sPy/WFE4u+ofiyzH+myg+Mznjp8+LG5rzO
lk/MdXX+gF9356/BY2L+AcfY2mfsHw5xfv2613evUn7cV6U/IE4xun4v9u98
K82Ho395//e6NZ6fPKeHr9vHn4I/y/wFDi26+T/pp6FfJf5snkfY1i8Nvqzm
t5rvhq64ZrOn5mfuvzb+bJPHC1u+LHVbNB8Nffs8rzvBEUZnXYbvwyz/9xTx
g9HhCKPDH7Z1igE6/hO213wn9i8eT+zf72/+/t4mwSFGh0/H9muLMxzXv4ev
y3oY3FniaXH/9d7aQeszcGzz9tmuK77e/L3waYnPwamN41PeJVxab/8873k+
PyLOLzrrEawfrClOMDrPk5z7294f1RdL3xLX9wmL720hf8pBiv+sL04wup53
xB8aPQ9NH4R/wtcv4de6Dxw9iX97l+Jv5BNG+xPflvc3nFv0nJtR8png956o
9R84vvn97fZfzxXf9xatX2k9K3T4uT/V/Pw4cXTRT1dewnzFMa8Xhzfax7Pr
M/NGmOfNtvyQ1T183UXGp3O+HX4fuLszjS/l3Louvu73O3Tj4vIZnaie+2db
Ds1E9Rf6+0N/3ZXhr3P/Xcf2g4nq7D/36bX73zHzjbecOvTtTT/NdP7dOXno
jdVF9Plln676341z8tBnGjfX4wN9unNzPf63Ujr51eeYzvzKOXkT1Z2b6+ML
dPKfTzOd92/X+LhP5/0FJ2/U6iv06TzvbP2/mqjO85P8Ja//nfv6Y/0jrv+B
pp9jOs8f5+Sh+/Pl++M+fyK/OnXwY41b0fZveLHLn9/2A3R8te+Tj3DPcfkX
cLOfUB5L+/zFb3+0+RDR8/nIYDDN5icvzblX9cusfk/f9j/X+OZXyrO62+uX
576E8Mmjr87n9el+235L+QbWHfoGGnwEsX/19y9ZHBGdeMi8bJ2g1dnuRVon
8P5veUHF9sSPVX+u9vpzlpdQHN+pue+h6P/H5OuqyetPnqr+znbe/9l+Xsf2
5+bzovS1jvxv5knuf91KvpVDh76V8LGg/63GE1drnPFJG1/cmvtKavJV0c33
UYxPzD+b9D4ccz3nvjhfH9/sr/T3Tzv6b8mnsf6b9rT1D7iWcOXgXaIvMa7l
N8W7zPWIm4x6/z/GuJbePzvOf4C+hXMnzZ+K7/XX4louFO8S/RUaPxwuruXB
5j9dbNxJ9+/iS73aOPro/H2PuJa+/vCQcSO9f+FbhnM/X7xKdOdKev91LiYc
fXR+bwNxLQ/s4OOuEDfT+bjwZr8sbuTp1r+eNi7lKeJVol9sXMmifppxMb8h
XiY6vzcqrqXzbXk+yKfcOB+XfCf5tJP7k38nX/SI4vq1+WeuNa6l50/hm3aO
Pjq+ZTj68C7R99f4YV1xLW8yf7g/P9QxRtH9/b7M3u/mbyzqU7Ff+Dpd9Tng
fHTwqwb8u8cXjc9TOZ+nj09n/ueO8YNfn5a/zXxWvqDk/ifzh6Xvmz/M/EmV
+5Nm5f6wyv1hj8nftsA4H+jm30ru3zJ/W1G/kvkQcUT3b5m/qaifK14G7/Xm
EPNvmb8peX6M+eeS++dm5/6/Yn7x6tw/J55vu/5k/q/i+cG4m3Ux98+Z/6ty
/5f5C4v6iI/k/rfk/rdZuT+s8ue/+d8q97+ZP7ByfyDjJrVD3Z/W32b+wOT+
wPHr9rTPD/7uGv9r/J52N05ex/75jHboxe//P95/h949vuD6ex46Ovmqlsca
+qJs/rjV894/vnnnVKIzf0x5nulgotuzHuicyonufyyLf6xf6H3Xh3ixxZEn
fP3y+M52Hfo2jcUxJ/z7L3T/fde37/qJb1+Jj5PEt7f3N3zLqcX6YV//6tDj
9+Hxwel76bjz6wnvf+B6Pv5/qnqN5gHo4vd28pXF78Wfl/DroYvfW8m/lsTv
Df3D8rvl9Q3b9wu8PPJmfP0JP5/ifuH3Q8cPmMcvvT5V1K0t6neI79zJ18Zv
x/t9ruVnk38qf1o6zeIX+B2d44d+jvyScPD8/by+/IbOucvv3zYWH2vfz+Jr
x/vd42fiX1fKT03iX4eOH1T8bH238294efQ/92+JH96Q9+b+IPHDk/jhSfzw
0MU/7+Rv4yeEo/eA8j3Q4fHJ31mJf279uzu+v1c2f5+eXpO9J9v6d/J/VF7f
Oue9DwZLrL6d6aOu+7h+/PnBOmmWcejRfy6/oK5T+pl8mOjyv1byvaZ95INF
P0P9YWdx6M9UP0GnLsmYOPFjyueL+ycePJx4j+/Kf1rLd5oWW3xY/tvqxcZ5
R5f/tHqncdzRz9d7Z5k48z5/Vzyp4MSjU78Yjv352Xus5TvI9xw+6Pz4pzYn
ifPu83fFOwuOO/qpWr89yjjz6HeJBw8n/k6rvxr8THHs4VHG7+u5Aqfe+X+s
v0w3Tjz6AvHgLxAn/iJbn4E3P8c49Og3KB/hLuPEo8sfXZ1snPi4PrqeN4pD
j08Z3fpvo/4bOrxoONLe/yY2Pu6ub8n7nfxIvedDn5b175ZTjS5ucIIjvYnN
/9YUL/o0caTFB47tNZ9K3zRONfqx4kk7Zxr9IfGeZxgHOn5fPGdxkusjxXlG
1/qM5u+bJo+fw4s+wTjS6Dn/cr9mJ/O30j9Zx4Rjja74Y3qHONAePz9KPOd7
jfOMvkC86e2MQ40OL/oE40ij5/zLjRpdTzv+Z8RJ3bTx9XF40luKM637Fbru
J/e3mD8fJV70acaRRt8844Nu24hPHvpE53/OuezZfjDR/RP/0vstOZ+d7Z2T
N76+NuOnuH+sjzmHb/ztW06e63DyrrfxMfu/VBw+5/Pb8RfxaTv+Iv8b3Tl7
rr9LnLwHjB/A8/FKcfz2E8evQ0/S4/q8Or8+RXzJrg/zh2r843+yWJ/O9fsL
f+Q+0n8hjt/94vh16I304vo6J8915+R1tJ/G60vY+QUnz/XvyLej+UVX+0l5
nMDHr5Ne6Px04LrXhfX1a55f7rMOPcsfmJQ8/1z1uwuOG/ps+dHy+VvbvvL8
iscrz7/rOz75v6p8ftT2H/LJyTN3PojWNeutxenbytY3D1JeLnV5fH7Yd36/
tuvzCbs+eXxkVTH/O0G+bTh9t9r8TevmCQ7fVrZ+3nf+fdev7/778c+14++7
v33zK3jHcJC9PjrtfXzO8h/xpcVBHrP1Aa0XJucg5+c3KeEDecjqb+MnW18c
ZH//j4p37Bxk9Hz+sVezk62/af0yrWcc47g+iovDKX7a6lfr+NJScZR9/qT6
hsFB9vrpF2o997vGaUZXfcN6C+cwS1e+cIJj7PMnredRJ7vy+tiq75eONI5y
fn/XSM5Bjvah9W7Vtat2t/rcOr8Eh3mRrT8covXSo8RB3t7Gr6qvmOAge/11
nl9af668Pqp+r1opDrKvb2g9t9raOMjo52Tz25azjD6x8Vvk/4x6fkHOQ4n8
1rh/UzIeSFnf6Mfie1x04X9/fjj2IZvf5zw69t9eP9t/kV+b8x6o31T4rzr3
n/PgWp8Neu53HAz8+Yi/epiXcvbYXIsv4N8Ynv/NI6tsfm/HP+rH33f97fhH
/fhzPwbH3/afyZlfK/gboed+mNYng273d8Tvb9/v5/nKJb/Ifn/gv993f+Dl
5ffnma77M+b3x+vyeP5yHv+eXMRXzlZ8OM//bONLeXz297XHr36cxe9bzh76
rln8vOXsoRO/vlNx67vt/F6cxacfK/LX8vj/k0X8J49PP1zk3xL/nUccy+KP
ijtRl7DID4bn9zrFfT2++clsfWBqMX9hfYS6JKdbfOmobH1geTF/yePjK4v8
V9ZPPm4cQHTi4zsZ5w89j3+3nD30m7L1gVWV9094fccaxw+9zuL3xPfb8e1p
Wj/J86Pb+ALrI87xQ/e6K76+73VHFlh+A+MB1UWJOinoqt8h/vQzBf/3G9rf
usYhRqc9n5fngcTvq36L9v9w0f7JZ8rrzHh9kSfrNZSH4fGxZVaX5DDLf2G/
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
1SWrl9r6IrzIfxBH8u9s/ZL1C80fi/at+jfhb73M4sOWP8X4PX5f47ImiTPp
4zPqv+wljuadFt+GlynudT3f5o/62dHZ43I6S/7bPIsPE1e/X/wnz4+GR8m3
Xx/nT3bwWRrxWca8PgN8qGvFhYIThT4t335kT9seHhV5/rubP834UDV+U3T8
Ga/VOPaD4kyhw4+CG+X+HPOH1+4PZ7yfc6Xa9pvzJAeD19j5wYdaJC4UnCh0
8n2VB1xtDmdK+suVH/F2jS/eLY4UOvm65Jl4/Qbml+Qh7yPOFPp1Wd3u39Rw
pKL9Kp/7W+JCfUScKHTyuakP6/VfyOeFCwUnCh0eFPlTZ4gzhc58GC7UCnGi
0IlHsR84U+jki/+9uFBwotB3tHHrXHGm4vyVLwwXCk4U+iXKF6Y+wC3GDz9f
//4q/Q6cKHTyt+BKwZmK41c+OhyoEav/oHmL8ovWTQvFmcrvP3XPN27gSKGT
Lw4XCk4UOnypSeJKHQZnSjr8qBu1/ruOOFLo5H9+3ziSrlt+aOiD/GOcmEIf
uG58yOBEotvzo9HzI64Pz4ucQ9XqOR+y5UTm2z9l3Dk+/fqpyhs83TiR6Ldp
3Pagvp9QnhQ647pVlkeFjt8FbuR64kiiD/vlrkvm6XuY53fAEvSTFM/9lMV5
0Xku0E/PysYB/dvz/3k+TFEcEt3XDTx+xt9872Lbsx5h9flSfvwtdxYO5US3
/6b6/1n6dv8Gf5+R5XG2+6c+9AUd228pvxVcycPEmcyvz1umf1Hfw+0/Mh0d
P9RK40yis97NuOI2jTNcdw4l+nLr397/c79R+JBcD/4aPGd0fHk5P7v1t2q/
8OFq58ftkY07nhIfrl3fnJb9e3AkY/ucD7d54Z/y4x9kHz//G8d2t/Nn3Cw+
V+35nYyv+Xc4c+j5v09pxOeK439cecfk0Xh+5+HKq+XfieOj5//+YHDk0OHD
kVfq/s+vaV5J/4Uzhz5HebnitxXxNfhy+XVq4xvku8CFgweArnhIDVdOfLZk
+2e/RX1xHV+MH+DMoZPPQd60+7MZ7+f1Rdr8fvK+ycuGE4cuPl4lPh71I0PX
/QsuqOeXw5fj31knsPsbvir8cuinZ+f90sbzy7le/DucOXS4cuIb1nDk8v7R
7d91LhV/o3f4Hye8/z69g2/Rt//BRPUOfm1cvw5/S/x+zrcif6X1z3T4L0Lv
8Oc06B3+lti+w58Sx3/i+P6T2P8u4/tzYv/vHd9/Es+XnG/F+mZ7fzr8PXF8
Hf6N2H7D8f0/oc/N+FbEz1v/TIf/x+KXhX8lzq/D/xS/3+FvCf3a8f0t8fv4
dxbm/p34/Q5/Tuy/w58T2+d8K9Zf2/ldh38pjm/3bLw/GP1z41NNffbz9bFh
/GGJ6kC084MXyq+z3x/477/Q/m/xkzGPn+T1zAej3v/y9lT6A/J43WA0z2Nt
8/Py7dv4lO2/8Feem7VX8qdaf1/f/vN6coNRb395PPOKsYuydazi90f99/uu
X15vqPR35s8j/J3t/Neu78Cv78T2v43pzs+P3x/47/ddv7792/Ud8evbx48z
vhTr57H93tn8e6fmA+JUoefz+RvFh277l/Ejm/H5kX3j76cquFMeH4QvBVcK
zhQ6fKqNsvHjtnF8jDf/StypC8ShQoc/Jc5RI85R/P4wrjV9+szs+6iYv8Gf
OkLcqfssvwF+Fe/PmZa/CX8K7pTi6/H75HvOzcbXbf8hfxHu1I7m74fPALcK
jhU6/Cm4Uzr+uL74gZh/HyKOFTr8KbhTvj5wsfhVzL+3t/wG/DdwJ5aLQ4XO
+xxuVRef6oPiUsGpQh/yF949ffvs+8S4f/Cp1M5oX3H/1G4SPtB/EecKnXVX
tUP5K9r4nvEZaziN6Nb/kvpfHD98EauzMEBn3kzdJuev920/LeufwbmK44fP
KH5lDacRXfVNa3y/cB7j/hFX1rhvJ3Ec0XcWnxFf8WfEaUSHx7hQ+VuLxXlE
h9/Y6P/BcUSHz4jvA04jOnxH4mRwHtFvy7g1G+BTiuPDl0v96BXiPKLT/+Ay
wmlEp/9+Xfu5RZzHuH4Zt2fQvMTqa/K+5r0vP3lsL95rBZcRTmN+/Mu1rkUd
hT+6f5kvbmqj+UCc/7k2bpwrziO65h3BZRRPN46/yXwtm6Z9xXlEX6S84EX6
f7PFcUSHz4hv/VPiNKLD+4I78BNxHtE/r+sGt/EGcRzRJzb/nWTz35L/ZtsP
Jqrn9aEijhfHn/tvy/rQ5k+i/nLoc3J/RTH/W537b2qvT2j55dSfnPDxWf5h
1FNGt/zQYn5mfKsazhW68bFq8bHa+OT7huf3iY7z67s+lj9SzH+Nb9XAuUI3
PlYNJ2ui5993/fruf9/x993fPO5ars/8v5l/bd4YZzj59pr/V15/PdcnJTiN
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
pw6d32WcBYcO3flznh+3UFw54heL9Tf6CcaPkd+hnd9leYtT03LjN6Av1b8v
7dDxpbg/xfwrhZ7nTU5Kzp/Kt+/W3YfQcXy152dafflOfTDu54+2J0/B8hNc
X2r6LdLrK29eef7x2yW+fXuv8+L6ZT36n3xug1v32Ov2mu+O4yvm9xPViet4
fGeiunNSvX1c1qGzvXN6n6/Oc2qmPZ/6dLt/8d3x+8GBfL667lvF9/jtFw6L
98+p9N8OfxrjwatHnP9ES8f37fyGoX/gOnEdSj3nN66Z8KOjw5s8Wr7z8fmQ
rS98d1s/x3cO/w0/+vjnx3m05/cm+cK/KV+484mOMt/5GvKjo2+e5Udtmx6X
Hx3dfeX4zdGHz/fpS+QrXzJDf6MvkK97O+VJ+fgK3/gJ8o3jJ0d/hbZ7h3zf
p9n6pPzfDfkD8oHH9sR1lsl37utH7mvH745+oN5ft8rXfY7Fd/CN6/jxwcf2
+L5Vn6vIr1rTfOtHys+eH/8q8sySfPKh5/mT+6WdLL6h+9VsJV/50/Kbow/3
++4lw+8Tl/A3uvvCN7H5ofvOxTmI/ROXV/ukvYYOV0n+nwRvCd25b0vt/eZ8
lt2t/9GvNhFXyfvX3c9+Fo9o+7HX2PaD/DPq/Xt3cZXo17OMr9y3fZ/+MeMq
yR8c1+c64zbJHxzXR/7g5lTmEfIToOM3kL85/AjojXGb5G+O45O/udb8Icnf
HMeHH0P+7fBroMu/rfjqqho/Arpzk15i67fOfaIeOTr9n3G3/N0p377lQsGL
Qr8t87VukLaz/Dz552vqq6+QHwT9Q8ZNgqeELv9+Lf9Woh48OvxG+etr+evj
/E7P4iu7yT/2ptB3Nq6S+ARx/NQPFp+gEp8gthefoBKfoBafIHTxFeRreTp4
S+g/M24TPKe4/rpu1GEUXyH0vvE3HSfnvLTrL+4bdH6r8Vf1vGifb3q/a34+
vcgPwd8Id2KavZ/hL+Efcf5a3/GdrXYrH1Jy/ulfyFckn1ES5yq2f8C4Fg8r
Hw2d+a58QulqW5/C9/NpcS3+TLwLdLgWqnOfxue37yYu8puIY8f1cy7FbeYf
P1vxrJvElfDxw4eMiwEvAz34z+JaeP4//X99cTM8P1r8yWZncSP8/X23cSlW
iVeBji/pHHElzrXxg3MxvmD+f97/cC2+ZvE3+v+ouBlftPw01h9miTux2NaX
L5bvTJw9/f1H8WvlU8vnlxZb/tzpeu7cIu6E82U/Jl+YfGI1vAt0fH0/EteC
eBM6/t6c89LGf41vWHn/2mPcfsen4DcV/RteLL8/zX7f/P3N+P7+lk/rzwfz
b1Tu3zB/S3J/i/krkvsrzN+S3N9i/pza/TnmP6ncf2L+nOT+HPOfNO4/MX9G
cn+G+U9q95+YP6Nyf4b5f4r+b/6lyv1L5v9J7v8x/0rl/hXz/1Tu/zH/SnL/
ivmjkvujzL9TuX/H/C2V+1vMv5Pcv2P+puT+JvPnNO7PMX9T5f4m9YuYn/fw
2Z/3+Dnff/n8sO0H/9P9kxft7z904uy5n8Xjp9vASSu2J2/P46fovKfyfGXP
r+neP+vSnh+t5+/YmMZ/eT5I//FRn+MLPccHd9D9U8PtPzs2V/02X+/qv/48
v7n+3x7/+nf+/kUX/vfnshF+/y/t97V+PqK4QO350y/0+rI+37X/vviyc228
/e6RjU9LviH1WZin+/y8b/z6kHEzfPwEl+N4cTnmi9eBfq1xOTw/hPobXxY3
w8eXTxuX4xTxOtCpP7GuuBw3KZ8MfQvnXqiOBTr1WVSXpVko3gY679drxMWA
l4H+O3E9VJejro2Pzfh1hbgcy81/wvtNdUvSgZZ/t9i4F/Aw0OFq4Hu7zvjr
1O84HC6GeBno1P9Q3Y/gfeTHz/j1f6UdLf83H7/uTx2T0J2b4eNn53KoTkxs
T/zwcHE5DlY+CPrFxs3w+YVzOVTHxe7vGo3q3lSefzbIP8X7w9ZtYr2gY/vi
/TR8Pl2oegZXj00z3epjpPHrU7S+z7Ps+g7//S1LhveprP9g9Suq8et3RP2L
RvUvQnffgeo/xO9b/ZJY50W3+iW16peEbvUtKtW3iPtr9T00fvyFnX97fbz9
Wf2TpPoncX2tPkaFz9PPX+ub1W12/la/o/bnm9X/kH++vb5999/qo1RT7Pyt
/kv9pF3fvvtv9UuK4x++13adPux3uy4ZXt+2PgzjNq+TgT6wz/PVnZvmunPZ
xtcnKa/hZYUuXrS4Y7sV71/nsrnO9foP+TBdh3t2ibhnrjtXzfXXi4v2HXHR
Os4/uG6u038uV35Dx/VpdH0K3blnrjtXzfV7xEX7qbhoHdc3uG7j77/lsnVc
/6TrX2zPePYBcdM6rn9w2Tqun/L8Ny32P13j6svETeu4PsFl6zi/4LJ15Rd0
5Q/kPN7BIOfgtPN7zeuDM4H+DcUH1rU6JOjMPx+zOjLozL817472hO5ckAX6
PXTmn+Q/w9lAJ77Ce8/nt8RnqDNyh+bD6IyvDrI6N9H+ND5YoH/X+K54/+yu
uACcCe8/rDNQBybff8vd8Pk/v5fP89vzO0zzd+YVHn9aZlwROCfoxC+YN+Hz
9P6juEVwXtCJ7zA/9PzIjY0LAscDnfgXcQfOJ7+/T9ZrKC7EPArduSCb6fes
fdazrQ4O+tiiZz8j1Kf08ddtim9TH8vXj4iPc53m2voN8ddrNX/9S1t/c+6Z
r69xXRnn7WzrW85V+5GtH7K+wDrP3ba+M0/rEzF+svUb4suKK9dft/VF5sP4
fD5g64f0D+qW+vqac9t8/QwuN+tgn7b1r2syPvfK4KWhE7+mvs1nbP31DMW/
/1H9Z5mtr5IX+iW9x46y9c18/DaVOH7orG+wjujrh7ou4e+/2dYH4ao9qffQ
M77+pvUH1ll9fXWu1i/y+prt/BM/CvELXz881rgCzn/x/EX5O0LP1xNWjrxF
vA109726v5x5x39nx1517KKxNW3/7steQ37tie6f9xL7d3+8+xI8f9W5ZXPM
/5j7CQeDyfL7dBz/qB9/3/UnrjX8++oRP37Py3X/B8ev8x9x/+Y52fN85Uhe
L724v2N+f/t+/+w873b0+Kwec/H7Y/77ffcnj1dfPTLH9m/3Z9TvT1/+5Grj
7nh+Pnz+nHvC5w/jd+OqyD9o+2+5KjuIt4IOt+RIcUuuEM8E/WJxUfDd3m7+
kx3kO2Q/P7f1Zbgsl4jL4v4C1m/g0Lp/jvb9YnFbPH/R2veot++PGxflB+ZP
V/7f2E6KH19r8WPimzeLy3KdeC35/W+5Ks7XpH3/l7gtN9j49mTNzz/RMT9/
g3ypa4urcrx4K+jriqtyprgq29j4Gm7K/uKmwFNBZ9z8hLgpzm9gXMe6m9dn
mSlfn3x+6THxyPLtu5/vh8g3Jx9d+v3hQ94ZOtwwODXOT6Hdqd3C3wkdX6B8
ggneGDq+v9M0z3e+AP1b+f/pHPHOvH12xYecGwZPDJ33y5SMS8anzU+BK/YT
8cbQ+Z9d60uMC67J4rtt+6N9LtY4U/7N0Ncy7pjzj48xrpk4Z6F/XPEuxr3w
ztAb45LBK0OHa/bnWqe/wvjlOxpXzP3N/6l5+z9qnLZIPDO7frH+5s+fE4wb
tr3VT6H/qd/RD0N3rtg15p8eXv8jFF89QvHVkyO+SvujXTbinXn7g5vm7XfU
uGLi54Q+bA9vWzKsA/626cO/58TvLzPuGDwy9E8aFw1eWn78zj3j4+//weCt
9v7f1Lhk7n/cRfmuI5p3PSYeWvy+2qU4aHyHzrxSPsvkfAm4Z69V+7vd6iO4
f+EK8y8Mxx+vmz68Du+ezt/o+fjyjpHJNr7833p/wVmBF4PO+ip16fJ6ddRP
+30tn1/h7+f9+x5xZS4zPo1za+DZoMOX2k/cljWNz+ZcmB8Y3+Zf5SvkOf4V
zZPQx4xLA68Gnfg460q+fkP7eoe4NTvb+tMn5ZteV9yY/cWTQb8+6x9z6CcR
nz4m9w8X8e8PGndmS6sPAHfmp+LOOP+J+bH589r4j3HB9J4pxv/5e5NPmz8F
NwyeWN6+rhshL+U+W7/n+cQ68ubimXn7+XfFj78kXhr6dor/0O7XND7np9Qu
1tG8ZH/xyNCdG/YR8cTQ4Z59T/ENfz5+KZs3T22uEs/M2w95Vf/b1lcOM+4Y
PDJ0uI7iPDbwzNAvlW9cPvLmePHG0J1bdpJ4ZuhvlW+BvPV54pmh8/7Ue5P3
aOzfuWPi54UOT2yVuGFfUTwA3bln8gcW8c3JGbesbX9982+4bGeLC+b5QS9X
/8GX/hPxyNCVP1rLx5HmZfPdwl9YPWLrb7y/aDfwzLx9XCYumrevYf7C3kuG
eXiHLFmkv9EPFdfgaXHLHhLPLO4vvnxxxza2+CTroRspbiP/a3v91W5WiGum
7675aeGPY3z3N/k4L3TGhxoXMk4MPdZXxXVZauvbzk3y+P743I82v3umcUXE
P47tFxu35GzxTPz+igOclAfhv5/EGWacHLpzQzSPaOMHmn9o3hG8knz/Ma8q
8v/If724I39oM+OSwCuJ9qX5leZVzLNCh3ukeSXzzNBPNm4Z68l+f42PWtxf
+aaZx4fu3KM7xENC74tPvdK4SDPES0J37hI8JnT67/W6/+Krhv4h4yIpjhH7
f4XiHz9VfNX98cZXLtbPiS+IA9vcJF6S3f/O/DDiO4rrEOcJvc+/yv37M3GV
nF/G/fuhuGW7iGeGfpLGT38l7oz4e7E986mcK9P235/I9/5hcW/kf4/tid/9
XNyaS63+FPfvDeLivNbyq7kfG4g7c7z50+HawCFwPpzq+qRHxLXZx94/d1n8
cB+LH8K1uVNcmxvFu0E/TM//h4fP/fq34t34/SEPaqZ4gX5/4L/NNH7gX2t8
onFJDa8P/SLj8sHry/fP8+jqsa747hRxAZ0fyP2BIwhvEP3lxu1zfo3mBc3H
9LsbixeIvrnmh+I4N/AC0eHiPCaun/MBiS/Pye47H9ZPeX/vPX24/ndIzN8U
H643Ezdsd2t/3D+4Y4eLR+bb3y2u2Jh8WOjONZst3lnRPsQNm2n5f335TeiK
KxR8D35fv1usf7K9jhs+WuM6V7Rr/ULzgnSb1T907uHlxm9D5/ooj7KIz8FV
3Ee8Rde5bp6fiq7nXvpP8RJd57rBS8zb/6RGv1t7/Sm2J//Try/6GhkXsW2f
fXwBzReav8vnEaHDrRLnOHhW6MyPNC9K8Hzy46OuyL4pj+fw/vrJ2F3KszrV
8quPMe4NPBx08m6uEfeGOsTocGl4Tlxn/iHmhx8S9wYeDnpwwcW98foSHzTu
EjymOH7jhsERQ3e+kfOxuF7kMcPTQv8/xmW60fi8w+9mhHXI6ZafTnz0Xo1D
4EGhL1J8Zb64TTcavxju01nKM/LnA/Gs4Tjtdcrfa/3jzq9YbPwKxt+0I+LV
fn3ggt1q84e+9cFfGZdI7+HQnUu0t82PaVdHiBt0gHhC6KeKSzSi9/4+xm9j
fraOuEQbWf1rzp/+C2/Oz5/8lr+2/GXnvsGDQ797XK4cnzb+SR0EeHPo8437
9oTFp7g+ui5cp5Tvf3JwAzYRbw6d54vGDQleV96+VqnOyf2MA+P3z83ay2Dg
67tsD5fL+TJnSD+zIz/VuV8d/Lf09+LK3W58MfS9FR/TOLXY/q0Zt669P86V
68r/FUePflLoHLfiFKH38WG+oPWJ4ffJS/g716dq/MS4uj1+xpcaV9YaZ0b7
JH70F+JKOX/+aq2f8P1K8brQf2LcLHha+f1ruVyzbf3+KsW3vqo8pnvE60Jn
fUPrGqxzxPY3a31E6yI1vC50/Wxwubr8O138HOJqyouvvb6Ac7Xgbfn+u/g6
38/4Gi1nAx3fz7Xy/YyJ02HnZ3nV7fyO9fXdpE969t9XjKA792ZTcTomun/X
h36p+WPoe4jPwTjD+Tsd+x+g36C48V15HdI4PvgcJ+d1MEM/Vff7RuWFnWrj
F/mp0/S8jmrcvwXKm5M/Ozgd6Iwn5+R1Ttvft7wzXx+5y/IG4XSgw809SXlp
/vzxvDE4HaFr/EqdV/fvRn6f8srIJ0Q/X+16mfL+fH39NsurVJ3ZlB9/mxfo
43vPq4PTgc7zE64GnI38+Nu8O4437q/iNmPKi/P5nXgKNXVW4XSgw9+Au7HY
1o+VbwPfofmZOBvo5G3C5dhHnA70M3Q9d1be5pkW32ddBx8Gfkp0+Fw5n8fj
l1fiS0r4fNGJf8HV0t8p3/72kb20/V62vfbXkHd7jDhc6PC1eL6QT4EOn4v8
gi5/ZM7d4tPytcRBSnC20P9KfC788f8iThc666PiLCVxluL84G99UNwtOFzo
8LdmGIcLHb4WXC1xIGP7i8Xnwp+zveX3wNeCqyVOVRy/6o6Fv/8QcbrQ6f9w
tZy/lce3NpK/sc3vgK8FVwuOZX7+G5GfqnoA7fMTvtYR4mrB2UKHz8VzYaa9
P+n/cLXgbKEzfoXLtWMHf0v3kfsX+vYZf6vlcMXxi68FVwvOFjp8ro00vobT
hQ5/S+0wXSAOF7r5P3r4Ot4PCn/IqPM3cj7HU9VrxOmw7c2n3LYP4+sU/A3j
cxT8nT3G/Xc+hf+jo35q+D+S/B9x/OY/aOQ/iO3Nn1HwN8yfUbv/1vwHhb/U
/DfJ+Xjmv2lebnxA818U+RPmvwhOB7r5U9Qf2/iI+VsqOB3o5u8p3s/m70ny
97Tv/9zfUTufz/wd1WbGrzN/SgNnA938Laqz2I5PzP9T1M81/0/l/m7zPzXu
bzd/TsHfMH9OA6cD3fxPFRwO9Lw/hD85ts/5WA9XLxMnCz3nYz5h+4v3c7L3
c+zf+FiV+8uMr5PgbE30982/UsHJQjf/ita3Xh26+Sdq+SdCN39JBScL3fwl
NZwtdPNPwF8L3fxD5FHG/s0/1MDZQjf/SAUnKz//8I/UGsemfP/hr6k0ji76
N/uRP6eIP8mfBP/P9h/+pARnK/TcnxK8b3Tzp1Typ8T25q9p4GShmz+n1jwp
dPMvVfIv2fwr/EuV/Etxfc2/1cDRQjd/USV/UWxv/qIkf1Gcn/m3Kjha6PSE
556fXzkmbmba3cbXHdsPJqobv6sYP0x0/+Q1+/zW1scrr09qfJaivgD7x8eb
r3cW/Jna6+cZn6Vz/6zbe/0kdNqR14fpOz7j09R/acfH9nBzvD4EuvhBabXV
D3ih17/v940P1PX75GeHD22i19f4P823O65v1/7z8XHJ12H7icanBtnn0Wpp
5rtuOfQT3T7WT7P21x4fdQfnZXUofH3zLYrrfmQ6nA/0U8l/Ut6jjy9t/auZ
ZfURLX5ZxHd/rnWpXykv5m7L3ye+xDqK8xG3Et/jUHE94Hz49Tm34/pY/kvB
l9lSfI91xfWA84H+tzq/q3V+n7Tzg/8B98P5ljwvqMPr/D5bH2u+ZuNz3ff6
RTp+H/9a/lZx/81/1txv1/9U/T733ecH3P95Hfd/OK7YdTpcDzgf6Pn4jnne
7nH+8KeIPxOPzrdfp5H/emxPmx/2jQ9Xiz/1LXGnPiIOFTr8KsYnXh9xseZv
5A/CqUKHP/X34k5tYfnfrPt+IRu/7RU6fKoblVe3jjhV6PCnFok7BYcKfXPx
q35/25BbtTkcK45P/ClxtsifiOurvDjNX9ZtFopjlbffSQ3cKThUefuFzzg5
rRDHKvqH+FPMe+FQ5dcXfuG6aR9xrNDhT8GdgkOFDr9qkrhVh8Gxkp7zFfcM
DhX6+Wr/r5JvAI4VOvwpuFPujzoQflU2Pm3nvy9X/OztWtd9tzhV0T7Fn4I7
BYcK/RLxqxi/32L1t5l/EjeAU4VOT+h6v+TcU+ZvLd+0b3vmDegrLb+H9/2f
SxdHJeXbT4rfXynOTpyf1mfYPxwddMYd6N8Rh8fufzx/fmD+HvysbA9HJ9//
9nF84ujY8T9W2/nH/qeLv5MfXzu+p3/Z+YdO/0K/3Op/n631H/bv9bPEz2lY
nxNHp20/mlfY9bX7Ny3OXxyf0Olfdn1DJ74yLTu+tn+wvmHXv8p/f7u4fnB4
7PpUdn3i93V9ars+cX/h74QuDo8df23HX4wfv5+N89r8XnrKc/ef4GcXfGXj
ZyfWw9CN39wstvG78a2jji+68a0b8a3b90POb67hiOTXN/jljfPljF/eiF8e
2xu/OuoBoxu/Ojgj+fULvndNf7T2AR+8dv+c8dGbq83fbXz0xHpe3v6Dj13k
bxgfO9aTvf/ABWE9Nj/+4INrfNj654yfXvB1jJ8e66Hoxo9vHrb6wsY3T54/
bnzzmvE8uvHji/mb8btZZ4j+YfzpxvnNxp9Os42fbPzjiNOjGx+6dr618aEb
8vDQjX9cn2fXx/jftcd3jf/dnG39x/jPta8vGP+5Psz43cbHLtq/8bXrXYxf
bXzxgj9lfPHqkefmSxf8KeNLF3xz42M3HzW+uPG1G88/MP544/xu449X7s8x
/nrBvzY+eO18c+OD12sZv9z46/Xxxu82f1Ty/mH+z0K3/DOdVxu/6Nu/8Qsa
1y1/OdYJ0Y1vUmw/sf1H/llxfJb/WDw/+o7P/IvP+/j7rn/f8Zs/oZi/9t0/
898XuvlziuPv+/0Xuv+++9N3/fvqF5q/ruj/fe3b/IW1/IWxvfnrqAceuvF1
Gjgl6MY3aZxfY/7CBKcE3fyFwTnJz68//iV/JnWqQzc+gfhW7fmZ/zzBOUE3
/2IRPzb/IvXW/f7gv2zglOTHH/7NxuMH5l8t+DrmX01wTtCN/9Fsb/w+85c2
8peGbv7rRJ4RuvkDgwOFbv7IJH9kg27+SPhjKd9/+AMrOFDoxndKtxv/wvg6
jfg6sb35IxOcJ3TzRxb+e/OHJjhP3j55jiwz/rnxMSrxMULve/6a/zLJf+nt
t3N9w/yjjfyjoZv/NDhR6Oa/TXCe4vpb/PYki98af6aBA4Vu/tgkf2zcH/P/
J/n/4/zNf1PkP5q/pIbDg64LTf5zsT5m/KpmG8tPMX5QA4cnbz+Rnz5df8f6
heWP18ofL9of7RKOjrc/uDvefo0PMh2ODrrxHxIcHnTLL2/g6KBbfnlweLz9
2fs/2neHPyK2N39rs4/lP5q/MsHhif3nfJ0Gzg66+Wuave35Z/6TBg4Puvnb
ivrA5t+q3R/fwT8M3fhcNRwVdPOvqY5iO/43/1pwVLx9wT25zeJ/5h9Vfnq7
fmF8HfFR2vw+46eIv9Pmh5o/Ll1n8Rnzx1Ev3o4//H1F/rf5A6OOArr5jys4
KejGp2rEp2rPP/cvJudPmH+xhqMS7S/nhxR8bvOvBacJ3fiBjfOL+uYn5t9r
3F83/A7/Xj3d1u/N/xocJnTzFzfyF8fxGX+pdv6h8XWS+Drx++YPrN1/aP7A
gp9n/sYkf2Po5o+sdzA+k/EFavEFLL4Q/LIl4pfF+qL5Nxv5N4v1S9rV0bZ+
aXyZRnyZ4v0pfmLBbzJ+XX2FxefN/1T4e8yf1MifFNt3zF+j/XX4r+P8jD9V
8B+NL5TEFwq9b33f/EnRH7190G7g6Hj7gLvj7cv4CZX4CfH75t9fIv9+tA/z
Z9YbGf/Y/Iu1/Itx/Y2vU8PZQXe+zlLj6xj/s+DrGP8zOC1+/+GqON/D+KrN
l7P20Bm/GEU3vmyC04JufNEKDovfX/FPmxssv9X4qQ2cFnTjyzY/t/iz8WUr
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
fYffK8dYFx/Oz/+IX/Es3ummkQ8rrwFOku//IOVf+/hQxzPG+vfdxlfW/scm
tv+XF/0LnfqJw/jXk8Xz47mP79IR1h3uGvf4HhxZT/4oOGR+fT6q+PQFFn/l
9zfU+qqPX4ffd4xQ39n5yxO7fytGWH9ZPe79e3Cs5/jH/n8fP3XLPL48sfvb
jE157vs76Nq/c999fnq0eMn5/LHkK/M7Pr90/rPz5Q9SXD2fn7T1He4Vjxc+
L5xhdHjI8JE3tfU9eMP5/K0d/8MrZr/8Djr/H37v+PHZ/dIOWZyv7T+Xire7
hY7rcR0n+lbiNR8nfjMcYPRTxfM9QnzfNcSRRhfPOOVx8rb9XSqeNFzXN4vz
i852XHfvP/r9it+FM2zHn57WcXMe6BeKJwxf+E/NvwOPOZ9ftvEDeM7wneFU
2/2x+fWWvn3wrdkPupptvF9UHyDeD+JJVYvEmVoszlTX9vyNTjzZ+BSxvfgK
yfgKnl+UjE9h67e7JeNHxPnB2ze+gq//NsaPiPbL+pfxIaL9i69RGV/Djn+3
xvgksX/xPSrje8T24pM0xieJ7cWfqI0/Yfk96yfjT8T+xddIxtcInfet8U/i
+orvkYzvEdtTD8L4J6GLb1EZ3yJ08VEa46PE+YnvkozvYvPPZyrjl7TXV+tX
xi+J/TMeMb5Lx/w2+CLt+L5n/U/9xfg2l0Z9jpXyhaG7P/BB8YSIf9wrXhH6
heIRsb3zZ+BF5ftv82/hLaHDc0LHr4Xu/utLxStC9/4Dbyrf/6a2/73t+Lax
49st2fZ+/o2dfxzf5coLRZ8nnw76ZcoPyI+/7T8PiseVX/+WPwePyq5vnB88
JvFlG+d7Uu/Prm9cP3hP6D+3/q/rX9v1r/LfP8h+f1r8vq5PZdcn9q/rk+z6
tLp4X9Z+Gjv+2o6/zX/oWR8T7y7yQz2+ovh08G0OsfgS+YZwCD9t8SvFRxOc
QI+vKO4T/aYjPtzcYxxFdMXHNb5ar+gfPx7GfWrn1KErPk/8vugfGw7jjon8
jVst/qj4cQNn8HsWf3rzMK5ZwxHcz+Kbio+rrtKLiv4xfC4eGHyJwyy+tKvy
yhWXL/rHhcO4ZpNzdNr4puLTCc7jVRbf0voH6x6Nr58orlvDQfT47jB+/r+i
3/j6h9YnWJdoLrD46TCutwNx2SK+q7hi9JvvW3wRP8yhxlFEJ/+xyf29oZMf
SnzF8xuM71jEh3j/U/fE1/c7/Dmx/w5/R+j4X7bP83ej/aueU/iWvb4T/N13
6vg9PjbM+50c8z7Pf+nwR4cO7ymvo9KOH+AS/bv6lcfHlNdA3kOR39B3feCn
Lc74Ci+27Qt+S5y/5895fST526gvU+RHe36xtx/Pv/6K3T9+f1v9/pj9/iy1
H+Kfnr/i/rx5dn09P2qeHb/y06r7Fb/9hMVvGU95HTz0O+QnheN2mfERyX/b
S/7UO4f5fKHjx8Sf6e37Uvk5+X/+/MZPuUnGxyrb75KO9su8Z1P5Nw8YxjFD
3zDzu7YcCnR4KDuKj3Kv1QcafjdjG3bEn+D9vOiIIf/nnUO/WGz/FH7Um4f+
1KEfvp1/NPKLrpZ/1P0D8q1HfoDX9wu/7tZD/+6w3k/7+9/JxndP1fIjx/7J
q/69/MvOz/O8ch+fwKOYJz7F0mE+Z9x/r/vu4yf8aAfKnzZ/mG8a+8/bb+sT
9/b3ZY1r5UcPfbLyvRlnefs7XPnUM5Vf7f5ieAjHio+gfP7QietSX1X53KHf
Jz+M6nwU+XXwZPJ5IZ8/PF80HuI9/3zj1/CU4Ct5/sj1VhdX+e6hT7a6tQdZ
//q0PT9Ptucn40/8Lx8Y+mFi/5r/kX9aixcS9wc/8ZvlL5bfOPYPL+UfxE/x
+mb47ZL8d/cP86WL+A517XnfoF9udXnPtfYn30uCj7Bw6Icpnr/kJ3j7o//C
Dfjnod/B4gv/Fdwk8Tzi+GbIL/Ee+Se8/XrdeI+PwDuCf+Trm8Sz9pJ/ztsf
fo9H5f+4YOgHCX0sy6/E19m2b69L7OsjmyuuOlX+jrfY+4G65a+Xf+jbQz9R
6Hn+6OP1MbZ++AOre+x8RvzO+J/lh47tyR9e2JE/nPN2eP617edg8ZJYZ5Mf
q2N9oFy/WUO8nP+Qb/YtdvyfU3zuYvGblhrf+jXK94bP4/0vf79vW8Sf4ZXh
G3N/PTyl/P3fth94Qjp+xfdXWf/pHv/tpHn1feIXbW31C+EtwV8Sj6kdX4lX
BL/I+QsnijcFf0rr6HF+WynefYb4VWsPeVax/cye/NGfya8Ld9rbB/EiOBqD
7PNoNV1+YNZdO9b3xvbWe2qV9S94RfPEL5IfLo7vh/Lz4u990t4PL5cfmve6
tw+4Q8RtXjnkOcT53SG/tfJXivnBhvIj4yvx5xu8w+AfDnkC8fvH672Ib3ym
1ad7VH5jjdNqH5+9WX5ucWdq+b1D/5n80IzPdrD29z4b/8+y8f9s8TzWEt9D
PLjQ8dvLn1XMH+EJ7S3uxTeGfs84Prb7rPz93j7wy+Of/7o9v/P8deJ+bfub
nfnxqVPUvj+ImxwkvkGxfiVe4J7ypR435HnY709q3twxf+S4f6X30Na2/sR6
Ss53a+encBOmil/g7esp8RYeEn9BPIbQ4RWcL37BVHt+vUTxDfgfk4c8kLb9
Zv6MSXyH3ucfeaPVtXedvLgrxOdy3fNjXIdXCL/QdXyDaqfF/I+8L/iIPn4i
/qrnYKE38tPhr/P9Xyk/L/5e133+7vtXs+1cf6eui86j0KnrB7/G9beLd0Vc
zfvf0T35UX3+gYvEsyLP+IM2vv5r8cDgg3n/y3mhjE8etvszOfhj3v/ElUnw
cWcMeTOxf3ExeI4Wz8/V4mkx/v1Tm7++STwyjtP9ofDM4Ju5/3f43Z0/wXbw
3cR7C73Pn8Xf8PFcl+84rSV/rOuPiBdK/NR1PbfD1+o6PFz4uK7DE9Q4odC5
norTFLrOi98tfp+4ptp5sf1BmV+4rbOG/hHxgqh77zrx8EfFj3Id3h/8v0ts
/N/nr3m/eBCsr3j/GBFvA/6Gt/85md+V82vnj5o3JPjAPn94nfy6mqc2Pj+9
Q35TOGuen4k//Eat+/n8EB4DfIZrbH6KnxZ/7Sds/gwPKedq8nmUeWNzi/hY
/2bzR95vxAU8PkD73EL8S7/+4o4F/1g8stie9dmzxNf0+wNv8mnxJ/39zZlM
UX6Y51fsyrqk+JFvtPgbeXd6vmgdoc3fIS8Lfqc/vzQvaeBffsLmJ/BIvyY+
qXilsf8fZTzTwcDzz6gvu1p8FL++iqvU8IE9vvIXysu/Wv3Dry9+cPzhF1r8
juPCv+7xP9YfZui6fsXi28eJl/EL8TPeafG3c7Vem/vv2/jfufKT/7P85css
PgkPbG/xwTa1+NiizP+7VVxn9D7/7FvFs2Hd1HWeR3PFX+/g43Tm/+pAOvMT
txTPh/mh6/CAjhQfyPeveb+Nv1r9TPHmiK+63sEfDB3eNz5Cb18n9uRf9/kT
4WlrnpX2s/nVr8W7Jg63rsW/h9+rx36s/M4PW/+CN65xRPUxGz/8o3jccNDW
tfjAe8RTv1x89fHHN+s3xEeG+ZBt/mSfv5q/c/52q8OzWim+VRFfznhSvN/+
yD8m3hZ13VyH10U7K/Ljs/HHdsXzGz6TcRDb81dcZT3xL13/G/H8NQ9LU2z+
Rbub0eFf3UO8CtbZ7rb1L/JZ8vc+n0fhUSbixN+0+bn4u5H38h2bnzKv/7b4
lh+y+XGfP556A+LIplm2/qP3SnWV6jd8z94veb2HwSDZ+Jl6CNRH+LjFx8iL
5j112LDeRWxPPQzVFSja/xnK77tZ/JIFtj4Jr+kY8Zs8fsV6b8ryptr7s7hn
/RYe5TzxKb9i8aWHlM/DcW9n8a0+/sCXs/a9TXF8aw3XFetPiz95iK0vvkq8
0fnij/r6JesXl3f4p68Ur0p5nGmlxYenZDzQGL/H9m8QDxY+rI/PfqS4MHwx
j29r3liprkqzv80f9bORP+/1qfr4DO5fuc/i033+7xXm6+7is/xP+Q15vn3k
GYc+/F6B/yVdZ/4X/OH4TN1fSt5e7l9r26f5QpPnb+IrzX09rX8N32j4vi2/
CP84eQwrLD9L+VfhM/X8K3yjzAM9v+hb8oXiE+3yh+ML9/wo/N9d8Rl8nV18
cuJr+L49/nOifJ/s91DLz8P/je/b86uI6+BD9fy9nfT+xvft7z/847z/V1j+
Ff7vrvHphvJ9sl/P/8OXqvytwp+K7xQfqucH4htlndLzG1fLF4pPtMsfjs/U
8/vwf4fv2/Iblb8XvpFDLX8Pfzg+U8+/c+7Kzc+z/zt3hb/Rh9+D0Xw7Pu7v
mRSclnz/Rf36OD/ntnj/X2bbL7PtPS9kkfEHB8ZtgeOCDp9lacf2vm42w/jK
zm3hb3TGh0s7tve4alFfxOJGY8YPg79ix19PdP9Lbd7i9ct8XOr8OP6282vb
n/aHvtT271wV55sW3BZ4Lvn5JTu/2H6pvVeXGf/euS38bcff2PF7++zkp/He
/J75uNHvfvazeGzIP1ky9hpr/xdd+OxHfoWrx6aZjn97M/Nxx/Ubfkb57vBH
dOr4t1eajxudeCB5f7cpD9B193mjbyk/N77uw+TzRh8+99+y5Iv6HsbHPhJ8
QPIpZplPG/2beh+epW/3B/Vt79wzfOLoWt+pL+jYP3+foe+P2vbU0/qUxRnQ
qVcM/2yK4jAT3f40m5d7/WPiLXzvYvv3eb3HZ7aS3xvf93rygaMPj3vX6fP0
Pfz9A4J/fqr8YqebDxz9No2XH9T3ExpHozO+XmXjbHQfl26q8Sr60L99+9he
Gn/uZf7TvP/yXuDT8k+MXxS/T3//V417vX/Ba6Ffz9J4GJ1xKdwTOCjx+xr3
TtK49zA4KtLho9yoce86Gg+jP61xKeNX539r3TQt0Lh3ocbD6IxnWaeEkxL3
R+NKuCdwUNAv0bgVf+UtVr+Jceffa9wJBwV9Rxs3z9V4Gp3+B/cEDgr6+frd
V2k/jLfRD7FxJeNNdHgk9M8zNJ6N87dx50c0HkWHn0I//bPx+e7BPYGDgh7+
O42r5XcInXEp41evT8l49kKNe+X3Cd3HvXBS0BmXLtK4FA4KOuPe398m/hEc
Fekv17j37Rr3vlvjYfThd8t3mJbNA8vxp/u/8Y938c2OyfznO3WMP/GXl/51
/OVd/mb5v6su/7f83U2Xvxv/+WYd/m7FW+ou/zr7ZV7o/mXtv+nyt+M/7/K3
4x/v8W83Xf7tr8k//qbn9m/HvND92/zd5e/HP97jf696/O9Nl/9dx191+d/x
l3f5w8nX6vL/k0/c5U8fW/TsZ4T3z+4d4zu4JRqHFjrf3v61/7G+/ZN3dbzV
90Dn/qyX1QmDfzF/jPj1HKvfwvbk5e5tfHJ9j9A+D8rqUMb+R/r2T1x5itUv
HH43I9yXnONdHt9rn+fxDb8vHTtbcdjjM842x3/NGHHPvE50+/uqM5m8fjM6
7Xa9rM5Eef/m9Ny/gd0/Hf9Iz/GP9B0/nIIfdRx/jDvHPf5Lx4jLTrH6lGz/
3Pd3MHr2c97fS0e69g+/4VpxG8bEcfD98/18519cF7gNcBzQieeTJ/8BcSDQ
8/H7Y9WLxXkIXfwGuA0vsfpzZyguD7dmmTgQ6Pn8ZmpwHtDhN8Bt+Lo4Duj4
Brn+N4sDgQ6/4S/EbYDjkJ/fbsF9gAOB/qD4DU8q//cZcRzQ4T9cq/wSOBDo
8Bs+Lm7DZ8RxQJ+r9aF8/Ne+/3Ju9+8qOA758U+N8R8ciDg++Xao/7xYHAd0
+A/47uFAoN8mfgPz9+2sfvg8+e6ivpQ4EOj0O3x/K8R5QOe5d7e4DXAc0FVP
oCZPEQ4E+nm6719SHsVR4jyg9/Ed+uKDin83lkcX54+/3fifcX74h4yfGvsX
37Qxvmno+NuN/xk6/nXjm4au+LP4ssEvDd3zTvG5o2v9Ixk/N3TNl2x819b/
0XyzNn5u6N/N6uoFHzX0v5E/3fiooeNvN/5r6PjTjc8b92dXy9vH557f3ycq
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
RxiVr8I5Q+jbqd8daRwkdPeVwzFC5/fOlS98J1ufOidfNwiOEjr9Yj3jEKHP
l2/DOUN2/9JS+bJ9fvhd85XjN8/bd+sLxy+Ozv7mync+0+IX1O9ZKd+284nw
bTjHyO5vgpO0yPhHqvfYHCXf9vbmD75Uvgo4RvJXhI4vfAvnJEnvG19O9P36
3NsX+ij6kswvOxj9nvHPcj9kyafM/aZlfCPP52zzPNHzfImSX237L/jP5OsM
OTI3j3j9jb79T8niqSV/L1/vIs7d9k/8oMPn4Nljc7P53qO2nlnyHe34x/z4
+66/Hf+oH38ebyvzP/N4fVk/DC7r8Ph+OPYh47Pa/S3qU/T9fj4fLfn49vsj
/vt994f95/fn4a77M+r3J+cilHyEFzp/XJzVRf9V5fXRPyy/ax7/aI8vr2ve
+mDR3yE/LfHr46w++s3yuxL38PZzovyu+fywHX+Qv0uddJ9/nCO/Kj5W73/4
UVk38/XLm7O66Q8X80/qluODfcDy574hPy7+kYusvjp+2xH5cEesfvouWd3y
qcX78YGsLvmL0nW2vnuW/LLKyy74Ctdmdct/WXn+PHXVPyqf7ketvvpns7rp
L047Wf106p6TF+79e6X8rvn8t70++Gn/XT7bf7f4A37XPH+zrX9OXfM8PtDW
f8ZP6z5bdHGLmveJY/Ia4xcZF6VxPoo62iiclGk2fj1KXJF7jWOCns8fNmoe
Mv4GXBE4JpsYX2RN7U+clPpI46Pk86v9NH5rxxev0N/vEKfE54fHivvhHBL0
BeJubGeclDh/cUFOM84JOvXhLhFHxfksXI8ZximJ89f+tP/K+SmqK51uFQfF
53/wTLYU5+RY46uQ1/ZN46yg87f0on4R3JETjGOCzvhzmTgpPj/h/59gHJN8
e+bXLQcFve/9MC1r/7unPcePnzTuY3UdH6ueT3H/95H+C/lk75dPdvz9tz7W
8fW1G3//0H+vlE92P/lk0V+dH3/BB7Ljbzx/Bt19sK5/R3nfc81fBe/lUvls
U5ZPXujJ12/s+hR8dLs+xfpcfvytD9Z197H68bnPtkNv8vXI4voV/rJcb32s
He2nUfvp2H/rY3X9XfKx6v3d1X6S2k+cH+vB4lM2zqe0uuaNx2cOzet+F89X
q1tdxM/o1+5zRbe63CV/P69bXdSvtrqmRf/oOz+ri170Dz1/Y3x1jr3/F2u/
7sON49d27rOd6PlbXfiIg6GvyOtaFPU3WA9dZOuk6OzXfbjorK8qbtt4/PYA
uz4+Puq7vn3tp+/4V+r8mVf6+7Gv/ZAPOWIcEHTFoxpxB9Mpxr8m70hcwYgD
o28h3scWxgFBh/cBB2S+8alpF+L+NQdafAe/8JfF8fD4GjyOq43TgX6xeCFd
9evgfcABeZPx0eGRiAtYOx9b/MlmXXFIbrL8EsWzmq76m+ILNuIKpoXGv6b/
KP5Ve3ztd+J9iGtZ1Rbf1PixOVyckoPNHyduSD3fOCTo4m82zgFBF/+yUXwy
4pXRPtUvxJ1sdrT4JPmg4tAX/Hl4H84Byff/TL1CnJHlxl/vW39l/Yfxq9dH
yuu6lPkDql9Sy6dbe/0S1ddoVF+j8foaed3MNzzv57vqNyb36aKrvnit+uK1
1xfX+L5W/efG6z9b/GnU26/qZ5D3kLx+BldqfB9u1IctfbbSVX+jUv2N5PU3
Vssv6z7a0OWXdR8tuuqPJdUfS15/TPWLon6i1y9S/Zda9V8ar/8Cv9057ujK
zyYvO3l9uL74qvLTa/fxoveNH/DF3mg+WHTVP6U+ZtG+8NPis3X/D35f8ta8
Ph7Xlfvj9dmVn1+NmU8WHb+r+WAH6Ko/GBxYb3/D70tHxF2sPP5K3XblxVde
f0/+sMLni76J/LTEBd5q/Uv1SWvWR70+qfwPyX286KpPHvWrvD45flx8ul4f
UfXbKtVvS16/Tfnh1WrjWOTXbzA6Picj/AONcyjQ4Umo/lwzfv25VQUHAx1/
NHH0U8WxyLdfXnA20A8QL+MI42igK/+9uto4FOiqb1ftbZwJdOJ6q42DgQ6v
Qr7hyut/L8rGp1sV7bsv/q74bLWpOBYH2PNf9W2DY+H1bfvGr6pvX8vXmry+
PTwL51ygL+7Jr7D1myJ/TvWVIr7s9ZW4LuP7fFv+1zTz6aKrvlLtPmJ0/MD4
hN9q/S9/v29XxMf65o/4eUfN54suf3Rwo5yvRH4gPmKvz4QfWPW1k9fXVn5/
wsfr9TMPlB93pvl00ZW/3sAP9vp8+H3xAXt9M/J3vU4JOn7blebDjfNXPMR8
tgN0/LvuA87bz8oRfLz3Wv/CT4wvy+vP4b99VD7iC+z90Dc/Vv26BB/O69ep
/iV8xiJ+hF/Xfbzoyg9P+Iy9/h3vtV+ZjxgdP6/qv9Ze/xW/rt5PzabWvlR/
ssnr2Bb1BRv3CaOTbzLdOA3o8BZUv67x+nWqj17DifD65eIL1XeK8/Arez4T
/0jGoUDPeRKDwd02vlB9yGalcRri/MRbUF548vp4zH9Uv7SYH4pXXTvnAV31
9cgbT15fTzyXZn3jTKA/Be/h5pwDga765DUcCK9PvpPG3/eJ87C1Pb9UX7SB
8+D1RWk3s4wjgd6X3zpZfkaeK66TV/d284Gj87fXMUdX/W3WNwuduuHU1XCd
+bHqcxfb4z+mjrnr+Bnd54iOn3EH8zna+SWrUx467Xp8n2PUX4+4guuqr964
jxJd/mfiN8Xz+dOWH+n1r/GDuw8/2of8xOLiNN+28TV1r/P1jYnnX8gfFffX
n8/yF+AraLy+41PyCz5kPkL0s+Xn4/3v/D38fORBuD8EfwfccK+vjZ/PfX75
/V89ojyNxuv3Uldb9U8br3/al1/u+an+fOa+wgFwXf524oPF+E/PfVvfaHVx
nQsOQH79XpKcA4Ce183+k6L99sWPiVteYRwA9L78F/z4rMu7TtyUOjh+/chb
vNg4F+j49b2OG7ry6ep9zEeMLj4g+Q9FfN/ykwY+v8TvjA/a5xf4mcVdrOfb
/NXj++SJ+/1zHzI6fuZjzeeMjt9YXMh6qc2v8RubD3mAjp8Zn7Pn7/b5J+CB
XGGcEHR4H/IVJa8PC1/kGHFIfHyh93otrlPxfudM4IY4fzV4IVsPOSJbW3xO
/JAa3+zGll/Bfp1Tgi7/bQNHxOuH9+Xnic9W72WcCHR4D3AgPL7C+stscSr8
+ilu1yRxJjx+x3HNHpdjEXzI+n5xJNw/xLxkvnEk0FlP57p5/A9exD+II/F3
Fp+8SbwIOBKefz6WrR8GpyLad59/R/yywqeKjh/XfeDo/P3mjvz/4XczsuG4
PtVo/8l9qujy76czzQeLjh/VfaroL5YflXlux/HH+qfrZ8qPzXPXn5/vM/+F
j4/xuy+3Opno+JnFZUqTbf4l/mT4go62+DfXFy7B661/4UelTvp1Nj44UX5R
8tD+1uID75FfFB+p93/4A9Rd8froff4v95e4jp/+IPPZo/flv4rvFD5415nf
bmE+e/R8fLFtMb7sWz8nf2KufPb+fIKXsJZxFNDpf15HFV182sh/vMzWv+DS
5+vqfIKfmOaZDxud9XP3SaPDtfi58kpeafNb8Q0bfNjn+vy6x98Hn/T3e+Qc
iDh/vbfErUoft/dPXg9oMDjOxs9bifdwhjgQa1v8jPgd8ZVviwOBDk/CORPo
8IX3EofgTlu/FD8vESf6hsW38vyK4BzE/YM3sKfiZMdZfIl8KOcYoLOus6TD
X5XPH0o+N35q91mji9/bvMh83Pn1Wzu5zxz9YPmtibN6fNjy2ws+qfhrjfu8
0T+nvOyL5VNfavFt/Oj7mk8dXT87ig/+dJuf9vlL+/xn+MGXm0889B7/Kf40
+D0vtfql+NvycUV7f/GvcZ65j63wpyV8aujuOz3G6pPiX8O35v5T8kW+Ll/a
DKtfanVpVN+yzc8jnwLf2pFW3xR/Gr60fax+qdWNqbw+6UV5XRXVx2z5zVb3
J3n90cMsrvVJqy/6NeV7UAfV65/ibztT88qjrP4o/jR8aTdbfVTyffC1nWv1
T62uUFF/FL8Y9afWs/qi383ryhT1T91XusLqj/K+5HfmWn1Uxmuq21PUP7W6
QuFTy+9/1EVKq60+Kflc+NZGrL7ppXndn/Qbq1/6LuUH7Kz+Pcvqk0ZdU/nW
trD6poz78m/3p+Ebb31sz08Pf3iXfzziX/jEXZ/WoZOvaPVBbPz3cGX1LZLr
Z3fo+DKsfkf0D8YrVt8ituffF3forMda/YK4PvRbq28y4e2Jv1l9ldie/mn1
YZJvb/U/Qnfujufv+LzQ/Z992+Mvt/oqE95/Xh+urUOMTj6s1acJnb+tvk7l
utWPCR1/uNWPsfvbclu8fq1zXV5lep//YGL1h//n/lP8b9SXxAeHvmHmb3us
mJ/n/rgni+tPPclj5Xvz8XXub5tarH/k/jjyp1o+EP63L2T8jbb95f62yQUf
cm7mj2N9arfQc3/brTU+t/z4PH7eji/vkr/tdfK17SOfG/oF8sfhi/P87h9n
/rb/inqM6Lk/jn7Uto/c3/bjov5L7o9j/t2+X/G34Wvz/Gz8cdSvxCeHnvvb
Hi7m97k/jv/X8t1z/9vvK3xw6Lm/bXkRX8cfR31In5/if7tTvjdfH+54P47m
+vPuf6Hj/8593+3+yT/M72u7Pfmheb9sdfKTjH8+4f2T/5P3y1Znfd3qY8T+
WZ/ryt/t2z/rD13zS9Zf8vs+8eMj/mx8tQkf/8Suf/fxE5/K+4Vv333/iF8Y
39POb9smfy5N/Pdf6P777k/f9ff3Hj5T9L3Vv16reecH5FNFZ/45LRu/7hT6
UVbX/j6LTwz9ENOnD8cl05cMv4+ajs59x4fp/Fz8p0fod/ChouNf3UjrKvhY
0fP5164Jnyr6sVZ3Xj7N0BmPMP48RD7WOH/5Qc0nGsd3sfySZ2Xjz3b8Ql6t
+XDb89d+j8x9rm3+i66b+Xxj/5zXB3We+FDRc27UM5rvt/FN8qX+Sj7UC+RT
Rfe691pfie3ZTtzX9C/ysaLn88+N0nL5VNHZL7/j6zfD+fm7pw+v67uXDL9P
jPbF+B3f6o6WnzOx8WNbv3i58VstP73wr5r/ITkfwPJTI08VfUaeX1f4Vy3/
slhfM38V84xmosfXd362/lz5+M3yAwp/pvnvmMfG75t/L+ppTvT8+66f+ddq
5xfY+kNRv8j8dwkfHrr595gHhd53ffqub1/76Tv+vvPvaz97Ze+PzZsPdsQv
8G3j40bHP0278vxn/L/UP6Yesu///9Z2JmCXFdW5Pig2iEZpg0pECSCDQtBr
EAH55WxsUSMNKtcYAz4KKg1RBoVWNFH6NA5JBIEggw1i1ESvTNrQiAyn2eVt
RgUuSINEphaDTAqNQYjRwCWc9a1tvbUXdZpO/ofnOfS//tqndtXatavW+r71
6XwlnFO/fQ3ngfP6Q+N1Lzaed9B/1wvuv/7GzgOn3fbXQ+p35Xbpe3XxN8V9
Xm95JukhB/ZGesvB+LSsb4zxacQDp13nN+M5D/v7/6jrIbN/P7X8yj3G4w7s
yezR+En/LPj+21zPOPCfRnrIwf0NxeMO7q9l/g/+Yzz7nd0ufurfWpxaPFXZ
ha9QHS/p3cuufIfiUuKxyr7C+KmKI1v82O3Ss/c4qHiuZtdzId6qeKyyi5+q
+C31VV4G3KX06mUXPxV18Hx8v2P8VtWB/CH0YcRPvcLWsXWMpyq7+K2KM4vn
Krv4qRdZHFk8VdnFb1V8nfpylrdI0qefgX7rW8VvNf8/1niu+fze016S1/Hz
629k768/t/fse4zn6vNr/FTU0ev83/ita1geZi/xXM1uccvhyy1uKR6r7OKn
npfXuXO74eqS9O0vNJ6r7MJvK65o+YXOPyv8VdPPGUI/x+2187X4h9CH8f6J
Xwj9G7dLfw76Nj5+0gs/Otj/iD8I/WK/f+mBan1nfW/pgUIf1O3iH0I/x+25
Xqbr57hd/EOt76y/Nfm8dgz9SLebPpHHncgfF38Q+nIdPsv4h9DncfsHjT84
L9cv8/6bPm8DfV5vL34h9JU6fJzxC6F/6NcXvxD6R/Dv+4fQd3G76R+00D9w
/0FcoMBXW/39hPr77j+1/bn8TuuveNiym/5zC/1n75/0kOWf5EeYvmoLfVX/
fqsfP0T9eG9fi++Y/uYQ+psFflDjKB627NJLRv15/37xp6Hv5nbjXbfQL/br
m/5MA/2Z7v4m+ikt9FN8fKz+dAt9AreLnwr9Ip8f0/8ZQv+n+37zK+1PxGOV
XfxU6Bf594vfCn0sb6/1APrq8O8O903/lp67/Ep673n7a4bQR/L20juHPpLb
xW+Vf12I9Un8VOjbdu8fi+dDX8qvH8QPB3n7f/V5yHmurq84hL6i28VvhX54
gN8qz3fip0I/y+2m39pCvxXzM0jQh/H2eT0m5++73fTPEvTP3K6R0viJhyi7
+IvyH/EYZRf/EPrT3l78RejLePucv+r6Mj6+tfiA+IfQJ/bxM30iP/+Ix4j+
D6Ff6v0XLg36Nm4XPxH6W26XXugo15fy7xd/Efq5bhc/Efo/br8wjwsU+XvT
H0H9tu78WctPqN1u5p+szz/5TGP5h3jQsut+oM/tduHBoC/i9lr8KH+/uj6P
28Vfhr6z37/4z/IPrm+mf9VAH5b9H0KfxO3iN0O/zO3iL0N/y+2mT+z8VfGg
ZRe/Gfo3bnd+aq4v5Pdv+ocN9A+9vfip4qVKj9z9y+Il0B/19kF+yv0r52u4
fpG3Fz8V+kVuZ90j05fy/klvHPrjjG+30Cfz9uKnyi/EU3X/srgL9JG8f6aP
20If179f/FbntRrP1dsbPxX6cv79pp/dQD+7m/9KfHB+hb9KXUiuX+JP6vkn
vk78R+3/xYOUnbxJ6usG+cmR7OJP5vGxrr34kXq+xZOU3fSjh9CPdrv4k9Bn
crv4j9AvTnn/dnTeJNcf8SOhr+h2u98B9AHdLv4k9M/dbvpcLfS53G51U3ze
iZ/VuqDPvYC/El5L7cVjlt14t3598ZRll96q7Jwf8R5lFw9ZdtM3TdA3dbvp
a/v1qU8s/rLsxK/L76A/69c3/dkE/Vm32+dY1xePWXbTl/XvN33ZBt8f8lcv
NF6k9odLoW8sfqX2t+JZyj62+KaeH+J/g/z+SHbxK/V8iWcp++3Gj9T5STxJ
2cWvFK9SPEvZc/7Jr1rWB63lX8Sf3NPOV9KLlT3XYx0MiJ8Rv1K8SvEsZRd/
UnV5xKOUXXrs0v8Wj1h2ziv138Uvlv184HfFL87zE138Xfxh2fU8+fwb/xj6
2m6v5b9y/uptrXjIsotfDP1zv774w2rP+t41fIXhmRP0zf36Nf6q+JWtxZfE
s5Rd/Ew9H9sZT1N28SvFqxwaz1J26Rlrf7HQeJrev4l+3lj7Wu03ZNd5SfFF
6XXLLn6m8zL/asLTlF24OvEuub5dYfzKSyz+d7nxLGW/2fiZyut/znia7j9Z
vGswynmYHf8X+oJuF39Y4ys+sOzi/2r/JB6w7MZrS9B3LcZX64L4vLKL/yuc
B/VzFS9SfOqeSbzKr6/raVzFE5Zd/GDo86J9gQ9y/87rQ5b81Q/Yvm5egE82
fVu/TsS/1PlSPEzZrwZvs1+/+Nqx+q/9jOzib4q3yfOj+JnQf3a79DqhX+zX
l96neJvSA5Vd+yXoh7pd/F+NK/kTHPddgd8WPxH6r24Xv1ftxfPNx6/TXRFP
WHbxf6Hf7e2Nl+zPD+ND4gfL3r+/6epCnZy95+v8Vd2/8kNzoV8sfqfOL+J5
yr5zVu/c+Wt+ffE78/re3foi/uY8O99KT1d23a94mfeg/ncVX2H8zVPs/Plq
43H6/Zs/aP2Zazxdb49xuxr4fvFz8/x8Z6/hF8U7gz68t6/hSxZk7+9HXe9a
duGroM8d4FtK/qr4neJ1Sm9aduUbxQudMZ5o7p+eVxyxvrzVFRuK96l4Y97+
wVbxRfq/1nutz+LRyq58hPIHDxkPV/YAPzrIr/+cBvrp/v0bGP9WvNtjjIcr
+3eNXyue8T7Gs5WdvNFzkb+s4Vel5yteqeJZsos/qve3eKSyk39yEfgl4seu
sPyPeLL5/HRxR/qn+LPKX4lHK/tPjJ+q87l4qrJ/zvgUl1sc8zTjuco+2R9c
ORaOY23jsfr8V/ir4qdelb8f4X+z7Xxa8mNy3OJs/6T9Kvv9VYF90PtT8GN1
vk+raicPjnbWIV5V+9P+7rnXvXr7G1p90q73Gt9vNfsPzd5+9wfLTz1kM/8M
+ud1hlbVzjpgtJ9Tses9uhven9PafZ+G/RntVwV28tBlvybvf2HH/A31GXx/
4vNRs2P+kj77/Xd2wB+L9Q2hT5oG2U+hz1bEx8QHn2e4fD4f0C8q6q9Av2lI
/abdM3z++5fNNZy+7NBvStQXgf5US/0p6C811F8i7r3QnwKunvpLxO1TXwn6
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
lezA7zqOV3bhc/8JdaZlJy78etSXfneu+1DgM1XX7VvQoZCdvFWeL4TfPBx1
EnP/u3Z8S2+d5Mf7b7g+4TZZn1n4y7sMl3eQ4fVkF+7vYtSplN3qEzaqI0l+
1grogrC+/d7AxQmHKbt0IVwnwvB+sl9kuLyrUAdWduE3hducb3hA2fc33B3r
aMou3J1wmcJpyv5Bw83NQ51R2YXLk/+wfuXpwOVdHtQ3p86I7MRdU5+3H9et
n5XDNwCXneu8eh55LHuON/f6KX4+0fVkvxi4c6uv5/b5wF0z/kVct/DeshOX
Tf0/4sq5/gnfzTq/sqs/ih+rv7I/aLhutRfeW/Yr7N9qb/UP3f5O4LpZ/3Jz
4MKFA5ddz2MLnRTZbwRu+xm2HshO3LV0eGS/2dYb4Xo/Z+uR7Fpvclxu51/A
lY/ORHyCuGrhdGXfwJ73t9nz/xxbD2S/0J537c+XQp9I+F7H9f7VZD2SXeuN
cORaj2S/DLhy+s8Vth5cYuvD5bZeeP9sPfmyrS8Lbb2RXc+7nn+tB7JbPSvD
nXQ6QrIDv6t6x96euD7Gjz9geYt5Qf5CuFzhQoXXlV24NeE6hfOUXfVkVWeO
9WXX6sUtdfjAAXBRn4a+vfCfwn0KByq7cFPPR51p2YUPZZ1b2fcG7kk4T9mP
NVyV17fD+nM1cFVXoz7W5PPasXBPs1C/V/hQvT/Oh/4gcVXCgcou/LXyTqyf
tTtw28Jxu/8CN8r8lPzhMNQJlP08w20KZ838Qi3+qHbS0eH8Snfph6gTLjtx
qcKryi789TqG6zQda7cTN8r8vnCjd6DOWT6/aaz5y/GiXX20LVBHTvZafS3i
Qqm/Inyp6oi+2p5X//4rc1zcb4SXM7twb9TBkl34UuFKmV8QPvRh6HzILnzp
POh4yK7xFi70HvDjgS8t8hPC3Qk3Khyp7LX4sHB3mj/qJwp3d7jh7oQj9fmz
5219e/5usedRdq3HquvA/K78dYH5r9XXbmSXvws3LRx1fv04Pr89eA83AF/9
OXteL7ffn2bPs+ys68f6hwvAe9DzJPsG9rwJV32MPY+yk7dAfHY/70E/U9Sf
A65Z/ij70ebPp5l/X2b+Lrvwo8KNyt9lL3DZhkP171/0xM9Ycdgcj71yuA5w
z/Jnb2/ttL9o7Hlw/7XnRbhSrl/rmL/Kf+eaP8t+nvn7V2x877bnIf/+OH/y
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
h7gl6i9B/6ghfxz6YfDzQv+oof4R9IMa6gcRN8X8AfSFGuoLQX+qof4U9Dsb
6nf245b0U+gnNeSn2afXb6f+FPSVGvLLod/XUL+PuCXuD6EP1ZB/D/2shv4F
fayG+ljQn0nkj0I/MVE/cVL/7cqx5mlt8Buhf5aof4b64w3rjxNXRH4D+BeJ
/AvUJ25Ynxj6SkV+C/qlifqlxCWRP4j6zYn8D+hbNNS3QP3mRP/Vevu9A28+
78CbLxvfjvpSqG+eWN8c9Z2HrO9MXNNC8Kegn5JYHwD1qVvWpyYuhPgA6De1
5F/X9NGh39RSv2ny6fpHLfnH0Hcq9H+YFyY/GfpoLfXRmHdVPlZ25nUZf4U+
VEN9KOhnDck/hz5UIn+beWfWZ4M+1JD8a+hfteS3Q/8rcX8NfasiPwX9r5b6
X7XzAfR7E+uTDXpxRfop9F8T61vpL2Wnfi1xSax/Bf3gRP1g6GMX9SmJK2L9
MuKC+utHdrgmro/Qx03UxyXuifrJ0P9N1P+Fvm+ivi/0jxP1j4lLor4x9EVb
1u+CPkyiPgz0VVrqq0AfpqU+DPRVivwRcU2sDwX970T9b+ijDVn/APozifoz
Wm+sjntDfSjozzTUn9F6pvWN/gN9nZb6OtCnGRb1A3J9sZb6YtDPaamfA/yI
40hkX1HBj0B/tYgPQD82UT8W+qst9Veh39uy/t383rxcl/+Gfm/D+nPQ5x2y
/hz0ZxP1Z6FfnVhfFPq6ifq60Kcdsj4b9HUT69tNPl1/uKX+MPR1W9aXg/5w
S/1h6NO05J8SN0T9HeiHJuqHNoY7sDqfifVpqavC8xn0eRL5t8Q9kH8LfaFE
fSHiGvrr87i+UEt9Iej7tdT3031pfqgfBP2zRP0z6Fu01LeAvmnL+m/QF/F4
q+zMC7M+BPQ9Wup7QN+7Zf1U6P+4HozswDc4n1R26M+0rA8AfUHhLwp8g8af
/Fjos7XUZyMujvo8f01eJ/RvoS/UUl+IuDnGv6EvlMjPhj58Yv1c4HNa4lOI
myP/GvpKifUhoE+ZhNORvR83p59Cv68t9Psq+BH5m3ALl6O+NPQ/h6wfA/2c
ttDPeeL8f9pY40Z+NvSpWupTEbdDfrTwDcI1cP2B/mVRvw36PC31eYjbYX14
4vIeQP126FsPqW8NfeZEfWboWzfUt9b46v1+COpzQ386sb4n9JuHrF8J/elE
/Wni9lj/FPrSLfWloc9d+Dfztoy/Ch+xnuEiWF9e+AbhGhaj/vrDwEWwvr96
orzuoahPz7wx668L/yDcA+vXr4u87qGo3/8O5I13R3144R80vzyfQT+4oX4w
9JUb6itDP7jI/6iu+vNt/FlfHfrIhf715NP1h4esPwX95KJ+F/Sji/wFcRX9
+fMOV0H96Bp+BPpkifpkwtUId8H668i7j4jvYF6f9TOgX5dYX4h5d+oTA3/R
8v0JfddEfVfo4zbUx4X+75D6v/24LP0U+r8N64tBf3pI/Wno+7bU94X+cUP9
4xp+hLgW6jdCv62oP0LcDOs/QR86UR8a9VNa1k+5F7gZ+v/twGW9FfoGxH1d
j/r9Wg9z3Es3f1qPdD6bC/0H6Qro/TsX+gLEfa0LfYgafgT6non6nv24ia7/
0O9sqd8JfeWW+srsF89n0O8eUr8b+sZD6htDv7ylfjn0K1vWD7Mb9X0z67/W
8CPEhRT67vb3ev9T/9nqi6WovhjrN7B+tMYT9U99/pi36q+/uUaK9BMUt6rU
D0tR/TDljaL6+sp7RfXTPa//5PXVmkp9taQRCeqrpai+munrjCN9HdM3SZG+
idXXbKL6miPkxZi/t3p86W+evP5hiur7CV8S1W/bD3kp5tetvlwb1ZeTP0b1
yy8FroP5U+JGWP9V/hnpd1yd+19U362J6ruZvkOK9B2EOwnr95v/VerfpUr9
u1Spf5ei+nd7AbdBfSfVr4z0dZSXjeq7Wn3SJqpPSlwH628SN8L6kvLPqL4e
cR/Mn2p9jer/af2s6Ac0Ff2AplL/vonq3xOXQXwXnp9CX0P2Sv3/plL/v6nU
/28q9f+bSH9N9kj/SvaK/kKj3wT6C01Ff6GJ9Bdkr+hPNJH+hPLqT17fPK6v
leetwvrdbVS/W/VRI32dpcjLUT/F6pu3lfrmqVLfvKnUN09RfXPmtQJ9vRTp
mwm/UakfP6zUj2+j+vHCQ0f10ZX32vfJ9SnaSN/A8ZdBffda/l3+Uakv3kb1
xRNwFczf6i8jfR35R6X+elupv54q9debqP762sBVUH9R/hXp36leQKW+vetm
B/Xt26i+vc61Uf12+UekX7IfcB3Uv5D/RPXniYsI9MNSpB8mXEJFfy5V9OdS
RT/N/TLQT0sV/bRU0U9LT64/Knxgqf9I3EagX5cq+nWpol+XKvp1qaLflyL9
Pub1WH91v0r+fYy8OvN/yltV6gt7XWHW75X+MernjmS3+rZtVN/W9BXbSF9R
decr9f+HUf16q78+rNRfb6P64tq/RvVtpa8c6euITxrpsyjeENXnNX23NtJ3
Y31P6ndpvqL60FZ/uY3qL38ceV3WPz4pyxeW9Ym/gbwv9V01f5F+w6XZ/Jf6
Awcg78v6+corR/XhmVdm/s30kdpIH2nymWYifR2t71F95dOAayG+pVZf1XE1
T64/mCL9QeXVUMdjJLvyfpF+runvNRV9x2FF3zFV9B1TpO94IvJ6xM/ckufd
Iv3LNtK/dP2wQJ9R41/R92sr+n4p0vcjroj62TnuqdQv1vhX9BObin5iqugn
pkg/UfvvSD9Q41/Rl2wjfUnimqh/qHWxUr8/Ver3t1H9fuGWIn1t0zdeFukb
604ifR3hKiJ9E+I2qN9B3AbXP9OvayP9OqsrliL9s5xPWeoXrADuKtAXSJG+
wMXZ+JX65MSNEd+ifvXXyXF9mDbSh9H4R/on8u9In8DwsinS/zP9uDbSj9P4
RvoKpn+QIv0D1Uv45JPrt6dIP1v1Kir6TkUeWXbpf0f6OsorRvoxGt9IX8H0
Ewseveymv5ci/T2tH5E+xMHIa1PfnvXJqS9ewxdofCP9pk2R96b+kPSZI30d
5tWZn1XeNdKXNH3CYUWf0PPqzM9uBNwJ8SeT53KfZZPPhXP0b9lfANwF8S/I
y47mA79i+vaJdTpk1/5+OeqAyK77fa7lZQ8BfuXqHJdSnG81PtKV3w34lhfZ
/QlnQXzJ0TYe+edCf3+cAdzN25Df1vjMRx0H2bV/ivTrcX/Nbshv67k7zMZl
PeSv/f7tvndD/lvPTUX/rqno3w0j/bu8HkKp/2b6sk2kL2u6pMNIn1T3F+nX
XQ1cT6Av10T6cup/pK9GXA/1b00/tYn0U9X/SB9O9SIi/TbWr6A+WX/evev/
I8jrU79V+clIX830vYaRvpeuH+n7sm4e8QEan0ifTM9PpI8re6SvKlxBpJ9c
q19R4/8Plh//9d+mR4Zr4FP2PN6lc183P7AP+u0PtcN3vn+Xt2z92LCxz/+u
66+4/Ec7/OFv/8zjcozP1eza/0tfhPsf2U8O7KvY/8I++bxifMbcd9391+f9
dqjP3L58Rr8/HXb156XrnPW5E7Z6eLiJfUb2l/bbw/tbVBmfyf2taeP6kOYb
/rVWeuwrD1wwvnaNZo1/nHzm9zcY9c/zSvcX+RH9J2g/kv3T9vs7zQ8+0z//
Dcdh2uuvbnv9nn4qez7fg8GZmH/N9yn2vZz/2vfLHxbBT6adn1r/NB4nBeMj
f1kAP5p6fM2f1jA/o3/V1g/9X21+ovZTXr/i36+0+1ZcbFX7t14a2nVWs/+j
Ve3/ZP43aCbr07MKe9De+6d2Z9p1aK9dv9a+Nr618Tvy4fuuOWjHR1t93vPv
/2uDL57Zxe9W1z/ufv57PrT7J/+3v5esvykfv8UzZz/rge3T8b9pL33zki2P
fWV3Pph3xhHbrf3g2l3+cPJvt+/3sVt3v3Lwb+2iV819eOuFv2v/dLMLPn7H
3h3+LejfqGL3/tf6d98rt7vu2XvsnCbztEGxvm1j/UE/i/XN1qWWz/9LK/Yt
vvHM3c/4+hrNM9966qv/cYuH2qMm8+jX/yDGbz+M39t+9YlvpVc+zfzjsfY7
o3XOfWSfLv7xObufX9g87oL5w7wU8+MDHjxfJ9u8aXw4f7X259i86DeXYH4W
m/2M0//r5ycztM+z79U8cX6C7x9h/lrNU/B+DNvLb+RH9J/N7PrrB9efZfMu
P+D8236i1TxzfmvzN+3zr0/mX/X7r1yz5ZtW/ua5afIcdfEj7A+K82Nt/7CK
z/co6v9k/Gc3k/W4i7/m9p1Tvg4Xdq3TRf91X9H++tTJ+DQ2Pv792N81nwnG
x/pv69B9Pr54ftMu2XvAzw8N+wn/CPcn9n6ycXlWyt9jK4dfeMIf79d7JU35
fonmDz98/66ZtF+X/V77vi/Y+43Px0u2OXaX//OJX9nn09KLJ5/evnb/tfHT
vvOUqfbPZf/5fHL9rp3/fECD9dP8ztt/B88n16Uz4P95/8v1Tc8F2qdVaz/b
25/W/3x6/zi+P7X5EQ5rIeZHzx3u369v+xe/foPnR88d+ufjJ7/Hc9Dk/X+o
PcI+F2D+8/VkMODzpfFaHOxPvpW3H52O9ovtfYB9gPd/rcn7xfeJes/ILv9e
FPi3+FlLzK803rKfjPaL0L62v71t/x/fsMm8p6fJ87WynbyPZ/H6Cf3E+Asv
6M+h27Vu3G3zxvVDPYn819aTtKGtM1xfau1r8RuN2ymBvfZ+5f6a6wvGZ8Dx
wf5qzP2V/Ep+Rv+a98TPjeNvmJ+eBv+U361tfkj/U7/sHFW8f75k93XclPEv
+sdi81uNW7//rmzlh/S/4Pw14Pzk897Z+Xv2v/Z85+vBYGDnGB9/xDdGjG/U
vj8/z+n5WS/6/hG/H+0HbF/zv8lnmtH38PqbI/7D+JHibTvncbguv2r+ZuvA
0M5Zbt8P7+X+93vcP507TrFzh52D3K7zs8Ypen7nPen31+Kv8fvXns+Z6PnM
/34wCu5/rPs/h/f/xM/14zfY/R2B+c/7V+6PrP1M1N7WD56T/fu1Hr8k++zw
GRvb+Wvj4PxVi99oPbD1webH64oOD7f5/Ibta+61/Q7aJ7XTdWSvxb/lF4gD
dO3N7xCn8PZcPzh/uv684PryW8SBkuzq7x8H8Q3dr8aR4xfEx3z89fcaR46f
nZc8/3cfxr+WH+D+hfba+Oj3HwyeX+0X78nOMfdH62ex/tp7N2l9s/cx5uex
ocUFEu26br7+/N7zOYlHKy6dLB9SXB/rq++v33P3Zx//7+LxTX9/6uP/nT+z
MFuHyvWF5xucr4r4g87Pn0WeZNr2te8/HOeu23D9WnvE/4L15bfD/L2sn3r7
l253yOP/XT+z+y8uefy/22Y+GeRfouvX+q/35RHIc8j+JTw3x2N8T8b4n8Lx
/0fk1SwPkn9/HB8I9u9FfCdqP238Ae93nh/5/vbxCeKP3j54v099/zU7z/en
B+dzvL+9f0F+zu3B/sbtG8FvX4r2wf7L7Qf077+8/8H5w9tjQAL/furj22Df
n59jy/11//f7uXc0RPyB37ia8dGi/6fjvRrFH6Lv576I8VOs/2Ou/7Xvx/VH
vH5t/BlX4Pgy76T9vuzKt2v/eZ89797enmfmgTB+3j2On563S7APm7Y9807M
r9Sur+cxyp/b+2UcvV/OQl7sF7beTNt/iz+13MfLvin2jRv0n+88r6X1IJrf
fTG/teeD77dCPxhxF94f44KKF8qO+LrOGbX+jabtfz7ua1p8tOPPIj7eKJ4l
O+LrQ75fa/dfGz/idqL9mfo/Qv85v/OC+T07j08Wdl0n2v+pjgz3f7Ansze8
/lOdvzyufl/L8wvj7orHB3bPcwXj0zL+xbg7z3fYf6c7g/tX3krxdNmxvja2
vrq9lv/QeQP4G/dP5qX0PMqu+Ht0vg/sPn/6t/ZPi7F/moW4Jp8f7VtwfvP7
l19pXpYgf8Pna1Hl+aId788R35+MeyoeKrvyvt/J46g+PwP80A58RTG/8ucI
f5HPR/l+UbzlW3kcIGpf9K+2vjHvS7uNj+edaFf+Kc+DFP1P1v9ifGv5D+Z9
iA+o7Q+YF2J8bRKf+9n4W/Z8fBXni4l9yQziOG6v9V/xfZwv3Y51Pchvd3kj
+bPsC8zfFZ/YCftD4KeG/fk9xi278dP7NIo/5n9f+m/NXsO/Tov/1bitwPo9
3fk0vv/a+22jSnxD9624JPOf9MsAH+NxjH787bXCfxXX3x9xPebPGFclvkjx
Aa3jQ+CrGDckPqf2ftL45OPW2YP4z0j2/rh9gT9EXHD671/d6wf+5e317whf
rvh/lJ/Vcx3lH+1804jndybOpxvhfLIxzieMazM+7bw+e0+dCfwD49qMj9v6
OxOtv/l4heuLP1/M79bmd/K5Yqy8zBt78Z/x/t3az0Tta/kPjcspeR7A+78p
1pUNEH+qxRc4b5qPvH23Ly/eP8j78XzOvB7jD8HzM5i2PfOKdyN+wfcr37/M
S/D9V3t+FyPvQHxA7fy3P+6P5zuun1yfG+RFlAfx75/UX5+xfUDD9dnzH5b3
8DyI2QP8GeM/If48yN8X8VXioKe9fpCfStO2D/J7Pr76N/CT3fji+WX8uPb9
Qf7yKY8v49tB/tjtwfrD+D3zr37/Af6q6L/6x/FFfL3l/ffH7bv7576N60Pt
+5nX4PpRa8+4P9fvIH7h/cP6GeHHw++vjY/Fp2cUn16A9tgfFPg43h/xJzjf
tzzfTzs//Ti5Yv1KQf4gfD5q47eK7cP9RT+OorNrX3U63r/B949W9fv/p/pv
59txP05h6vmzvMh6lsfv5i/fNz3UMr6l9/WXg/cn486MfwH/1kTx0Qif33+u
7+YnOJ/59wOfUMTvg+v7/NXWd8YFiH/mvqcWP+P4At/UHIH5ZdyB8TPGJZkf
qOHTlU/TvPwU8WnGvTl/yL+2jO8E+T2/PvZXBf+ktv7Wrs/75/4U8bVSv6zS
nnFNxocmn36+SW/E85n7p/Mj0D5efxh34fwE59fa9UeyK28T4SOm618X1+H5
rdZ/Pl9R/id6/nju5/fz/RnkfxLWMe9fPl7l+w/4wcT4nfYHEb8S1w/wBzwX
d+Nf619tfRD+EPmrqdvXzg+1/jOv1v/+6OLyzG8JryL7vchv9Y9r5/+K31Ty
06H/L0bcPsiPhf7FvADXp7MQ12d+bCfkBe5Cfox5v2h8ybNB+ybiJ+bjGe+P
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
dn3OG8cn0Jd1e+39Wrv+AD/B+hSu/zq/UEcvuP8B7z/gx3T96+e/ePuA/1L4
Zx6n7/K7Af8H9xfHpwP9g4bfH41voM/g9kCfIZrfaP0N7QG+0scvwPd6+xo+
NcCPevuAH9Pk1+/4Ccyv1c4nAT7W20/LTwM/p8s/9fMjCv/TJ/sX4KtXdX7d
THu1vlM/v2lVv5/8CH8+Av5JZ+/nf/n1p81/RfH5/nNRmZ+P7IyLRvUrK/Ub
n/L3My7aX9+waD+Y1o78bFSfMRz/QF87Op82vL8A31Br7/0P8A/evwC/gfh9
kf/29gE+w9sH+MF22vaB/l2Rn0b9CB8/4P+GkT57VF8I4xfUz+n2xcwPAd9Q
1J8A/quoL8h9cZSfj+pnoC5EMT6bwz/pX7X4c6Bv6Hbdd1RfaPK53Ou7cX0M
9Bn9+t/CvDM+FegHuz3QZy38Px+3MH9QjL/2c5X6UCn/fbj+Fd//33z9wl7z
r6C+eBc/rsTnp7u/wu7fj/rNRXx4Fa9f3D/wNcNIH65Sf47105v8+4v68H79
oD63Xz+o/+72QJ/E7YH+Q9T/qP5bE9V/m84/1/TfM3/CuD/zI9DPKOq7TTv/
0fvtKe4fiutH9dNq8fnV9d8aPgv+U9SPZV4xiu9H9Ydq44f3f1Eftxafr+FT
Av6Sj3/Av/D3U4B/6+bP9Nugv4f7L/Bvfv0An+nXD/CFfv0A/+fjV8Pf1+4v
GP+p7Ty/B/Xp/GdEO3BpxBdj/Ar+NfC5BX8T/KECnwj8bTF+Nfuf9OOvmrx9
Vz+M+oKBfpzff5A/K+LbET8/zyuW/PQgP8r4o5/LyR+VP0XxgwB/4t9fW/8C
/S9vH6xfU1+/Zg/eT7XrD6a1B/t/xv8btY/0P3VFPl+ru/8ibqK//sdTv/+A
P+PXJ24mqN9CfQxvH+i7ePva/QX6Idh/xvorgT4Vvt/3h1H9lBTVT4G+TPH9
0Acs8Ie19tBXK+qj1PxL81ep38H2g2ntxL8zPwN9vOL9sLrfT9wG63vg/FTU
X6uNP/RnC35qrX+ILxX15YL324jjy3NeZN83sBOnvap27qNpB7+lsEfx8YA/
UeS/o/xHf169G3+OD/NHQf0Dtwf8frfrm/pxbiH/v2vfX7/A7UF9Ah+/oD6B
z19Qv8Gvz3WT+SnkFxrmF4BfaIL6F375IP/aQp/Yvx/x+ZkgPxBeH/iWIr5V
a1+z8/kJ8tNh/DngryM/XPDvi/wxcaiy43xc4A+C+gPDqH/Mb+v30Bf37w/4
T95+Ov5zwR/z6wf8ruL+iZPMrx/vf9ST6PnO+7vq/iNDhP8f8AKreP2Av+j9
r8Vnavy4gP+/yv4T9b+m3xDUR5h6fAL+4lMd/8Jee7/V8jNBfYni+tH+APoV
xfk4wJe6vf++qvh7twf469W9/kD2gN8Trb9Fe+JGeP6v8U9QP9JwGL93Pszr
2zQ8H00+vX5Mw/oxqH+TWP8G9X+K+Dzq2xT4iTx+1sWJ/f4q+0P9ZX8eLIw/
evsg/o/4YBF/9usH8V+/vyC/3OTXj/Mv+b9Lfjnyr4X+bD8urLs+cWms34L3
c8EfDs4/adrv9xsLnj/EX5sg/vGU+VH6P9RHm/r6tfNJ7f5q1w/Ob1OvL+DX
J/Lridvh+XTa+iarOL9uR/2AAt9Ua187n033/XF8N8jfNNPagb9a5fbqPuJM
U9vvzep7Plrsf8nL5Ppcs0N/tuH6G/Cfi/uP7AE/urh/zRjtQX66sO8b2Hnf
wfyG9WkD/np4/0H9g6p/gN/j9hr/LeBf0T8YP/HrB/xqtwf81qnvD/qBRfwC
+nbF+R36nsX+H3V5Cn4z6ioV/AKNR3R+0fyE638//7CY38r7K7y+9gURvr/a
v8xeW39q7aP+F/z62vvNr197vgN+qNuD+gQNrs/999T3H9QvmHr8g/oGqTI+
Pr4BPtT7D35Rsf6s6vuL7afF/+s5Jb4Y+PIhn2/w25qA3+brFp9P4EobPt8c
H/KvausX+GXF+Vj3n7fr5o9+Tf9jfbJA/9ntUXwgwqecjPlnfB38hCJ+DHx1
FD8d5f5R5sei+hK19jU79EeC+IDrYxTnY+jLFPtf+hXxWahPXvCrFsJvuX/P
76tcn2v+A1xsw/6Dn1L4D3Bxtf1ZOD/9ebBV5u+U8fEcFxzyl2v9i+y1/XHt
+UL/o/hddf8crT+rm98M8H9P9fqDfnuBr2b+L9wfI240ov8j/9304ysKfGJx
f1H9mry+ybOK+FOtfYDP8/YB/rXAh9TwwVF9u4Bf0eT9K/Dtqzj/9fEd9P7U
8Y8Bvp7x03B/uLr+G/AP/PsDfK1/f8Cfcbv61b9O1/sX8BuS7LX9Ye3547mR
70+s6w37p7ge6vt6e54b+f4EvqOozwl8ZfH8AT9dnE/736td/2t2rA9Ffi3A
pxTzy3Vk2vmn33P/ubrPXxA/LNZXrtOr+f1uD+KPfn3eN/H7Ab7K7Yo/I7/i
9lr/au//AN/aVPof2gP8TTPo/anr67Lf0fmgsv9pIvzLdO8Hf79hnIv1vVi/
gE8I4zP6pJ1+/d+9f6zxP9A+yv+G9tr81fYn014/8s/++9ZP3R7g56aOn9TW
52B9xPgU+FC374RzEfOjtfur4f9q7QN85dTfX3u/BO+vhu3zcS+vH9mD/GJt
fr19gG9dRf+I12/9X9Q+4Bf49wf7i8T+9X/PtPGRuP9Bfpj4DvI3cP0Cn8z8
WvX5Du+vn//h1///mjM2kg==
   "], $CellContext`vertices0$$ = {{0.5, 0.5, 0., 1.}, {0.5, -0.5, 0., 
   1.}, {-0.5, 0.5, 0., 1.}, {-0.5, -0.5, 0., 1.}, {0.5, 0.5, 0.2, 1.}, {
   0.5, -0.5, 0.2, 1.}, {-0.5, 0.5, 0.2, 1.}, {-0.5, -0.5, 0.2, 
   1.}}, $CellContext`l0$$ = 1, $CellContext`V100$$ = 
   0.043752329739829225`, $CellContext`L$$ = 
   11.427962875879341`, $CellContext`relativeOn$$ = 
   False, $CellContext`infty$$ = False, $CellContext`opacity$$ = 
   1, $CellContext`boxed$$ = 
   True, $CellContext`planeChoice$$, $CellContext`n1$$ = 
   1, $CellContext`n2$$ = 0, $CellContext`n3$$ = 0, $CellContext`cutOn$$ = 
   False, $CellContext`drawCutPlane$$ = False, $CellContext`cutPosition$$ = 
   0.1, $CellContext`previewNum$$ = 15, $CellContext`Num$$ = 
   100, $CellContext`tMin$$ = 0.0001, $CellContext`t$$ = 
   80, $CellContext`\[Alpha]1$$ = 3.2, $CellContext`\[Beta]1$$ = 
   2.1, $CellContext`\[CapitalDelta]100posz$$ = 
   0, $CellContext`\[CapitalDelta]100Lateral$$ = 
   0, $CellContext`\[CapitalDelta]100posx$$ = 
   0, $CellContext`\[CapitalDelta]100negx$$ = 
   0, $CellContext`\[CapitalDelta]100posy$$ = 
   0, $CellContext`\[CapitalDelta]100negy$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]posz$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]negz$$ = 
   0, $CellContext`\[CapitalDelta]\[Alpha]z$$ = 
   0, $CellContext`\[CapitalDelta]\[Alpha]negyposx$$ = 
   0, $CellContext`\[CapitalDelta]\[Alpha]negynegx$$ = 
   0, $CellContext`\[CapitalDelta]\[Alpha]negxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]posy$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]negy$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]negx$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]lateral$$ = 
   0, $CellContext`\[CapitalDelta]\[Alpha]posxposy$$ = 
   0, $CellContext`\[Gamma]1$$ = 
   4, $CellContext`\[CapitalDelta]\[Beta]posx$$ = 0, $CellContext`mult100$$ = 
   1, $CellContext`mult\[Alpha]$$ = 1, $CellContext`mult\[Beta]$$ = 
   1, $CellContext`mult\[Gamma]$$ = 1, $CellContext`ds$$ = {
   0, 0.2, 0.5, 0.5, 0.5, 0.5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2}, $CellContext`ds1$$ = CompressedData["
1:eJxTTMoPSmVkYGDwYkCAWTNB4KQ9hPcAJ63MtbZtqvYznLSs8QTX5ZWPcNIB
b+v6V629D6fPWNenzVvwDI1/DS4O46OrR1WHUH/95u7ED/fv2R9RNXT+avkU
TqtliNp+876MUxxCP8ZQBxOH8WHmw8TR7SOkHt0eDHGXAzEmi27Yy1+YueHb
lsdwGiJ+Aqc4LHzR1cHEUdXfQFN/g2j16PagiwMAdUYU4w==
   "], $CellContext`tiltAngles$$ = CompressedData["
1:eJxTTMoPymNiYGDwAmIQPQpGATUBAL3xAgE=
   "], $CellContext`normals$$ = CompressedData["
1:eJx1kGEKgDAIha2xg3SdfnaEDlD3Z4xqMOnjoQ/E6dOnczvv41rNbP+s2I/n
g7+XaRFnCbfARi6KnwnlyDNH6IwoNpltosn9VdfrqMOabJeSeFqf2up5A3K8
icfa6zn+d7y5B3VKwLNHb1+Eo56jJ5471cTT2qxXz3+R4wyPtddzeh/uQZ0a
8OzR+1ThqOdoiR94Ad3pjOg=
   "], $CellContext`tiltedNormals$$ = CompressedData["
1:eJx1kGEKgDAIha2xg3SdfnaEDlD3Z4xqMOnjoQ/E6dOnczvv41rNbP+s2I/n
g7+XaRFnCbfARi6KnwnlyDNH6IwoNpltosn9VdfrqMOabJeSeFqf2up5A3K8
icfa6zn+d7y5B3VKwLNHb1+Eo56jJ5471cTT2qxXz3+R4wyPtddzeh/uQZ0a
8OzR+1ThqOdoiR94Ad3pjOg=
   "], $CellContext`calcTilt$$ = Hold[
    If[
     Not[$CellContext`infty$$], 
     Part[$CellContext`ds$$, 4] = Part[$CellContext`ds$$, 3]; 
     Part[$CellContext`ds$$, 6] = 
      Part[$CellContext`ds$$, 5]; $CellContext`allNormals$$ = 
      Join[$CellContext`tiltedNormals$$, 
        Complement[$CellContext`normals$$, $CellContext`tiltedNormals$$, 
         SameTest -> (Chop[
            Norm[# - #2]] == 0& )]]; $CellContext`ds1$$ = 
      Join[$CellContext`ds$$, 
        Table[
        20000000000, {$CellContext`i, 1, Length[$CellContext`allNormals$$] - 
          Length[$CellContext`normals$$]}]]; $CellContext`pts0$$ = 
      MapThread[#2 (#/
         Norm[#])& , {$CellContext`allNormals$$, $CellContext`ds1$$}]; \
$CellContext`planes0$$ = MapThread[Append[-#, 
         Dot[#, #2]]& , {$CellContext`allNormals$$, $CellContext`pts0$$}]; 
     Quiet[$CellContext`nodes0$$ = $CellContext`testPlanesParallel[
         Subsets[$CellContext`planes0$$, {3}]]]; $CellContext`vertices0$$ = 
      DeleteDuplicates[
        Select[$CellContext`nodes0$$, Chop[
           Min[
            Dot[$CellContext`planes0$$, #]]] >= 0& ], Chop[
          Norm[# - #2]] == 0& ]; $CellContext`pts0$$ = Table[
        Most[
         Part[$CellContext`vertices0$$, 
          Part[
           Ordering[
            Dot[$CellContext`vertices0$$, 
             Part[$CellContext`planes0$$, $CellContext`i]], 1], 
           1]]], {$CellContext`i, 1, 
         Length[$CellContext`planes0$$]}]; $CellContext`ds1$$ = 
      MapThread[
       Dot[#, #2]/
        Norm[#]& , {$CellContext`allNormals$$, $CellContext`pts0$$}]; 
     Null, $CellContext`tiltedNormals$$ = $CellContext`normals$$; \
$CellContext`allNormals$$ = $CellContext`normals$$; $CellContext`ds1$$ = \
$CellContext`ds$$; Null]], $CellContext`calcSection$$ = 
   Hold[$CellContext`timePolygon2D$$ = {}; $CellContext`n$$ = 
     Normalize[$CellContext`n$$]; If[
      And[
      Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
       Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
      Normalize[{0, 0, 1} - 
        Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
      If[
       Or[Abs[
          Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
        0], $CellContext`projX$$ = 
        Normalize[{0, 1, 0} - 
          Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
       Null, $CellContext`projX$$ = 
        Normalize[{1, 0, 0} - 
          Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; If[Total[
        Cross[$CellContext`n$$, $CellContext`projX$$]] < 
      0, $CellContext`projY$$ = 
      Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
      Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
     Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
       ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
     1; $CellContext`timeStepLines$$ = Append[
       Range[$CellContext`tMin$$, $CellContext`t$$, $CellContext`timeStep$$], \
$CellContext`t$$]; $CellContext`timingTest$$ = {}; 
    If[$CellContext`constantVelocity$$, 
      Module[{$CellContext`i$, $CellContext`poly$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
          
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
           1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`polygons2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             #["colors"]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`polygons$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             #["colors"]]& )[$CellContext`poly$]]; Decrement[$CellContext`i$]; 
          Null]; If[
         Last[$CellContext`polygons$$] == {}, 
          AppendTo[$CellContext`timeStepLines$$, 
            
            Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
             2]]; $CellContext`timeStepLines$$ = Sort[
             
             Select[$CellContext`timeStepLines$$, # >= 
              Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; Null]; 
        Null]; Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeStepLines$$] - 
          1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`L$$, 
            
            Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
             1], $CellContext`allNormals$$], 
           If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; While[
          
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
           1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          Decrement[$CellContext`i$]; 
          Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`L$$, 
            Part[$CellContext`timeStepLines$$, 1], $CellContext`allNormals$$],
            If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
      Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
           And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1], 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
              Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`polygons2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              #["colors"]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`polygons$$, 
              ($CellContext`polygon3D[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                 #["vertices"], 
                 #["face"]], 
               #["colors"]]& )[$CellContext`poly$]] 
            Decrement[$CellContext`i$]; Null] 
         If[Last[$CellContext`polygons$$] == {}, 
           AppendTo[$CellContext`timeStepLines$$, 
             
             Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
              2]]; $CellContext`timeStepLines$$ = Sort[
              
              Select[$CellContext`timeStepLines$$, # >= 
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; Null]; 
        Null]; Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeStepLines$$] - 1; 
        Quiet[$CellContext`tempVelocity$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
           Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
            1]]; $CellContext`tempL$ = $CellContext`l0$$/(
          2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`tempL$, 
            
            Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
             1], $CellContext`allNormals$$], 
           If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; While[
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
             Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          Decrement[$CellContext`i$]; Null]; 
        Quiet[$CellContext`tempVelocity$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              Part[$CellContext`timeStepLines$$, 1]}]/
           Part[$CellContext`timeStepLines$$, 
            1]]; $CellContext`tempL$ = $CellContext`l0$$/(
          2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`tempL$, 
            Part[$CellContext`timeStepLines$$, 1], $CellContext`allNormals$$],
            If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]]; 
      Null]; $CellContext`textX$$ = Max[
       Part[
        Part[
         Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
        1]]; $CellContext`textY$$ = Max[
       Part[
        Part[
         Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
        2]]; $CellContext`timePolygonColor$$ = Which[
       Or[Sort[
          Abs[$CellContext`n$$]] == {0, 0, 1}, 
        RegionMember[
         ConvexHullRegion[{{
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 0.}, {
            Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {-
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 0.}, {-Part[$CellContext`ds$$, 3], -
            Part[$CellContext`ds$$, 5], 0.}, {
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {
            Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}}], Part[
           Part[
            Last[$CellContext`timeStepLines3D$$], 1], 1] - {0.01, 0.01, 0}]], 
       Darker[
        GrayLevel[0.7], 0], Sort[
         Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
       Darker[
        Lighter[Magenta, 0.4], 0], Sort[
         Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
       Darker[
        Blend[{Yellow, Green}, 0.7], 
        0]]; $CellContext`timePolygon2D$$ = {$CellContext`timePolygonColor$$, 
       Polygon[
        Part[
         Last[$CellContext`timeStepLines2D$$], 
         1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
       Polygon[
        Part[
         Last[$CellContext`timeStepLines3D$$], 1]]}; 
    Null], $CellContext`calcCutOff$$ = Hold[If[
      Not[$CellContext`individualGrowthFactors$$], $CellContext`f00neg1$$ = 
       1 + $CellContext`\[CapitalDelta]100negz$$; $CellContext`f00pos1$$ = 
       1 + $CellContext`\[CapitalDelta]100posz$$; $CellContext`fpos100$$ = 
       1 + $CellContext`\[CapitalDelta]100posx$$; $CellContext`fneg100$$ = 
       1 + $CellContext`\[CapitalDelta]100negx$$; $CellContext`f0pos10$$ = 
       1 + $CellContext`\[CapitalDelta]100posy$$; $CellContext`f0neg10$$ = 
       1 + $CellContext`\[CapitalDelta]100negy$$; \
$CellContext`fpos1pos1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]posxposy$$); \
$CellContext`fneg1pos1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Alpha]negxposy$$); \
$CellContext`fpos1neg1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Alpha]negyposx$$); \
$CellContext`fneg1neg1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Alpha]negynegx$$); \
$CellContext`fpos1pos1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]posxposy$$); \
$CellContext`fneg1pos1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]negxposy$$); \
$CellContext`fpos1neg1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]negyposx$$); \
$CellContext`fneg1neg1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
         1 + $CellContext`\[CapitalDelta]\[Alpha]negynegx$$); \
$CellContext`f0pos1pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posy$$) 
        1; $CellContext`fpos10pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posx$$) 
        1; $CellContext`fpos1pos10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Beta]posxposy$$); \
$CellContext`f0neg1pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negy$$) 
        1; $CellContext`fpos10neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posx$$) 
        1; $CellContext`fpos1neg10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Beta]negyposx$$); \
$CellContext`f0pos1neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posy$$) 
        1; $CellContext`fneg10pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negx$$) 
        1; $CellContext`fneg1pos10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Beta]negxposy$$); \
$CellContext`f0neg1neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negy$$) 
        1; $CellContext`fneg10neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
         1 + $CellContext`\[CapitalDelta]\[Beta]negx$$) 
        1; $CellContext`fneg1neg10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Beta]negynegx$$); \
$CellContext`fpos1pos1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Gamma]posxposy$$); \
$CellContext`fpos1pos3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$); \
$CellContext`fpos3pos1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$); \
$CellContext`fpos1pos1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]posxposy$$); \
$CellContext`fpos1neg3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$); \
$CellContext`fneg3pos1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$); \
$CellContext`fpos1neg1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$); \
$CellContext`fpos1neg3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$); \
$CellContext`fneg1pos1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]negxposy$$); \
$CellContext`fneg1neg3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$); \
$CellContext`fneg3pos1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$); \
$CellContext`fneg3neg1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$); \
$CellContext`fpos1neg1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$); \
$CellContext`fpos1pos3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$); \
$CellContext`fneg1pos1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Gamma]negxposy$$); \
$CellContext`fneg1pos3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$); \
$CellContext`fpos3pos1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$); \
$CellContext`fpos3neg1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$); \
$CellContext`fneg1neg1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$); \
$CellContext`fneg1pos3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$); \
$CellContext`fpos3neg1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$); \
$CellContext`fneg1neg1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$); \
$CellContext`fneg1neg3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$); \
$CellContext`fneg3neg1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$); \
$CellContext`fpos1pos1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Delta]posxposy$$); \
$CellContext`fpos1pos5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$); \
$CellContext`fpos5pos1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$); \
$CellContext`fpos1pos1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]posxposy$$); \
$CellContext`fpos1neg5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]posxneg5y$$); \
$CellContext`fneg5pos1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg5xposy$$); \
$CellContext`fpos1neg1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]posxnegy$$); \
$CellContext`fpos1neg5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]posxneg5y$$); \
$CellContext`fneg1pos1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]negxposy$$); \
$CellContext`fneg1neg5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$); \
$CellContext`fneg5pos1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg5xposy$$); \
$CellContext`fneg5neg1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$); \
$CellContext`fpos1neg1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Delta]posxnegy$$); \
$CellContext`fpos1pos5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$); \
$CellContext`fneg1pos1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Delta]negxposy$$); \
$CellContext`fneg1pos5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]negxpos5y$$); \
$CellContext`fpos5pos1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$); \
$CellContext`fpos5neg1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$); \
$CellContext`fneg1neg1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
        1 (1 + $CellContext`\[CapitalDelta]\[Delta]negxnegy$$); \
$CellContext`fneg1pos5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]negxpos5y$$); \
$CellContext`fpos5neg1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$); \
$CellContext`fneg1neg1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]negxnegy$$); \
$CellContext`fneg1neg5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$); \
$CellContext`fneg5neg1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
         1 + $CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$); \
$CellContext`factorList$$ = {$CellContext`f00neg1$$, $CellContext`f00pos1$$, \
$CellContext`fpos100$$, $CellContext`fneg100$$, $CellContext`f0pos10$$, \
$CellContext`f0neg10$$, $CellContext`fpos1pos1pos1$$, \
$CellContext`fneg1pos1pos1$$, $CellContext`fpos1neg1pos1$$, \
$CellContext`fneg1neg1pos1$$, $CellContext`fpos1pos1neg1$$, \
$CellContext`fneg1pos1neg1$$, $CellContext`fpos1neg1neg1$$, \
$CellContext`fneg1neg1neg1$$, $CellContext`f0pos1pos1$$, \
$CellContext`fpos10pos1$$, $CellContext`fpos1pos10$$, \
$CellContext`f0neg1pos1$$, $CellContext`fpos10neg1$$, \
$CellContext`fpos1neg10$$, $CellContext`f0pos1neg1$$, \
$CellContext`fneg10pos1$$, $CellContext`fneg1pos10$$, \
$CellContext`f0neg1neg1$$, $CellContext`fneg10neg1$$, \
$CellContext`fneg1neg10$$, $CellContext`fpos1pos1pos3$$, \
$CellContext`fpos1pos3pos1$$, $CellContext`fpos3pos1pos1$$, \
$CellContext`fpos1pos1neg3$$, $CellContext`fpos1neg3pos1$$, \
$CellContext`fneg3pos1pos1$$, $CellContext`fpos1neg1neg3$$, \
$CellContext`fpos1neg3neg1$$, $CellContext`fneg1pos1neg3$$, \
$CellContext`fneg1neg3pos1$$, $CellContext`fneg3pos1neg1$$, \
$CellContext`fneg3neg1pos1$$, $CellContext`fpos1neg1pos3$$, \
$CellContext`fpos1pos3neg1$$, $CellContext`fneg1pos1pos3$$, \
$CellContext`fneg1pos3pos1$$, $CellContext`fpos3pos1neg1$$, \
$CellContext`fpos3neg1pos1$$, $CellContext`fneg1neg1pos3$$, \
$CellContext`fneg1pos3neg1$$, $CellContext`fpos3neg1neg1$$, \
$CellContext`fneg1neg1neg3$$, $CellContext`fneg1neg3neg1$$, \
$CellContext`fneg3neg1neg1$$, $CellContext`fpos1pos1pos5$$, \
$CellContext`fpos1pos5pos1$$, $CellContext`fpos5pos1pos1$$, \
$CellContext`fpos1pos1neg5$$, $CellContext`fpos1neg5pos1$$, \
$CellContext`fneg5pos1pos1$$, $CellContext`fpos1neg1neg5$$, \
$CellContext`fpos1neg5neg1$$, $CellContext`fneg1pos1neg5$$, \
$CellContext`fneg1neg5pos1$$, $CellContext`fneg5pos1neg1$$, \
$CellContext`fneg5neg1pos1$$, $CellContext`fpos1neg1pos5$$, \
$CellContext`fpos1pos5neg1$$, $CellContext`fneg1pos1pos5$$, \
$CellContext`fneg1pos5pos1$$, $CellContext`fpos5pos1neg1$$, \
$CellContext`fpos5neg1pos1$$, $CellContext`fneg1neg1pos5$$, \
$CellContext`fneg1pos5neg1$$, $CellContext`fpos5neg1neg1$$, \
$CellContext`fneg1neg1neg5$$, $CellContext`fneg1neg5neg1$$, \
$CellContext`fneg5neg1neg1$$}; 
      Null, {$CellContext`f00neg1$$, $CellContext`f00pos1$$, \
$CellContext`fpos100$$, $CellContext`fneg100$$, $CellContext`f0pos10$$, \
$CellContext`f0neg10$$, $CellContext`fpos1pos1pos1$$, \
$CellContext`fneg1pos1pos1$$, $CellContext`fpos1neg1pos1$$, \
$CellContext`fneg1neg1pos1$$, $CellContext`fpos1pos1neg1$$, \
$CellContext`fneg1pos1neg1$$, $CellContext`fpos1neg1neg1$$, \
$CellContext`fneg1neg1neg1$$, $CellContext`f0pos1pos1$$, \
$CellContext`fpos10pos1$$, $CellContext`fpos1pos10$$, \
$CellContext`f0neg1pos1$$, $CellContext`fpos10neg1$$, \
$CellContext`fpos1neg10$$, $CellContext`f0pos1neg1$$, \
$CellContext`fneg10pos1$$, $CellContext`fneg1pos10$$, \
$CellContext`f0neg1neg1$$, $CellContext`fneg10neg1$$, \
$CellContext`fneg1neg10$$, $CellContext`fpos1pos1pos3$$, \
$CellContext`fpos1pos3pos1$$, $CellContext`fpos3pos1pos1$$, \
$CellContext`fpos1pos1neg3$$, $CellContext`fpos1neg3pos1$$, \
$CellContext`fneg3pos1pos1$$, $CellContext`fpos1neg1neg3$$, \
$CellContext`fpos1neg3neg1$$, $CellContext`fneg1pos1neg3$$, \
$CellContext`fneg1neg3pos1$$, $CellContext`fneg3pos1neg1$$, \
$CellContext`fneg3neg1pos1$$, $CellContext`fpos1neg1pos3$$, \
$CellContext`fpos1pos3neg1$$, $CellContext`fneg1pos1pos3$$, \
$CellContext`fneg1pos3pos1$$, $CellContext`fpos3pos1neg1$$, \
$CellContext`fpos3neg1pos1$$, $CellContext`fneg1neg1pos3$$, \
$CellContext`fneg1pos3neg1$$, $CellContext`fpos3neg1neg1$$, \
$CellContext`fneg1neg1neg3$$, $CellContext`fneg1neg3neg1$$, \
$CellContext`fneg3neg1neg1$$, $CellContext`fpos1pos1pos5$$, \
$CellContext`fpos1pos5pos1$$, $CellContext`fpos5pos1pos1$$, \
$CellContext`fpos1pos1neg5$$, $CellContext`fpos1neg5pos1$$, \
$CellContext`fneg5pos1pos1$$, $CellContext`fpos1neg1neg5$$, \
$CellContext`fpos1neg5neg1$$, $CellContext`fneg1pos1neg5$$, \
$CellContext`fneg1neg5pos1$$, $CellContext`fneg5pos1neg1$$, \
$CellContext`fneg5neg1pos1$$, $CellContext`fpos1neg1pos5$$, \
$CellContext`fpos1pos5neg1$$, $CellContext`fneg1pos1pos5$$, \
$CellContext`fneg1pos5pos1$$, $CellContext`fpos5pos1neg1$$, \
$CellContext`fpos5neg1pos1$$, $CellContext`fneg1neg1pos5$$, \
$CellContext`fneg1pos5neg1$$, $CellContext`fpos5neg1neg1$$, \
$CellContext`fneg1neg1neg5$$, $CellContext`fneg1neg5neg1$$, \
$CellContext`fneg5neg1neg1$$} = $CellContext`factorList$$; 
      Null]; $CellContext`timePolygon2D$$ = {}; $CellContext`timePolygon3D$$ = \
{}; If[$CellContext`constantVelocity$$, $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 10^(-3), 
      Quiet[$CellContext`V100$$ = 
       NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
           If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
        If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]]; 
    Quiet[$CellContext`L$$ = $CellContext`l0$$/(2 $CellContext`V100$$)]; 
    Quiet[$CellContext`velocityPlot$$ = 
       Plot[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 
         10^(-3), {$CellContext`x, 0, $CellContext`t$$}, 
         AxesLabel -> {"time (hr)", "Growth Velocity (mm/hr)"}]; 
      Null]; $CellContext`timeStepLines3D$$ = {}; $CellContext`pts$$ = \
$CellContext`pts1[$CellContext`infty$$, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$]; $CellContext`p$$ = \
$CellContext`polyhedron[$CellContext`allNormals$$, $CellContext`pts$$]; \
$CellContext`vertices$$ = $CellContext`p$$[
      "vertices"]; $CellContext`faces$$ = $CellContext`p$$[
      "faces"]; $CellContext`v$$ = 
     Length[$CellContext`vertices$$]; $CellContext`f$$ = Count[
       $CellContext`p$$["faces"], 
       Except[{}]]; $CellContext`e$$ = $CellContext`v$$ + $CellContext`f$$ - 
      2; $CellContext`downP$$ = \
$CellContext`polyhedron[$CellContext`allNormals$$, 
       Map[$CellContext`param1[#, 
          $CellContext`d[#], $CellContext`infty$$, $CellContext`L$$, \
$CellContext`t$$] #& , $CellContext`allNormals$$]]; \
$CellContext`calcVertices$$ = $CellContext`downP$$[
      "vertices"]; $CellContext`calcFaces$$ = $CellContext`downP$$[
      "faces"]; $CellContext`rotatedVertices2D$$ = 
     Map[RotationTransform[
       45 Degree][#]& , (1/(2 $CellContext`L$$)) $CellContext`l0$$ 
       Part[$CellContext`vertices$$, All, 
         Span[1, 2]]]; $CellContext`rotatedVertices3D$$ = 
     Map[RotationTransform[
       45 Degree, {0, 0, 1}][#]& , (1/(
        2 $CellContext`L$$)) $CellContext`l0$$ $CellContext`vertices$$]; \
$CellContext`CalcrotatedVertices2D$$ = 
     Map[RotationTransform[
       45 Degree][#]& , (1/(2 $CellContext`L$$)) $CellContext`l0$$ 
       Part[$CellContext`calcVertices$$, All, 
         Span[1, 2]]]; $CellContext`CalcrotatedVertices3D$$ = 
     Map[RotationTransform[
       45 Degree, {0, 0, 1}][#]& , (1/(
        2 $CellContext`L$$)) $CellContext`l0$$ $CellContext`calcVertices$$]; \
$CellContext`polyGraphics$$ = Graphics3D[{
        Specularity[0.5, 6], 
        GraphicsComplex[If[
           Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
           1, $CellContext`l0$$] 
         If[$CellContext`infty$$, 1, 1/(
           2 $CellContext`L$$)] $CellContext`vertices$$, {
          Opacity[
           Dynamic[$CellContext`opacity$$]], 
          Table[
           If[Part[$CellContext`faces$$, $CellContext`i] != {}, {
             Block[{$CellContext`k = Total[
                 Map[Abs, 
                  Part[$CellContext`allNormals$$, $CellContext`i]]]}, 
              Switch[
               Part[
                Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
               Darker[
                GrayLevel[0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 1]]]], 2, 
               Darker[
                Lighter[Magenta, 0.4], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 2]]]], 3, 
               Darker[
                Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 3]]]], 5, 
               Darker[Blue, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 5]]]], 7, 
               Darker[Yellow, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 7]]]]]], {
              EdgeForm[
               Thickness[Medium]], 
              Polygon[
               
               Part[$CellContext`faces$$, $CellContext`i]]}}, {}], \
{$CellContext`i, 1, 
            Length[$CellContext`allNormals$$]}], 
          PointSize[0.015], Red, 
          Opacity[1], 
          Dynamic[
           If[$CellContext`hideVertices$$, {}, 
            Point[
             Range[$CellContext`v$$]]]]}]}, Axes -> True, 
       AxesLabel -> {"x", "y", "z"}]; $CellContext`volume$$ = Volume[
       ConvexHullRegion[(1/(
         2 $CellContext`L$$)) $CellContext`l0$$ $CellContext`vertices$$]]; \
$CellContext`maxHeight$$ = 
     Max[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
       Part[$CellContext`vertices$$, All, 3]]; $CellContext`largestwidth$$ = 
     Max[
        Part[$CellContext`rotatedVertices2D$$, All, 1]] - Min[
       Part[$CellContext`rotatedVertices2D$$, All, 
        1]]; $CellContext`largestlength$$ = Max[
        Part[$CellContext`rotatedVertices2D$$, All, 2]] - Min[
       Part[$CellContext`rotatedVertices2D$$, All, 
        2]]; $CellContext`bottomWidth$$ = 
     If[Part[$CellContext`faces$$, 1] != {}, Max[
         Part[
          Map[
          RotationTransform[
           45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
             Part[$CellContext`vertices$$, 
              Part[$CellContext`faces$$, 1]], All, 
             Span[1, 2]]], All, 1]] - Min[
        Part[
         Map[
         RotationTransform[
          45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
            Part[$CellContext`vertices$$, 
             Part[$CellContext`faces$$, 1]], All, 
            Span[1, 2]]], All, 1]], 0]; $CellContext`bottomLength$$ = 
     If[Part[$CellContext`faces$$, 1] != {}, Max[
         Part[
          Map[
          RotationTransform[
           45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
             Part[$CellContext`vertices$$, 
              Part[$CellContext`faces$$, 1]], All, 
             Span[1, 2]]], All, 2]] - Min[
        Part[
         Map[
         RotationTransform[
          45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
            Part[$CellContext`vertices$$, 
             Part[$CellContext`faces$$, 1]], All, 
            Span[1, 2]]], All, 2]], 0]; $CellContext`topWidth$$ = 
     If[Part[$CellContext`faces$$, 2] != {}, Max[
         Part[
          Map[
          RotationTransform[
           45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
             Part[$CellContext`vertices$$, 
              Part[$CellContext`faces$$, 2]], All, 
             Span[1, 2]]], All, 1]] - Min[
        Part[
         Map[
         RotationTransform[
          45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
            Part[$CellContext`vertices$$, 
             Part[$CellContext`faces$$, 2]], All, 
            Span[1, 2]]], All, 1]], 0]; $CellContext`topLength$$ = 
     If[Part[$CellContext`faces$$, 2] != {}, Max[
         Part[
          Map[
          RotationTransform[
           45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
             Part[$CellContext`vertices$$, 
              Part[$CellContext`faces$$, 2]], All, 
             Span[1, 2]]], All, 2]] - Min[
        Part[
         Map[
         RotationTransform[
          45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
            Part[$CellContext`vertices$$, 
             Part[$CellContext`faces$$, 2]], All, 
            Span[1, 2]]], All, 2]], 
       0]; $CellContext`averageGrowthFactors$$ = {{
       "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", $CellContext`f00pos1$$}, {
       "\!\(\*SubscriptBox[\(f\), \({11} 5\)]\)", \
($CellContext`fpos1pos1pos5$$ + $CellContext`fpos1neg1pos5$$ + \
$CellContext`fneg1pos1pos5$$ + $CellContext`fneg1neg1pos5$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({11} 3\)]\)", \
($CellContext`fpos1pos1pos3$$ + $CellContext`fpos1neg1pos3$$ + \
$CellContext`fneg1pos1pos3$$ + $CellContext`fneg1neg1pos3$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({10} 1\)]\)", ($CellContext`fpos10pos1$$ + \
$CellContext`fneg10pos1$$ + $CellContext`f0pos1pos1$$ + \
$CellContext`f0neg1pos1$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({11} 1\)]\)", \
($CellContext`fpos1pos1pos1$$ + $CellContext`fpos1neg1pos1$$ + \
$CellContext`fneg1pos1pos1$$ + $CellContext`fneg1neg1pos1$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({31} 1\)]\)", \
($CellContext`fpos3pos1pos1$$ + $CellContext`fpos3neg1pos1$$ + \
$CellContext`fneg3pos1pos1$$ + $CellContext`fneg3neg1pos1$$ + \
$CellContext`fpos1pos3pos1$$ + $CellContext`fpos1neg3pos1$$ + \
$CellContext`fneg1pos3pos1$$ + $CellContext`fneg1neg3pos1$$)/8}, {
       "\!\(\*SubscriptBox[\(f\), \({51} 1\)]\)", \
($CellContext`fpos5pos1pos1$$ + $CellContext`fpos5neg1pos1$$ + \
$CellContext`fneg5pos1pos1$$ + $CellContext`fneg5neg1pos1$$ + \
$CellContext`fpos1pos5pos1$$ + $CellContext`fpos1neg5pos1$$ + \
$CellContext`fneg1pos5pos1$$ + $CellContext`fneg1neg5pos1$$)/8}, {
       "\!\(\*SubscriptBox[\(f\), \({10} 0\)]\)", ($CellContext`fpos100$$ + \
$CellContext`fneg100$$ + $CellContext`f0pos10$$ + $CellContext`f0neg10$$)/
        4}, {"\!\(\*SubscriptBox[\(f\), \({11} 0\)]\)", \
($CellContext`fpos1pos10$$ + $CellContext`fpos1neg10$$ + \
$CellContext`fneg1pos10$$ + $CellContext`fneg1neg10$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({51} \*OverscriptBox[\(1\), \(_\)]\)]\)", \
($CellContext`fpos5pos1neg1$$ + $CellContext`fpos5neg1neg1$$ + \
$CellContext`fneg5pos1neg1$$ + $CellContext`fneg5neg1neg1$$ + \
$CellContext`fpos1pos5neg1$$ + $CellContext`fpos1neg5neg1$$ + \
$CellContext`fneg1pos5neg1$$ + $CellContext`fneg1neg5neg1$$)/8}, {
       "\!\(\*SubscriptBox[\(f\), \({31} \*OverscriptBox[\(1\), \(_\)]\)]\)", \
($CellContext`fpos3pos1neg1$$ + $CellContext`fpos3neg1neg1$$ + \
$CellContext`fneg3pos1neg1$$ + $CellContext`fneg3neg1neg1$$ + \
$CellContext`fpos1pos3neg1$$ + $CellContext`fpos1neg3neg1$$ + \
$CellContext`fneg1pos3neg1$$ + $CellContext`fneg1neg3neg1$$)/8}, {
       "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(1\), \(_\)]\)]\)", \
($CellContext`fpos1pos1neg1$$ + $CellContext`fpos1neg1neg1$$ + \
$CellContext`fneg1pos1neg1$$ + $CellContext`fneg1neg1neg1$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({10} \*OverscriptBox[\(1\), \(_\)]\)]\)", \
($CellContext`fpos10neg1$$ + $CellContext`fneg10neg1$$ + \
$CellContext`f0pos1neg1$$ + $CellContext`f0neg1neg1$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(3\), \(_\)]\)]\)", \
($CellContext`fpos1pos1neg3$$ + $CellContext`fpos1neg1neg3$$ + \
$CellContext`fneg1pos1neg3$$ + $CellContext`fneg1neg1neg3$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(5\), \(_\)]\)]\)", \
($CellContext`fpos1pos1neg5$$ + $CellContext`fpos1neg1neg5$$ + \
$CellContext`fneg1pos1neg5$$ + $CellContext`fneg1neg1neg5$$)/4}, {
       "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \(_\)])\)]\)", \
$CellContext`f00neg1$$}}; $CellContext`faceArea$$ = {}; 
    For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`faces$$], 
      Increment[$CellContext`i], 
      If[True, 
       AppendTo[$CellContext`faceArea$$, 
        ToString[
         If[Part[$CellContext`faces$$, $CellContext`i] == {}, 0, 
          ToString[
           Area[
            
            Polygon[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`vertices$$, 
               
               Part[$CellContext`faces$$, $CellContext`i]]]]]]]]]]; \
$CellContext`velocities$$ = {{
       "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \(-z\)]\)) ", 
        ToString[$CellContext`f00neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((001)\)]\) = (1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\), \(+z\)]\))  ", 
        ToString[$CellContext`f00pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((100)\)]\) = (1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\), \({100} + x\)]\)) ", 
        ToString[$CellContext`fpos100$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 00)\)]\) = \
(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} - x\)]\))  ", 
        ToString[$CellContext`fneg100$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((010)\)]\) = (1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\), \({100} + y\)]\)) ", 
        ToString[$CellContext`f0pos10$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \(_\)] 0)\)]\) \
= (1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} - y\)]\))  ", 
        ToString[$CellContext`f0neg10$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \((\(+x\), \(+y\))\)]\)) ", 
        ToString[$CellContext`fpos1pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1\\ \
1)\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 1)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \((\(+x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos1pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \
\(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \
\(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \
\(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+y\)]\))  ", 
        ToString[$CellContext`f0pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+x\)]\))  ", 
        ToString[$CellContext`fpos10pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \((\(+x\), \(+y\))\)]\)) ", 
        ToString[$CellContext`fpos1pos10$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \(_\)] \
1)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-y\)]\))  ", 
        ToString[$CellContext`f0neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+x\)]\))  ", 
        ToString[$CellContext`fpos10neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 0)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \((\(+x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg10$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+y\)]\))  ", 
        ToString[$CellContext`f0pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 0\\ \
1)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-x\)]\))  ", 
        ToString[$CellContext`fneg10pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1\\ \
0)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \((\(-x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos10$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\
\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-y\)]\))  ", 
        ToString[$CellContext`f0neg1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 0\\ \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\
\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-x\)]\))  ", 
        ToString[$CellContext`fneg10neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \
\(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \((\(-x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg10$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((113)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos1pos1pos3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((131)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+3\) y)\)]\))  ", 
        ToString[$CellContext`fpos1pos3pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((311)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos3pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-3\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos1pos1neg3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \(_\)] 1)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-3\) y)\)]\))  ", 
        ToString[$CellContext`fpos1neg3pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] 11)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(+y\))\)]\))  ", 
        ToString[$CellContext`fneg3pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg1neg3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-3\) \
y)\)]\))  ", 
        ToString[$CellContext`fpos1neg3neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(3\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \
\(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos1neg3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-3\) \
y)\)]\))  ", 
        ToString[$CellContext`fneg1neg3pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(+y\
\))\)]\))  ", 
        ToString[$CellContext`fneg3pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(-y\
\))\)]\))  ", 
        ToString[$CellContext`fneg3neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 3)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg1pos3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+3\) y)\)]\))  ", 
        ToString[$CellContext`fpos1pos3neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 13)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos1pos3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 31)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+3\) y)\)]\))  ", 
        ToString[$CellContext`fneg1pos3pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos3pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \(_\)] 1)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(-y\))\)]\))  ", 
        ToString[$CellContext`fpos3neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 3)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg1pos3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 3 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+3\) \
y)\)]\))  ", 
        ToString[$CellContext`fneg1pos3neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(-y\
\))\)]\))  ", 
        ToString[$CellContext`fpos3neg1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-3\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg1neg3$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-3\) y)\)]\))  ", 
        ToString[$CellContext`fneg1neg3neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(-y\))\)]\))  ", 
        ToString[$CellContext`fneg3neg1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((115)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos1pos1pos5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((151)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+5\) y)\)]\))  ", 
        ToString[$CellContext`fpos1pos5pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((511)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos5pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-5\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos1pos1neg5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \(_\)] 1)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-5\) y)\)]\))  ", 
        ToString[$CellContext`fpos1neg5pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] 11)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(+y\))\)]\))  ", 
        ToString[$CellContext`fneg5pos1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg1neg5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-5\) \
y)\)]\))  ", 
        ToString[$CellContext`fpos1neg5neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(5\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \
\(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos1neg5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(-5\) \
y)\)]\))  ", 
        ToString[$CellContext`fneg1neg5pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(+y\
\))\)]\))  ", 
        ToString[$CellContext`fneg5pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(-y\
\))\)]\))  ", 
        ToString[$CellContext`fneg5neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 5)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fpos1neg1pos5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+5\) y)\)]\))  ", 
        ToString[$CellContext`fpos1pos5neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 15)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(+y\))\)]\))  ", 
        ToString[$CellContext`fneg1pos1pos5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 51)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(+5\) y)\)]\))  ", 
        ToString[$CellContext`fneg1pos5pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(+y\))\)]\))  ", 
        ToString[$CellContext`fpos5pos1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \(_\)] 1)\)]\) \
= \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(-y\))\)]\))  ", 
        ToString[$CellContext`fpos5neg1pos1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 5)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \
\(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg1pos5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 5 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(+5\) \
y)\)]\))  ", 
        ToString[$CellContext`fneg1pos5neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(-y\
\))\)]\))  ", 
        ToString[$CellContext`fpos5neg1neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-5\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(-y\))\)]\))  ", 
        ToString[$CellContext`fneg1neg1neg5$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(-5\) y)\)]\))  ", 
        ToString[$CellContext`fneg1neg5neg1$$]}, {
       "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(-y\))\)]\))  ", 
        ToString[$CellContext`fneg5neg1neg1$$]}}; $CellContext`cutFactors$$ = \
{{"", "\!\(\*SubscriptBox[\(L\), \(max\)]\)", 
        "\!\(\*SubscriptBox[\(H\), \(Max\)]\)", "", 
        "\!\(\*SubscriptBox[\(L\), \(max\)]\)", 
        "\!\(\*SubscriptBox[\(H\), \(Max\)]\)", "", 
        "\!\(\*SubscriptBox[\(L\), \({111}\)]\)", 
        "\!\(\*SubscriptBox[\(L\), \({11 \*OverscriptBox[\(1\), \
\(_\)]}\)]\)"}, {"(1 0 0)", 
        Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
         Part[$CellContext`vertices$$, All, 1]], 
        Max[
         Part[
          
          Select[($CellContext`l0$$/(
            2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 1] == 
           Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
             Part[$CellContext`vertices$$, All, 1]]& ], All, 3]], "(1 1 0)", 
        Max[
         Part[$CellContext`rotatedVertices2D$$, All, 2]], 
        Mean[
         Part[
          Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Max[
             Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 3]], 
        "(1 1 1)", 
        If[Part[$CellContext`faces$$, 7] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 7]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`vertices$$, 
            Flatten[
             Position[$CellContext`rotatedVertices3D$$, 
              Part[
               Select[$CellContext`rotatedVertices3D$$, And[Part[#, 2] == Max[
                   Part[$CellContext`rotatedVertices2D$$, All, 2]], 
                 Part[#, 3] == Max[
                   Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Max[
                    Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 
                    3]]]& ], 1]]]]]], 
        If[Part[$CellContext`calcFaces$$, 11] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 11]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`calcVertices$$, 
            Flatten[
             Position[$CellContext`CalcrotatedVertices3D$$, 
              Part[
               
               Select[$CellContext`CalcrotatedVertices3D$$, And[
                Part[#, 2] == Max[
                   Part[$CellContext`CalcrotatedVertices2D$$, All, 2]], 
                 Part[#, 3] == Min[
                   Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 2] == 
                    Max[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 2]]& ], 
                    All, 3]]]& ], 1]]]]]]}, {
       "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 0 0)", 
        Abs[
         Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
          Part[$CellContext`vertices$$, All, 1]]], 
        Max[
         Part[
          
          Select[($CellContext`l0$$/(
            2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 1] == 
           Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
             Part[$CellContext`vertices$$, All, 1]]& ], All, 3]], 
        "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 1 0)", 
        Abs[
         Min[
          Part[$CellContext`rotatedVertices2D$$, All, 1]]], 
        Mean[
         Part[
          Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Min[
             Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 3]], 
        "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 1 1)", 
        If[Part[$CellContext`faces$$, 8] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 8]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`vertices$$, 
            Flatten[
             Position[$CellContext`rotatedVertices3D$$, 
              Part[
               Select[$CellContext`rotatedVertices3D$$, And[Part[#, 1] == Min[
                   Part[$CellContext`rotatedVertices2D$$, All, 1]], 
                 Part[#, 3] == Max[
                   Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Min[
                    Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 
                    3]]]& ], 1]]]]]], 
        If[Part[$CellContext`calcFaces$$, 12] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 12]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`calcVertices$$, 
            Flatten[
             Position[$CellContext`CalcrotatedVertices3D$$, 
              Part[
               
               Select[$CellContext`CalcrotatedVertices3D$$, And[
                Part[#, 1] == Min[
                   Part[$CellContext`CalcrotatedVertices2D$$, All, 1]], 
                 Part[#, 3] == Min[
                   Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 1] == 
                    Min[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 1]]& ], 
                    All, 3]]]& ], 1]]]]]]}, {"(0 1 0)", 
        Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
         Part[$CellContext`vertices$$, All, 2]], 
        Max[
         Part[
          
          Select[($CellContext`l0$$/(
            2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 2] == 
           Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
             Part[$CellContext`vertices$$, All, 2]]& ], All, 3]], 
        "(1 \!\(\*OverscriptBox[\(1\), \(_\)]\) 0)", 
        Max[
         Part[$CellContext`rotatedVertices2D$$, All, 1]], 
        Mean[
         Part[
          Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Max[
             Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 3]], 
        "(1 \!\(\*OverscriptBox[\(1\), \(_\)]\) 1)", 
        If[Part[$CellContext`faces$$, 9] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 9]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`vertices$$, 
            Flatten[
             Position[$CellContext`rotatedVertices3D$$, 
              Part[
               Select[$CellContext`rotatedVertices3D$$, And[Part[#, 1] == Max[
                   Part[$CellContext`rotatedVertices2D$$, All, 1]], 
                 Part[#, 3] == Max[
                   Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Max[
                    Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 
                    3]]]& ], 1]]]]]], 
        If[Part[$CellContext`calcFaces$$, 13] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 13]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`calcVertices$$, 
            Flatten[
             Position[$CellContext`CalcrotatedVertices3D$$, 
              Part[
               
               Select[$CellContext`CalcrotatedVertices3D$$, And[
                Part[#, 1] == Max[
                   Part[$CellContext`CalcrotatedVertices2D$$, All, 1]], 
                 Part[#, 3] == Min[
                   Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 1] == 
                    Max[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 1]]& ], 
                    All, 3]]]& ], 1]]]]]]}, {
       "(0 \!\(\*OverscriptBox[\(1\), \(_\)]\) 0)", 
        Abs[
         Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
          Part[$CellContext`vertices$$, All, 2]]], 
        Max[
         Part[
          
          Select[($CellContext`l0$$/(
            2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 2] == 
           Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
             Part[$CellContext`vertices$$, All, 2]]& ], All, 3]], 
        "(\!\(\*OverscriptBox[\(1\), \(_\)]\) \!\(\*OverscriptBox[\(1\), \
\(_\)]\) 0)", 
        Abs[
         Min[
          Part[$CellContext`rotatedVertices2D$$, All, 2]]], 
        Mean[
         Part[
          Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Min[
             Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 3]], 
        "(\!\(\*OverscriptBox[\(1\), \(_\)]\) \!\(\*OverscriptBox[\(1\), \
\(_\)]\) 1)", 
        If[Part[$CellContext`faces$$, 10] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 10]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`vertices$$, 
            Flatten[
             Position[$CellContext`rotatedVertices3D$$, 
              Part[
               Select[$CellContext`rotatedVertices3D$$, And[Part[#, 2] == Min[
                   Part[$CellContext`rotatedVertices2D$$, All, 2]], 
                 Part[#, 3] == Max[
                   Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Min[
                    Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 
                    3]]]& ], 1]]]]]], 
        If[Part[$CellContext`calcFaces$$, 14] != {}, 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`pts$$, 14]], 
         Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`calcVertices$$, 
            Flatten[
             Position[$CellContext`CalcrotatedVertices3D$$, 
              Part[
               
               Select[$CellContext`CalcrotatedVertices3D$$, And[
                Part[#, 2] == Min[
                   Part[$CellContext`CalcrotatedVertices2D$$, All, 2]], 
                 Part[#, 3] == Min[
                   Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 2] == 
                    Min[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 2]]& ], 
                    All, 3]]]& ], 1]]]]]]}}; $CellContext`type$$ = StringJoin[
       Map["(" <> StringJoin[
          Map[ToString, #]] <> ")"& , 
        DeleteDuplicates[
         Map[Sort[#, Greater]& , 
          Map[Abs, 
           Map[Part[
             Nearest[$CellContext`normals$$, #], 1]& , 
            Extract[$CellContext`allNormals$$, 
             Rest[
              Position[$CellContext`faces$$, 
               Except[{}], 1]]]]]]]]]; $CellContext`info$$ = 
     ToString[$CellContext`f$$] <> " Faces, " <> ToString[$CellContext`e$$] <> 
      " Edges, " <> ToString[$CellContext`v$$] <> " Vertices."; 
    Null], $CellContext`calcCutOn$$ = Hold[
   ReleaseHold[$CellContext`calcCutOff$$]; $CellContext`velocityPlot$$ = 
     Plot[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 
       10^(-3), {$CellContext`x, 0, $CellContext`t$$}, 
       AxesLabel -> {
        "time (hr)", "Growth Velocity (mm/hr)"}]; $CellContext`normals1$$ = 
     Append[$CellContext`allNormals$$, $CellContext`n$$]; $CellContext`p1$$ = \
$CellContext`polyhedron[$CellContext`normals1$$, 
       Append[
        $CellContext`pts1[
        False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], $CellContext`cutPosition$$ 
        2 $CellContext`L$$ $CellContext`n$$]]; $CellContext`vertices1$$ = If[
        Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
        1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) $CellContext`p1$$[
       "vertices"]; $CellContext`faces1$$ = $CellContext`p1$$[
      "faces"]; $CellContext`v1$$ = 
     Length[$CellContext`vertices1$$]; $CellContext`f1$$ = Count[
       $CellContext`p1$$["faces"], 
       Except[{}]]; $CellContext`e1$$ = $CellContext`v1$$ + $CellContext`f1$$ - 
      2; $CellContext`type$$ = StringJoin[
       Map["(" <> StringJoin[
          Map[ToString, #]] <> ")"& , 
        DeleteDuplicates[
         Map[Sort[#, Greater]& , 
          Map[Abs, 
           Map[Part[
             Nearest[$CellContext`normals$$, #], 1]& , 
            Extract[$CellContext`allNormals$$, 
             Rest[
              Position[$CellContext`faces$$, 
               Except[{}], 1]]]]]]]]]; $CellContext`info$$ = 
     ToString[$CellContext`f1$$] <> " Faces, " <> ToString[$CellContext`e1$$] <> 
      " Edges, " <> ToString[$CellContext`v1$$] <> 
      " Vertices."; $CellContext`polyGraphics$$ = Graphics3D[{
        Specularity[0.5, 6], 
        GraphicsComplex[$CellContext`vertices1$$, {
          Dynamic[
           Opacity[$CellContext`opacity$$]], 
          Dynamic[
           Table[
            If[Part[$CellContext`faces1$$, $CellContext`i] != {}, {
              Block[{$CellContext`k = Total[
                  Map[Abs, 
                   Part[$CellContext`normals1$$, $CellContext`i]]]}, 
               Switch[
                Part[
                 Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
                Darker[
                 GrayLevel[0.7], 0.5 Abs[
                   Sign[
                    Chop[$CellContext`k - 1]]]], 2, 
                Darker[
                 Lighter[Magenta, 0.4], 0.5 Abs[
                   Sign[
                    Chop[$CellContext`k - 2]]]], 3, 
                Darker[
                 Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                   Sign[
                    Chop[$CellContext`k - 3]]]], 5, 
                Darker[Blue, 0.5 Abs[
                   Sign[
                    Chop[$CellContext`k - 5]]]], 7, 
                Darker[Yellow, 0.5 Abs[
                   Sign[
                    Chop[$CellContext`k - 7]]]]]], {
               EdgeForm[
                Thickness[Medium]], 
               Polygon[
                
                Part[$CellContext`faces1$$, $CellContext`i]]}}, {}], \
{$CellContext`i, 1, 
             Length[
              
              If[$CellContext`drawCutPlane$$, $CellContext`normals1$$, \
$CellContext`allNormals$$]]}]], 
          PointSize[0.015], Red, 
          Opacity[1], 
          Dynamic[
           If[$CellContext`hideVertices$$, {}, 
            Point[
             Range[$CellContext`v$$]]]]}]}, Axes -> True, 
       AxesLabel -> {"x", "y", "z"}]; 
    ReleaseHold[$CellContext`calcSection$$]], $CellContext`printOn$$ = 
   False, $CellContext`exportCurrentState$$ = 
   "1:eJxTTMoPSotjYGAoZgESPpnFJZmMQEbR/\
rJtk7akLbMvZgXy3BJzilMRLLAKsPqQotLUYmGQuGtCQU5iXqpzRn5mcqqKiqGhQZoXsqlpzMg8T5A\
JBlCSCUjqGuJRACKxyRsiq0KThxiKRwGS0XjkkY3B6QJDrC5E0opdAUQGWRl2E/\
CoQHYD1mBEcQTOgDZEtQqvMwjEFiF3EopNIiMDnwWEvUkoPRAKSuyewIhwvL4gbAcRkUFMujTGKW+\
MMyiNiYpLqDOwWwCRwh1QhK1A9ipeO4hM+ehmoJhP2KG4bTEmnDKRFOCLD8I+\
wWYCsuEEoxRn7sDrC8xkh9cRhC0htqTBH2lExAme0gBBmuKUN8UZoKak5BHsFkCkcAc4YSuQPYnXDi\
LzCLoZKOYTdihuW0zxpS6MPIIvPojLIzg8QlyU4kwzeH2BmUfwOoKwJcTmEfyRRkScYFMCbuRlMsAI\
bO3AolkzQWCnfSY/SFkKkCjSdZZ5/\
chMyj4zAMSDKOB0KDp7BgQYHDJZUEwlhmDEJFCblmBlUKtO2hcxgMEDfIxMkIdHCaoSqHECDWoS46V\
ImWtt21TtZ3gZssYTXJdXPsLLCHhb179q7X0kxhnr+rR5C55hiFxDkoKLYOpCU4ys6/rN3Ykf7t+\
zLzqiauj81fIpEkMtQ9T2m/\
dlvFIQxmNsiuFScBG4XXApTNuJ0YVpKRYplwMxJotu2BfJX5i54duWx0gMiNQJvFLwuMBUDJdC03UD\
Q9cNEnVhWoohhdYtZWJAL35h3cVRmVGZUZlRmVGZUZlRGRrKIA0sMzAg9zTwdwyKBRjA487JpSVRjh\
WZxeBBZyTBSGyCEXBBSJ8Fm+GaHMBm6zTn7pznvz/aF93+WZe154uMA5KzQB0dcP+\
GtI4MfoKVyuaBCGjj+6Y9vKdWVCWyzv1hFcOBTFDQAwDZNhkD", \
$CellContext`exportInitialState$$ = 
   "1:eJxTTMoPShNhYGAoZgESPpnFJZmMMF5IUWlqmheKHJBmKJo1EwRO2hcxgMEDfIxMJiA1SlCV\
QI2TNCZknico9gwg5KjMqMyozKjMqMyozKgMLWWKWYGkW2JOcSqClcaMrDoTpA7cfEJuQ+\
20z0wB8XSdZV4/MpOyR+jODACJ7y/bNmlL2jJ7qHJOh6KzZ0CAwSETZDDEUFQCAD/5V7o=", \
$CellContext`stateString$$, $CellContext`dsCurrent$$ = {
   0, 0.043752329739829225` $CellContext`param1[{0, 0, 1}, 0.2, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.043752329739829225` $CellContext`param1[{1, 0, 0}, 0.5, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.043752329739829225` $CellContext`param1[{-1, 0, 0}, 0.5, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.043752329739829225` $CellContext`param1[{0, 1, 0}, 0.5, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.043752329739829225` $CellContext`param1[{0, -1, 0}, 0.5, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{1, 1, 1}, 1.2000000000000002`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{-1, 1, 1}, 1.2000000000000002`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{1, -1, 1}, 1.2000000000000002`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{-1, -1, 1}, 1.2000000000000002`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{1, 1, -1}, 1., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{-1, 1, -1}, 1., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{1, -1, -1}, 1., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.07578125805889101 $CellContext`param1[{-1, -1, -1}, 1., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{0, 1, 1}, 0.7, False, 3.2, 2.1, 4,
       1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{1, 0, 1}, 0.7, False, 3.2, 2.1, 4,
       1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{1, 1, 0}, 1., False, 3.2, 2.1, 4, 
      1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{0, -1, 1}, 0.7, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{1, 0, -1}, 0.5, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{1, -1, 0}, 1., False, 3.2, 2.1, 4,
       1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{0, 1, -1}, 0.5, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{-1, 0, 1}, 0.7, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{-1, 1, 0}, 1., False, 3.2, 2.1, 4,
       1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{0, -1, -1}, 0.5, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{-1, 0, -1}, 0.5, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.0618751381034862 $CellContext`param1[{-1, -1, 0}, 1., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, 1, 3}, 1.6, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, 3, 1}, 2.2, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{3, 1, 1}, 2.2, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, 1, -3}, 1., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, -3, 1}, 2.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-3, 1, 1}, 2.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, -1, -3}, 1., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, -3, -1}, 2., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, 1, -3}, 1., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, -3, 1}, 2.2, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-3, 1, -1}, 2., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-3, -1, 1}, 2.2, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, -1, 3}, 1.6, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{1, 3, -1}, 2., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, 1, 3}, 1.6, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, 3, 1}, 2.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{3, 1, -1}, 2., False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{3, -1, 1}, 2.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, -1, 3}, 1.6, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, 3, -1}, 2., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{3, -1, -1}, 2., False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, -1, -3}, 1., False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-1, -3, -1}, 2., False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.14511006145092142` $CellContext`param1[{-3, -1, -1}, 2., False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, 1, 5}, 1.9999999999999998`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, 5, 1}, 3.2, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{5, 1, 1}, 3.2, False, 3.2, 2.1, 
      4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, 1, -5}, 0.9999999999999999, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, -5, 1}, 3.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-5, 1, 1}, 3.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, -1, -5}, 0.9999999999999999, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, -5, -1}, 3.0000000000000004`,
       False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, 1, -5}, 0.9999999999999999, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, -5, 1}, 3.2, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-5, 1, -1}, 3.0000000000000004`,
       False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-5, -1, 1}, 3.2, False, 3.2, 
      2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, -1, 5}, 1.9999999999999998`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{1, 5, -1}, 3.0000000000000004`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, 1, 5}, 1.9999999999999998`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, 5, 1}, 3.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{5, 1, -1}, 3.0000000000000004`, 
      False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{5, -1, 1}, 3.2, False, 3.2, 2.1,
       4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, -1, 5}, 1.9999999999999998`,
       False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, 5, -1}, 3.0000000000000004`,
       False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{5, -1, -1}, 3.0000000000000004`,
       False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, -1, -5}, 0.9999999999999999,
       False, 3.2, 2.1, 4, 1, 1, 1, 1, 11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-1, -5, -1}, 
      3.0000000000000004`, False, 3.2, 2.1, 4, 1, 1, 1, 1, 
      11.427962875879341`, 80], 
    0.22734377417667304` $CellContext`param1[{-5, -1, -1}, 
      3.0000000000000004`, False, 3.2, 2.1, 4, 1, 1, 1, 1, 
      11.427962875879341`, 80]}, $CellContext`faceArea$$ = {
   "34.7972", "16.3117", "2.19307", "3.10757", "4.6808", "1.63839", "1.57796",
     "0.563379", "1.60538", "3.92184", "1.24632", "1.54264", "2.0452", 
    "1.82616", "0.221106", "3.25736", "1.24869", "2.60848", "0.588645", 
    "0.846127", "0", "0.69983", "2.49315", "0.336308", "0.633108", "1.27704", 
    "1.73643", "1.86921", "0.47351", "0", "0.786101", "0.558618", "0", 
    "0.230665", "0", "0.920737", "0", "1.21809", "4.83324", "0.393125", 
    "4.37417", "1.60509", "0.184679", "1.02456", "1.26282", "0.0813504", 
    "0.451238", "0", "0", "0", "0", "0.799862", "0.211954", "0", "0", "0", 
    "0", "0", "0", "1.0779", "0", "0", "0.464884", "0.0163478", "0.299078", 
    "0", "0", "0.551529", "0", "0", "0.108624", "0", "0.636242", 
    "0.402036"}, $CellContext`volume$$ = 
   87.7513912385168, $CellContext`showArea$$ = 
   False, $CellContext`hideVertices$$ = True, $CellContext`maxHeight$$ = 
   2.5171233830213557`, $CellContext`intersectionHeight$$, \
$CellContext`largestlength$$ = 
   7.156226378376613, $CellContext`largestwidth$$ = 
   7.166126400473172, $CellContext`bottomWidth$$ = 
   6.370728786972254, $CellContext`bottomLength$$ = 
   6.429812257041686, $CellContext`topWidth$$ = 
   3.620433486590999, $CellContext`topLength$$ = 
   4.583458136033659, $CellContext`growDown$$ = 
   False, $CellContext`showVelocity$$ = 
   False, $CellContext`velocities$$ = {{
    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \(_\)])\)]\) = (1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\), \(-z\)]\)) ", "1"}, {
    "\!\(\*SubscriptBox[\(f\), \((001)\)]\) = (1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\), \(+z\)]\))  ", "0.662"}, {
    "\!\(\*SubscriptBox[\(f\), \((100)\)]\) = (1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\), \({100} + x\)]\)) ", "0.9"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 00)\)]\) = (1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} - x\)]\))  ", "0.84"}, {
    "\!\(\*SubscriptBox[\(f\), \((010)\)]\) = (1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\), \({100} + y\)]\)) ", "0.75"}, {
    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \(_\)] 0)\)]\) = \
(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} - y\)]\))  ", "0.87"}, {
    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \((\(+x\), \(+y\))\)]\)) ", "0.883346"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \((\(-x\), \(+y\))\)]\))  ", 
     "Sqrt[3]\n-------\n   2"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \((\(+x\), \(-y\))\)]\))  ", 
     "Sqrt[3]\n-------\n   2"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \
\(-y\))\)]\))  ", "0.788083"}, {
    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \(+y\))\)]\))  ", 
     "0.618342"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \
\(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \
\(+y\))\)]\))  ", "0.55"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \
\(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \
\(-y\))\)]\))  ", "0.606218"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \(-y\))\)]\))  ", 
     "0.551658"}, {
    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+y\)]\))  ", "0.942809"}, {
    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+x\)]\))  ", "0.876812"}, {
    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \((\(+x\), \(+y\))\)]\)) ", "0.857956"}, {
    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(-y\)]\))  ", "0.857956"}, {
    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+x\)]\))  ", "0.596232"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 0)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \((\(+x\), \(-y\))\)]\))  ", "0.874927"}, {
    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+y\)]\))  ", "0.64111"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 0\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(-x\)]\))  ", "0.942809"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1\\ 0)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \((\(-x\), \(+y\))\)]\))  ", "0.768389"}, {
    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\
\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-y\)]\))  ", "0.58341"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 0\\ \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\
\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-x\)]\))  ", "0.55"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \
\(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \((\(-x\), \
\(-y\))\)]\))  ", "0.782532"}, {
    "\!\(\*SubscriptBox[\(f\), \((113)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+y\))\)]\))  ", "0.804282"}, {
    "\!\(\*SubscriptBox[\(f\), \((131)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+3\) y)\)]\))  ", "0.829985"}, {
    "\!\(\*SubscriptBox[\(f\), \((311)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(+y\))\)]\))  ", "0.948555"}, {
    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \(_\)])\)]\) = \!\
\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-3\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+y\))\)]\))  ", "0.804282"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \(_\)] 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-3\) y)\)]\))  ", "0.921193"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] 11)\)]\) = \!\
\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(+y\))\)]\))  ", "0.912072"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \
\(-y\))\)]\))  ", "0.725512"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-3\) \
y)\)]\))  ", "0.820699"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(3\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \
\(+y\))\)]\))  ", "0.750386"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-3\) \
y)\)]\))  ", "0.848227"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(+y\
\))\)]\))  ", "0.812573"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(-y\
\))\)]\))  ", "0.866468"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 3)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-y\))\)]\))  ", "0.725512"}, {
    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \(_\)])\)]\) = \!\
\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+3\) y)\)]\))  ", "0.739441"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 13)\)]\) = \!\
\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+y\))\)]\))  ", "0.750386"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 31)\)]\) = \!\
\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+3\) y)\)]\))  ", "0.820865"}, {
    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \(_\)])\)]\) = \!\
\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(+y\))\)]\))  ", "0.845076"}, {
    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(-y\))\)]\))  ", "0.912072"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 3)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \
\(-y\))\)]\))  ", "0.779407"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 3 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+3\) \
y)\)]\))  ", "0.731316"}, {
    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(-y\
\))\)]\))  ", "0.812573"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-3\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-y\))\)]\))  ", "0.779407"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-3\) y)\)]\))  ", "0.8"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(-y\))\)]\))  ", "0.771944"}, {
    "\!\(\*SubscriptBox[\(f\), \((115)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+y\))\)]\))  ", 
     "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((151)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+5\) y)\)]\))  ", "0.808521"}, {
    "\!\(\*SubscriptBox[\(f\), \((511)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(+y\))\)]\))  ", "0.9457"}, {
    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \(_\)])\)]\) = \!\
\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-5\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+y\))\)]\))  ", 
     "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \(_\)] 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(-5\) y)\)]\))  ", 
     "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] 11)\)]\) = \!\
\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(+y\))\)]\))  ", "1"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \
\(-y\))\)]\))  ", "0.713951"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-5\) \
y)\)]\))  ", "0.976877"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(5\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \
\(+y\))\)]\))  ", "0.731618"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(-5\) \
y)\)]\))  ", "0.852169"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(+y\
\))\)]\))  ", "0.976877"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(-y\
\))\)]\))  ", "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 5)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(-y\))\)]\))  ", "0.713951"}, {
    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \(_\)])\)]\) = \!\
\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+5\) y)\)]\))  ", "0.76001"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 15)\)]\) = \!\
\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(+y\))\)]\))  ", "0.731618"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 51)\)]\) = \!\
\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(+5\) y)\)]\))  ", 
     "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \(_\)])\)]\) = \!\
\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(+y\))\)]\))  ", "0.888958"}, {
    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(-y\))\)]\))  ", "0.914523"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 5)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \
\(-y\))\)]\))  ", "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 5 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(+5\) \
y)\)]\))  ", "0.976877"}, {
    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(-y\
\))\)]\))  ", "0.859651"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-5\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(-y\))\)]\))  ", 
     "3 Sqrt[3]\n---------\n    5"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(-5\) y)\)]\))  ", "0.801039"}, {
    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(-y\))\)]\))  ", 
     "0.8"}}, $CellContext`areaAndVelocityString$$, \
$CellContext`showAreaAndVelocities$$ = 
   True, $CellContext`polygons2D$$, $CellContext`cutZAxis$$, \
$CellContext`cutYAxis$$, $CellContext`cutXAxis$$, $CellContext`timeStep$$ = 
   15, $CellContext`timeStepLines$$, $CellContext`timeStepLines3D$$ = {}, \
$CellContext`timeStepLines2D$$, $CellContext`timingTest$$, $CellContext`\
\[CapitalDelta]\[Beta]posxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]negyposx$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]negxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Beta]negynegx$$ = 
   0, $CellContext`Llist$$, $CellContext`velocityA$$ = 
   2089, $CellContext`velocityB$$ = 1.124, $CellContext`velocityC$$ = 
   7.239, $CellContext`velocityPlot$$ = Graphics[
    Annotation[{{{{}, {}, 
        Annotation[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2]], 
          Line[CompressedData["
1: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
dVGHTULbvPHCx48Esj3WKKSwSPgHjQLuXw==
           "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PlotRange" -> {{0, 80}, {0.013758771123132701`, 
          0.12537599056966447`}}, "Frame" -> {{False, False}, {False, False}},
         "AxesOrigin" -> {0, 0.013758771123132733`}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"], {
    DisplayFunction -> Identity, DisplayFunction -> Identity, 
     Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0.013758771123132733`}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> GoldenRatio^(-1), 
     Axes -> {True, True}, AxesLabel -> {
       HoldForm["time (hr)"], 
       HoldForm["Growth Velocity (mm/hr)"]}, 
     AxesOrigin -> {0, 0.013758771123132701`}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 80}, {0.013758771123132701`, 0.12537599056966447`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, 
     Ticks -> {Automatic, Automatic}}], $CellContext`ShowVelocityPlot$$ = 
   False, $CellContext`textX$$, $CellContext`textY$$, \
$CellContext`constantVelocity$$ = 
   False, $CellContext`constantVelocityValue$$ = 
   100, $CellContext`projX$$, $CellContext`projY$$, \
$CellContext`timePolygon2D$$ = {}, $CellContext`timePolygon3D$$ = {}, \
$CellContext`timePolygonColor$$, $CellContext`exportShape$$ = 
   Hold[$CellContext`ExportCrystal$$ = Graphics3D[{
        Specularity[0.5, 6], 
        GraphicsComplex[If[
           Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
           1, $CellContext`l0$$] 
         If[$CellContext`infty$$, 1, 1/(
           2 $CellContext`L$$)] $CellContext`vertices$$, {
          Opacity[
           Dynamic[$CellContext`opacity$$]], 
          Table[
           If[Part[$CellContext`faces$$, $CellContext`i] != {}, {
             Block[{$CellContext`k = Total[
                 Map[Abs, 
                  Part[$CellContext`allNormals$$, $CellContext`i]]]}, 
              Switch[
               Part[
                Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
               Darker[
                GrayLevel[0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 1]]]], 2, 
               Darker[
                Lighter[Magenta, 0.4], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 2]]]], 3, 
               Darker[
                Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 3]]]], 5, 
               Darker[Blue, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 5]]]], 7, 
               Darker[Yellow, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 7]]]]]], {
              EdgeForm[
               Thickness[Medium]], 
              Polygon[
               
               Part[$CellContext`faces$$, $CellContext`i]]}}, {}], \
{$CellContext`i, 1, 
            Length[$CellContext`allNormals$$]}], 
          PointSize[0.015], Red, 
          Opacity[1], 
          Dynamic[
           If[$CellContext`hideVertices$$, {}, 
            Point[
             Range[$CellContext`v$$]]]]}]}, Axes -> True, 
       AxesLabel -> {"x", "y", "z"}]; 
    Export[$CellContext`saveDirectory$$ <> "\[Alpha]=" <> 
      ToString[$CellContext`\[Alpha]1$$] <> " \[Beta] =" <> 
      ToString[$CellContext`\[Beta]1$$] <> " \[Gamma]=" <> 
      ToString[$CellContext`\[Gamma]1$$] <> " \[Delta]=" <> 
      ToString[$CellContext`\[Delta]1$$] <> " " <> $CellContext`cadFileName$$ <> 
      ".stl", $CellContext`ExportCrystal$$]; 
    Null], $CellContext`parameterConfigFileName$$, \
$CellContext`cadFileName$$, $CellContext`exportConfig$$ = Hold[
    Export[$CellContext`saveDirectory$$ <> "\[Alpha]=" <> 
     ToString[$CellContext`\[Alpha]1$$] <> " \[Beta] =" <> 
     ToString[$CellContext`\[Beta]1$$] <> " \[Gamma]=" <> 
     ToString[$CellContext`\[Gamma]1$$] <> " \[Delta]=" <> 
     ToString[$CellContext`\[Delta]1$$] <> 
     " " <> $CellContext`parameterConfigFileName$$ <> 
     ".txt", $CellContext`exportCurrentState$$]], \
$CellContext`exportCutFileName$$, $CellContext`saveDirectory$$ = 
   "C:\\Users\\alims\\OneDrive\\Documents", $CellContext`ExportCrystal$$, \
$CellContext`exportCutImage$$ = Hold[
    Export[$CellContext`saveDirectory$$ <> "\[Alpha]=" <> 
     ToString[$CellContext`\[Alpha]1$$] <> " \[Beta] =" <> 
     ToString[$CellContext`\[Beta]1$$] <> " \[Gamma]=" <> 
     ToString[$CellContext`\[Gamma]1$$] <> " \[Delta]=" <> 
     ToString[$CellContext`\[Delta]1$$] <> 
     " " <> $CellContext`exportCutFileName$$ <> ".jpeg", 
     Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, 
       Thickness[0.002], $CellContext`timeStepLines2D$$, 
       Text["Time of first appearance = " <> ToString[
          NumberForm[
           If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
            Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
        " hrs\nTime of growth completion = " <> ToString[
          NumberForm[$CellContext`t$$, {10, 2}]] <> " hrs\nTime Intervals = " <> 
        ToString[
          NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
        "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
        ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
        "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
        ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
        "\nCut Plane: " <> StringReplace[
          
          ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
          "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
           ")", "," -> " "}] <> "\nCut Distance " <> 
        ToString[$CellContext`cutPosition$$], {$CellContext`textX$$, \
$CellContext`textY$$ + 1}]}, Axes -> True, 
      AxesLabel -> {"(mm)", "(mm)"}]]], $CellContext`cutFactors$$ = {{
    "", "\!\(\*SubscriptBox[\(L\), \(max\)]\)", 
     "\!\(\*SubscriptBox[\(H\), \(Max\)]\)", "", 
     "\!\(\*SubscriptBox[\(L\), \(max\)]\)", 
     "\!\(\*SubscriptBox[\(H\), \(Max\)]\)", "", 
     "\!\(\*SubscriptBox[\(L\), \({111}\)]\)", 
     "\!\(\*SubscriptBox[\(L\), \({11 \*OverscriptBox[\(1\), \(_\)]}\)]\)"}, {
    "(1 0 0)", 3.650167741267705, 1.3900633689233546`, "(1 1 0)", 
     3.710113483809077, 0.8129251533810741, "(1 1 1)", 3.784695651830304, 
     2.741662999351553}, {
    "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 0 0)", 3.440156558516524, 
     1.9267586137319264`, "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 1 0)", 
     3.3966127840847467`, 0.939368371088298, 
     "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 1 1)", 3.7240706453831915`, 
     2.502452777742112}, {
    "(0 1 0)", 3.1251397843897535`, 2.241775387858697, 
     "(1 \!\(\*OverscriptBox[\(1\), \(_\)]\) 0)", 3.7695136163884255`, 
     0.8185007589874761, "(1 \!\(\*OverscriptBox[\(1\), \(_\)]\) 1)", 
     3.7240706453831915`, 2.6992254948385734`}, {
    "(0 \!\(\*OverscriptBox[\(1\), \(_\)]\) 0)", 3.5451621498921146`, 
     1.401730656853975, 
     "(\!\(\*OverscriptBox[\(1\), \(_\)]\) \!\(\*OverscriptBox[\(1\), \
\(_\)]\) 0)", 3.446112894567536, 0.7525056281928809, 
     "(\!\(\*OverscriptBox[\(1\), \(_\)]\) \!\(\*OverscriptBox[\(1\), \
\(_\)]\) 1)", 3.4512581163711844`, 
     2.5082567245301686`}}, $CellContext`rotatedVertices2D$$ = CompressedData["
1:eJxdlHs0FFgcx2cY8zAUR6JUyxKKnDirOqVzr9JDkRM2j0oR0uJQI21s1jIs
S0SWTUxeKwmFVQrdq/Les6VlItpd75SMeRjzNGvPztiz/XHPPZ/7vb/f+f2+
93euSUCEe5AagUAIXFr/7FNZrh+PSSmY3e8boYOFoMm/9UjKy3kkOJwvX8ug
QnKYcXCtnwjcrm5VezOsCRdPf7Ri5L5D5Uou7n2YPcCkYpvWfcUrRhaQinns
2kFavgBUUNtXhVzQhEdjO9/OPFtAKtYaqq8ezVwAusZq0rml860lg0Fnr1Ox
TsvaU04VYqBiK6Oc7owiGly8Fss+8FoCav1qBI72CiBa7ZHa8oiMjUcO7ooP
nUdxJuE+nTlUuPqpzZUKGwm6KGPUpZurw++dJ/nCjkXUssPw0sQgAYr0Gg67
dvNAtFIntsgbPDdKwZjbLYkuTw42G0SmSbl8UPeCF3yKScSy5n/1bLFXaVC/
FLGMbFepM+SoVql/kh8zSJXX2L4EuPFml/MW7lI9OiVplGYNmJDZe0SWqQ49
WffcJ47KwYWXRra6pZqQVGbntJ5HgTlSmDvpQ4R7vBVzlftF4DKf719jqQ2b
80LTi+01YeNKnYLn1ovAM6Pdfa81HXsWiQ/J4xbQcwvrQhqm4ahwmweRXhJk
EXilxCCJjL0kbV9WBhNws0lKg3uQOsYOTXsiktXxp/EWrR3TQkjAXoWxK3oq
yZjlIdFxkIrRvS/aOaazNLxtf6GLyE0NFzw4ORBMJ8IRmsNKv0tEzOU90SeO
E6Eqn3w4pGy73xz4lIUHT4YEBnBQTuWYZnsCHcZv058pnKTCdVnpktSvFlF3
XLZvdwwZOhG6MgyLiXgBrknZJadBm2+YT4/sliGr3dmiUG0SHHPsmoteQcKZ
D2sRcUELLmZ4eDx1FqKNowumZESE0wVn2oZPkPGGyRccju0sYFdb3E+/T4Xh
0XHDzokCkMy5UNIQRIfw6CDj5ts8xHYKlbjVaMOCPCOfzeMc0K/kFPNqkqRh
HKniVf1EuLqHVxznIhUzkfkjI2Y/gEPRATFZNHyjnuu6M0uAVLzK+lWh7ZYR
gA7pWg8+1oQlBmUx5uf5qOT8dmpWgCYMCZqzy8U85NTo2Cq0WAG3Xk4uYm+Z
XuYN/IfGiZ2TQHW/PzlSTZvDA3FT59gn7wqBbRGl8LSCjAmmZom/j3IBryWQ
YXSThKuran3TWDJ0ldCTz9ihgaMsJuhDZ6RIpdf9GJBzT/sDYM6alpZmLfVR
rLh+bICDEpWcTs3I31b8BvUp/dgKTEWkFAFQ+dUZ1mPe6yQGVBuDsWk3+rI/
q5ss60NyZ4Gq/qg2y16JPRftUzI7ttmzzWwOLPKGpuruaEKFmyAxwU6EhlnE
U2EVIpTjP2jwswYNh5glj/fc5S/XJ2OGHYy4xkcqvhNoVv8uSYyKUhL9q0xJ
0NDFrwr0yZHWqHg7P1QdFljLkjb9poaHyAne5SYK8KxtPeXqqALdbX/8ekMS
Ae6hnGNV/iAHtITo1zHjNPhri8u8wx0aFKVsmnnhPQ8aG6PeF1rJAfwszXFN
kwzcjuuL1pmiwC516eibiaV/xz7voq/dX8vzU/Xdt96EhXmg8usxv12wM1W4
PE9/5JyIZB0gwFfIzSjYRwM3K/PPdO59H8aSoK7Uw3XvO6jwkNgmxPiDYtk/
q3Q919kkLtqv5IG26ZrFM3Pg/tlb+uYuFBz1JxLJP5ehjv/3h61jx1x/6f7P
v+TdBk1TTMHy+64bP2b5hD6BdN30mKZ62tCwvU+fXSAAZdzW+BvudNx+IMzR
86dZtC7+QTCjjA7H3cu5s7e1oOtxr4/rA4XAoDs9qt6dDsu/rhrL6JeAvwHT
MDCn
   "], $CellContext`rotatedVertices3D$$ = CompressedData["
1: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
iPD1m3SmRdXQtWHx6fKh9G4p/q79D1Cckuo=
   "], $CellContext`calcVertices$$ = CompressedData["
1:eJxlln001Gkbx38y2xJ5SclKqWGtwQwjhDDXYDQYjDG1USSSyCpthS1rttZa
S23byKMieiGVJ3pdPRW3t+rpEJEKyWxColAdJi/tzjC/e8/R75z7n8/5nu99
3dd13df9Wxa2TRAxiyCILbKlLFuwzYWevscUJGLH2lwuHx5vJyST1TwQ9ddl
zTn+5WecEnPjQXILD/RKdDWcry3/jIvuJL95mDcbc+6UPwO9Cyq6HVvjjbD/
4//FKa/sqZjJFfshrQTdDyWHdD/jirgw3/F+c3l4uxDOGwr15gcy4VX/k/CY
WhbmCe2dRh4HtBHJdyp43bLkPDNre8jXo6zRoM/DesNL1hXqBWaI5N+T+rTf
/gpksuHtIH3H0Xg61h/X37mOSLBD/EN/UvdsNAdAy9OtigKQKO3ba140Fiy1
l3Y67Pgac5tbpSH/jXIArZWrIz5162Aemrjg4XiZKejqaQifUjyApeDEHe4t
nRuNFSSf6R8U7tfe5eSAuV8U7e2pPhqa6f/H+s3R740cUfFIYcZJU2sgRIMd
vyZR0PT5/KH00tk3cSc8gbh8aZc0tp81k+fbx1anPqdhvYq2/KMhIvIjb3Uh
HWbyoBDOBxeGG9bz6V8sZkgYMJM3WmZNhP2fBpAuuqLc4YZ9hq6Obiu6ZQq/
tms+ashcDm2B9cb32UI0fyoPAARL9epgttFnPIFqH586tgJz0ePX2ZJKdSCI
WlFhm6hiJn90VVtqTbhivZa7tp6tkyWIfO9r6p2lIpJLmjZlBDbTpusiuw8/
iiJ1N/LZsH69INtAVZYfvxFRICUA86PO9cX3D7mBsFLDuOW+D0xkLghxNfcF
LY2xlIO9zliv+ecK0aY3HMwJ+T265ob1pP9Uvy0SoGB5/i66wquXbUsLHrqC
sfm8SrWbXGSgr1Q6RvPFnNQTSg0WVRIXqK0q+7RP0wO4PjZd9CQO1tcoeOhU
XdhwddI57NEWAQpttGitvu6G+fUVF2YVaQrQVDxR7vByP8WHqc/F+rLV7cTp
Iw4QN70vRGVfzpx3jYu5Ih7o7anfe1eXjYIVPtLB24su/b4CBXMMO16t8Uca
7OiuY20czFVUh070PfVBSB5niRc8kddj2B9dKeZSLAfM0dR54zyhP/q5bbvA
H5UpOKkXpJ7cr0ThYP/tivtC+kzl84Eb5jxIlHie8IJZ6S2NPRf4gA5vsPhY
awKO8xcy6yyE0EEfMUzOccN8KONDv77YHnIWfVLtLXSGoMU6TtnfeCMHhZ7k
KpnygTLJIvWkP9fsgcteDyYCK3VJqS0DSXVyLYaP+INEPTSvwMkcc6vDo21B
446gFZYVEJLEQ/zFrQuNb7hhPTlnDN7yBlKKrf6dMwq99KDh98wYZxhoNvi9
SboSrclJkqrL+qbI5Nhwlm8A5msbqe0ffxyrKCvs9Cit4YBXDL87UxyAtO7I
D0yHcwr9BJPHKPb1wJz0J/XEYZuCFwP9rJg6mlfLM1t0z+SeXfIZB/Tq3dkz
dt2eiOS55fEpS14KEFD/OG3SO1mxJM2+xLZDgO4q9MgoNcu1dYLVlDlkndXH
xnpT+diwNAVS3/h3bGfkKBtzrd0Jx8wb6OBro1H3JJcP45aBTWlf8YA/kBTW
Z0uF188ODG791h+qngembyz0AsnFnuArdH00sWfQY2CdP+TlZz0LzfUCVK+X
/fD8O1bf/EYVWgQfamJb1vb+xgODlVyHhDQhqBWwouvi7SB/M83pwC8ArfK+
ChRARKSt2HSVCzKjGUb0dbtDxF5tFRsXHyAOUt27op5V7AotKvRcx4Px52W7
9y0Vgp9Lq/JmbSv0Ygm3MmEtGxzLvNwnuzxBrWFgyVxV2fxsbp4bkm2B99WV
iDW/6XIFw8vR1dnlTGD46IdHXBTC+5uDN3lHXWEhVczL6GTA9PtujLYYVPuY
KAUg6WHqrKW/uAIRfiTR5wQFhFuJUSqdh3Yq4pGO6xwPUqJDUYZ4a6Js7kZb
n0mJ1OMj9ZZx7+/i7IHQ/xip8ckO8RI11bfZe6NHfLcvIsVC+Glf87B/ExNt
6BCnpgSpQULAjVM74iwAxPv3Vb5kwg+pJT9vMuMj6eMGS78cDpgJn26vPRuA
561DsfbXB0MCoMMk+O5thqyvDNX+kydlQH75hdKE6wy4Hup5+kWT7F0onOz7
ajUN0UuoPxh2CtAqjk7c7AJrcHK02j2WtQpeT9cJiabrVlGtqJf9+Q1zd40Y
o6GQnJ57KRbo0NtNsylZfqjINF5p4/gyBBcELic9FiAyznyjoDljrWxkN1p1
dKBfgLzPhQ+k02gwJyWpflhflscvu08N7mGjczo55j69lkCJ+Dm0Zi4X9xVZ
L62xtdEWVmycf/IdyfcoqtKwdv/3XIr3bkzRD5yRuA7l02ychyZFntUanJrK
Fzrh/41/AKnmhRE=
   "], $CellContext`downP$$ = $CellContext`result$176290, \
$CellContext`calcFaces$$ = {{}, {1, 3, 4, 6, 5, 7, 8, 2}, {9, 13, 11, 12, 14, 
    10}, {15, 19, 17, 18, 21, 20, 16}, {22, 26, 27, 24, 25, 28, 23}, {29, 33, 
    31, 32, 34, 30}, {35, 39, 37, 38, 36}, {40, 42, 43, 41}, {44, 46, 47, 48, 
    45}, {49, 53, 54, 51, 52, 50}, {55, 59, 57, 58, 56}, {15, 62, 60, 61, 63, 
    16}, {64, 68, 66, 67, 65}, {69, 71, 73, 72, 70}, {1, 74, 75, 23, 22, 76, 
    77, 2}, {3, 35, 36, 78, 9, 10, 81, 79, 80, 4}, {37, 82, 55, 56, 84, 83, 
    38}, {5, 50, 49, 85, 30, 29, 44, 45, 86, 6}, {11, 58, 57, 87, 90, 88, 64, 
    65, 89, 12}, {46, 91, 66, 67, 92, 47}, {24, 60, 61, 87, 57, 59, 93, 25}, {
    7, 52, 51, 18, 17, 94, 95, 8}, {15, 62, 27, 26, 41, 40, 19}, {31, 68, 64, 
    88, 96, 69, 70, 32}, {16, 63, 97, 96, 69, 71, 20}, {53, 98, 72, 73, 99, 
    54}, {1, 74, 39, 35, 3}, {37, 82, 100, 75, 74, 39}, {36, 78, 83, 
    38}, {}, {29, 44, 46, 91, 33}, {17, 94, 42, 40, 19}, {}, {31, 68, 66, 91, 
    33}, {}, {49, 85, 101, 98, 53}, {}, {18, 51, 54, 99, 21}, {45, 86, 80, 79,
     48}, {55, 82, 100, 102, 93, 59}, {42, 94, 95, 77, 76, 43}, {22, 76, 43, 
    41, 26}, {11, 58, 56, 84, 13}, {47, 92, 103, 81, 79, 48}, {5, 50, 52, 
    7}, {24, 60, 62, 27}, {65, 89, 104, 103, 92, 67}, {}, {}, {}, {}, {23, 75,
     100, 102, 28}, {9, 78, 83, 84, 13}, {}, {}, {}, {88, 96, 97, 90}, {}, {
    61, 87, 90, 97, 63}, {30, 85, 101, 34}, {}, {}, {4, 80, 86, 6}, {25, 93, 
    102, 28}, {2, 77, 95, 8}, {}, {}, {10, 81, 103, 104, 14}, {}, {}, {12, 89,
     104, 14}, {}, {32, 70, 72, 98, 101, 34}, {20, 71, 73, 99, 
    21}}, $CellContext`CalcrotatedVertices2D$$ = CompressedData["
1:eJxdknlQk1cUxRMIS4goDCJQ0IqsKjDCgFoL8x5KFZDIGEEQFctaKDggILag
1EKgsSCLIqhAZBORRRDKUlneJ5W9rWJZBbWyCtqELCThSwK104RO/ePNm9+c
d9+de8419I+gBSkQCISQD+efe1OH1aVyKxydl0TXpZkqwh9cZnmC7hXUtlf3
wswYAYq0Gg5T+7ggVqYT26QNHiZiMOV+B9fkSsEOnchUMYcH6p5yg8/QiZik
9V/92rJXSdCQGDH1rTcqRkvRQ5n+0f9YNKkic9iHAE3yel0sOapwk0Zxqkqr
EkzMGDgiyVCEHswa2sxRKYh6pm+tWaIGSaU2Tpu5KjBbDHNmTxDhfu/VxYqD
IvAtj+f3wFwdtuaGpRXZqcHmDRr5TyxWgEd6F+2ABQXzKFx2lSYI0RMziwIy
RsZizlo1RnrhyCzwUrFOsjLmhXd6VgQTsFZDRgMtSBHD7Fv2R6QoYh/Xmz3u
nhdAAuZVEL++v0IZYx7DNezFy6jGtottxCJjuw8WuIncFbD8xtOjwRQifEO2
3+B7gYhxuO3axGkiNOw3+O2zNyTMP6C1xpUvAc7sbRkdJAmySg59KfVWgvJ+
0omQ0j2+i+BjFjifDgn0Z6Psiim1rkQKvLxb+33BrCo0yErDr3y9gvoSrvn0
xSlDJ0Jvum4RERNCPcbnUjK0ukjvOOIgQTsdronC1ElwyrF3MXY9CctoeoiI
wnVwJf3YsQ4XATKZFBopIyKczw/onDiljG2ZfcpmW7PAcLVZbVqtKjwbmzDh
ksQHKeyo4oYgCoRHx6LzXuaiYacw3P2BOszP1T+xY5oNhmTMMK0m4Q3TSF4v
nyeCSjtbfpKD5ExHpj/r04cAHI/1j8siY7fqOdR9WXwk540WzwusLd8A5Kpp
MfZIDRbrlMaZnuOh4nN7VLP81WBI0KJNDsZFTs2OjwVm6+Gub1MKhy3n13gL
r2lrUs8skL8fSolUUGdzQcJc6PDpSgGwLlQp+HJVGSMYGSf9MckB3LbAaP08
ElZd9dAnlSlBVwn9t6P3KmExZjOU8QAxkut1N/yza9TfATrLqKQk68McRavX
j4+yUZKM01TTb+8ueoEGZX7sAkYiEoMP5H612nletNN/gjKdR9l5IzjoCe83
HXBaBqpWOlPz7hSI2+ZYnhrlo9B3nEbnHGUoXRi4g5soYftKL6FOLzE4s62k
yWGIjy528F7upY+s7cumFvP6kBzWmv5s5ROb69QBcFeUp7chVAK2VvKcUvAy
sKBZHRFPVoOMnhlhi58IyP2K6TQfwO046AsZD8e3enQaL4IV7vhc3X01uOrO
T0q0EaGbjsukBXYbsM302/U6SYgqFHypejdwELDaxJIYqGITTOKZ8HIRyvYb
07mrRMZCjFOm+yt5a35J6OHOEZk8JOf7gcb1b5OXUSEjya/KiAR13XyrwKAU
rZtc3sMLU4T5FpLk7b8rYOPKid5lhqvgl87NKlcnV1Fl16ORLckEuF8llFnx
oxSQE2NH4qbJ8Nc2tyX7+2QoYmx//9R7CTQ3xywU7JQC+Gmqo16LBNxLGIzV
mFOBvYriyRczq0Bkl3vex+bPtX2u+v47b4JwCcjze8Tr4u+7Iljb71fZpyKZ
hwjwOXLXDz6hhLXK/n/fc2AhnImjdlm+oYPtxUuvFoHp6/JCcrwQaMj8771y
uG6hWxW6LluFbH33oX+gE1tTuw1F20Zdcu5nr+WxM02LykrmoIMyHu2cf7AS
sAiixq5vz6oVI8+7hyZBlBKs/eqOtqmbChbzGomk2ySo+//+YNmyvHqSG+z6
E94iXNZvtIIRcc5zAlnET1F/6vsvnxQHnZY5On9tnw2mj5u3U2aQprsW3UhL
Hep2DWoP5/NBKefx5Vs0CtZ1KNzR4yYLGVxuDI4upcBpWhmHdW8dpJ70+mtz
oADo9KXF1NMosOybqqn0IRz8DZ5oV2k=
   "], $CellContext`CalcrotatedVertices3D$$ = CompressedData["
1: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
/tiVPrHqv/FfB9r+CA==
   "], $CellContext`plateCuts$$ = 
   Hold[$CellContext`numPlates$$ = 
     0; $CellContext`plateCutsGraphics$$ = {{}, {}, {}}; \
$CellContext`plateCutsDistances$$ = Rest[
       Range[$CellContext`beginningCutPosition$$, \
$CellContext`endCutPosition$$, $CellContext`plateThickness$$ + \
$CellContext`cutLoss$$]]; $CellContext`normals1$$ = 
     Append[$CellContext`allNormals$$, $CellContext`n$$]; 
    Do[$CellContext`cutPosition$$ = 
       Part[$CellContext`plateCutsDistances$$, $CellContext`j]; \
$CellContext`timePolygon2D$$ = {}; If[
        And[
        Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
         Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
        Normalize[{0, 0, 1} - 
          Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
        If[
         Or[Abs[
            Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
          0], $CellContext`projX$$ = 
          Normalize[{0, 1, 0} - 
            Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
         Null, $CellContext`projX$$ = 
          Normalize[{1, 0, 0} - 
            Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
      If[Total[
          Cross[$CellContext`n$$, $CellContext`projX$$]] < 
        0, $CellContext`projY$$ = 
        Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
        Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
       Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
         ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
       1; $CellContext`timeStepLines$$ = Append[
         Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
      If[$CellContext`constantVelocity$$, 
        Module[{$CellContext`i$, $CellContext`poly$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
            
            And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
             1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
               $CellContext`pts1[False, $CellContext`L$$, 
                
                Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
               If[$CellContext`cutPosition$$ == 0, 
                 0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
            AppendTo[$CellContext`polygons2D$$, 
              ($CellContext`polygon3D[
               Map[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                  And[
                  Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                   0], {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                Part[
                 #["vertices"], 
                 #["face"]]], 
               #["colors"]]& )[$CellContext`poly$]]; 
            AppendTo[$CellContext`polygons$$, 
              ($CellContext`polygon3D[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                 #["vertices"], 
                 #["face"]], 
               #["colors"]]& )[$CellContext`poly$]]; 
            Decrement[$CellContext`i$]; Null]; 
          If[Last[$CellContext`polygons$$] == {}, 
            AppendTo[$CellContext`timeStepLines$$, 
              
              Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
               2]]; $CellContext`timeStepLines$$ = Sort[
               
               Select[$CellContext`timeStepLines$$, # >= 
                Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
            Null]; Null]; 
        Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeStepLines$$] - 
            1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; While[
            
            And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
             1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
               $CellContext`pts1[False, $CellContext`L$$, 
                
                Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
               If[$CellContext`cutPosition$$ == 0, 
                 0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
            AppendTo[$CellContext`timeStepLines2D$$, 
              ($CellContext`polygon[
               Map[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                  And[
                  Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                   0], {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                Part[
                 #["vertices"], 
                 #["face"]]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            AppendTo[$CellContext`timeStepLines3D$$, 
              ($CellContext`polygon[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                 #["vertices"], 
                 #["face"]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            Decrement[$CellContext`i$]; 
            Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
        Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1], 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`polygons2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`polygons$$, 
                ($CellContext`polygon3D[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                   #["vertices"], 
                   #["face"]], 
                 #["colors"]]& )[$CellContext`poly$]] 
              Decrement[$CellContext`i$]; Null] 
           If[Last[$CellContext`polygons$$] == {}, 
             AppendTo[$CellContext`timeStepLines$$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                2]]; $CellContext`timeStepLines$$ = Sort[
                
                Select[$CellContext`timeStepLines$$, # >= 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
             Null]; Null]; 
        Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeStepLines$$] - 1; 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
             Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
              1]]; $CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; While[
            And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
            Quiet[$CellContext`tempVelocity$ = 
              NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                  Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
               Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
              2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
               $CellContext`pts1[False, $CellContext`tempL$, 
                
                Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
               If[$CellContext`cutPosition$$ == 0, 
                 0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
            AppendTo[$CellContext`timeStepLines2D$$, 
              ($CellContext`polygon[
               Map[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                  And[
                  Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                   0], {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                Part[
                 #["vertices"], 
                 #["face"]]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            AppendTo[$CellContext`timeStepLines3D$$, 
              ($CellContext`polygon[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                 #["vertices"], 
                 #["face"]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            Decrement[$CellContext`i$]; Null]; 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, 1]}]/
             Part[$CellContext`timeStepLines$$, 
              1]]; $CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]]; 
        Null]; $CellContext`textX$$ = Max[
         Part[
          Part[
           Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
          1]]; $CellContext`textY$$ = Max[
         Part[
          Part[
           Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
          2]]; $CellContext`timePolygonColor$$ = Which[
         Or[Sort[
            Abs[$CellContext`n$$]] == {0, 0, 1}, 
          RegionMember[
           ConvexHullRegion[{{
              Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 0.}, {
              Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {-
              Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 0.}, {-Part[$CellContext`ds$$, 3], -
              Part[$CellContext`ds$$, 5], 0.}, {
              Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}, {
              Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
              Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}}], Part[
             Part[
              Last[$CellContext`timeStepLines3D$$], 1], 1] - {
           0.01, 0.01, 0}]], 
         Darker[
          GrayLevel[0.7], 0], Sort[
           Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
         Darker[
          Lighter[Magenta, 0.4], 0], Sort[
           Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
         Darker[
          Blend[{Yellow, Green}, 0.7], 
          0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
         Polygon[
          Part[
           Last[$CellContext`timeStepLines2D$$], 
           1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
         Polygon[
          Part[
           Last[$CellContext`timeStepLines3D$$], 1]]}; AppendTo[
        Part[$CellContext`plateCutsGraphics$$, 3], {{
          Thickness[
          0.002], $CellContext`polygons$$}, $CellContext`timePolygon3D$$, {
          Thickness[0.005], $CellContext`timeStepLines3D$$}}]; AppendTo[
        Part[$CellContext`plateCutsGraphics$$, 1], 
        Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
           Thickness[0.002], $CellContext`timeStepLines2D$$}, 
          Text["Time of first appearance = " <> ToString[
             NumberForm[
              If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
               Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
           " hrs\nTime of growth completion = " <> ToString[
             NumberForm[$CellContext`t$$, {10, 2}]] <> 
           " hrs\nTime Intervals = " <> ToString[
             NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
           "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
           ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
           "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
           ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
           "\nCut Plane: " <> StringReplace[
             
             ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
             "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
              ")", "," -> " "}] <> "\nPlate Thickness = " <> 
           ToString[$CellContext`plateThickness$$] <> "\nCut Distance " <> 
           ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
            1, $CellContext`textY$$ + 1}]}, Axes -> True, ImageSize -> 500, 
         PlotLabel -> 
         "Plate " <> ToString[$CellContext`j + 1] <> " Back Surface ", 
         AxesLabel -> {"(mm)", "(mm)"}]]; 
      Export[$CellContext`saveDirectory$$ <> "Plate " <> 
        ToString[$CellContext`j + 1] <> " Back Surface" <> ".jpeg", 
        Part[
         Part[$CellContext`plateCutsGraphics$$, 
          1], $CellContext`j]]; $CellContext`cutPosition$$ = 
       Part[$CellContext`plateCutsDistances$$, $CellContext`j] - \
$CellContext`plateThickness$$; $CellContext`timePolygon2D$$ = {}; If[
        And[
        Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
         Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
        Normalize[{0, 0, 1} - 
          Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
        If[
         Or[Abs[
            Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
          0], $CellContext`projX$$ = 
          Normalize[{0, 1, 0} - 
            Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
         Null, $CellContext`projX$$ = 
          Normalize[{1, 0, 0} - 
            Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
      If[Total[
          Cross[$CellContext`n$$, $CellContext`projX$$]] < 
        0, $CellContext`projY$$ = 
        Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
        Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
       Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
         ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
       1; $CellContext`timeStepLines$$ = Append[
         Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
      If[$CellContext`constantVelocity$$, 
        Module[{$CellContext`i$, $CellContext`poly$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
            
            And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
             1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
               $CellContext`pts1[False, $CellContext`L$$, 
                
                Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
               If[$CellContext`cutPosition$$ == 0, 
                 0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
            AppendTo[$CellContext`polygons2D$$, 
              ($CellContext`polygon3D[
               Map[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                  And[
                  Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                   0], {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                Part[
                 #["vertices"], 
                 #["face"]]], 
               #["colors"]]& )[$CellContext`poly$]]; 
            AppendTo[$CellContext`polygons$$, 
              ($CellContext`polygon3D[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                 #["vertices"], 
                 #["face"]], 
               #["colors"]]& )[$CellContext`poly$]]; 
            Decrement[$CellContext`i$]; Null]; 
          If[Last[$CellContext`polygons$$] == {}, 
            AppendTo[$CellContext`timeStepLines$$, 
              
              Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
               2]]; $CellContext`timeStepLines$$ = Sort[
               
               Select[$CellContext`timeStepLines$$, # >= 
                Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
            Null]; Null]; 
        Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeStepLines$$] - 
            1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; While[
            
            And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
             1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
               $CellContext`pts1[False, $CellContext`L$$, 
                
                Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
               If[$CellContext`cutPosition$$ == 0, 
                 0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
            AppendTo[$CellContext`timeStepLines2D$$, 
              ($CellContext`polygon[
               Map[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                  And[
                  Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                   0], {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                Part[
                 #["vertices"], 
                 #["face"]]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            AppendTo[$CellContext`timeStepLines3D$$, 
              ($CellContext`polygon[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                 #["vertices"], 
                 #["face"]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            Decrement[$CellContext`i$]; 
            Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
        Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1], 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`polygons2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`polygons$$, 
                ($CellContext`polygon3D[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                   #["vertices"], 
                   #["face"]], 
                 #["colors"]]& )[$CellContext`poly$]] 
              Decrement[$CellContext`i$]; Null] 
           If[Last[$CellContext`polygons$$] == {}, 
             AppendTo[$CellContext`timeStepLines$$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                2]]; $CellContext`timeStepLines$$ = Sort[
                
                Select[$CellContext`timeStepLines$$, # >= 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
             Null]; Null]; 
        Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
           Length[$CellContext`timeStepLines$$] - 1; 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
             Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
              1]]; $CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; While[
            And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
            Quiet[$CellContext`tempVelocity$ = 
              NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                  Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
               Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
              2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
               $CellContext`pts1[False, $CellContext`tempL$, 
                
                Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
               If[$CellContext`cutPosition$$ == 0, 
                 0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
            AppendTo[$CellContext`timeStepLines2D$$, 
              ($CellContext`polygon[
               Map[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                  And[
                  Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                   0], {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                   
                   Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                Part[
                 #["vertices"], 
                 #["face"]]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            AppendTo[$CellContext`timeStepLines3D$$, 
              ($CellContext`polygon[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                 #["vertices"], 
                 #["face"]], 
               ConstantArray[0, 
                Length[
                 #["colors"]]]]& )[$CellContext`poly$]]; 
            Decrement[$CellContext`i$]; Null]; 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, 1]}]/
             Part[$CellContext`timeStepLines$$, 
              1]]; $CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, 
               1], $CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]]; 
        Null]; $CellContext`textX$$ = Max[
         Part[
          Part[
           Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
          1]]; $CellContext`textY$$ = Max[
         Part[
          Part[
           Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
          2]]; $CellContext`timePolygonColor$$ = Which[
         Or[Sort[
            Abs[$CellContext`n$$]] == {0, 0, 1}, 
          RegionMember[
           ConvexHullRegion[{{
              Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 0.}, {
              Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {-
              Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 0.}, {-Part[$CellContext`ds$$, 3], -
              Part[$CellContext`ds$$, 5], 0.}, {
              Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}, {
              Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
              Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
              Part[$CellContext`ds$$, 5], 
              Part[$CellContext`ds$$, 2]}}], Part[
             Part[
              Last[$CellContext`timeStepLines3D$$], 1], 1] - {
           0.01, 0.01, 0}]], 
         Darker[
          GrayLevel[0.7], 0], Sort[
           Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
         Darker[
          Lighter[Magenta, 0.4], 0], Sort[
           Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
         Darker[
          Blend[{Yellow, Green}, 0.7], 
          0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
         Polygon[
          Part[
           Last[$CellContext`timeStepLines2D$$], 
           1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
         Polygon[
          Part[
           Last[$CellContext`timeStepLines3D$$], 1]]}; AppendTo[
        Part[$CellContext`plateCutsGraphics$$, 2], 
        Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
           Thickness[0.002], $CellContext`timeStepLines2D$$}, 
          Text["Time of first appearance = " <> ToString[
             NumberForm[
              If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
               Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
           " hrs\nTime of growth completion = " <> ToString[
             NumberForm[$CellContext`t$$, {10, 2}]] <> 
           " hrs\nTime Intervals = " <> ToString[
             NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
           "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
           ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
           "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
           ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
           "\nCut Plane: " <> StringReplace[
             
             ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
             "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
              ")", "," -> " "}] <> "\nPlate Thickness = " <> 
           ToString[$CellContext`plateThickness$$] <> "\nCut Distance " <> 
           ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
            1, $CellContext`textY$$ + 1}]}, ImageSize -> 500, Axes -> True, 
         PlotLabel -> 
         "Plate " <> ToString[$CellContext`j + 1] <> " Front Surface ", 
         AxesLabel -> {"(mm)", "(mm)"}]]; 
      Export[$CellContext`saveDirectory$$ <> "Plate " <> 
        ToString[$CellContext`j + 1] <> " Front Surface" <> ".jpeg", 
        Part[
         Part[$CellContext`plateCutsGraphics$$, 2], $CellContext`j]]; AppendTo[
        Part[
         Part[$CellContext`plateCutsGraphics$$, 3], $CellContext`j], {
         Thickness[0.002], $CellContext`polygons$$}]; AppendTo[
        Part[
         Part[$CellContext`plateCutsGraphics$$, 
          3], $CellContext`j], $CellContext`timePolygon3D$$]; AppendTo[
        Part[
         Part[$CellContext`plateCutsGraphics$$, 3], $CellContext`j], {
         Thickness[
         0.005], $CellContext`timeStepLines3D$$}]; \
$CellContext`tempPlateFaces$$ = Most[
         Most[
          MeshPrimitives[
           RegionDifference[
            
            ConvexHullRegion[($CellContext`l0$$/(
              2 $CellContext`L$$)) \
$CellContext`polyhedron[$CellContext`normals1$$, 
               Append[
                $CellContext`pts1[
                False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], ($CellContext`cutPosition$$ + \
$CellContext`plateThickness$$) 2 $CellContext`L$$ $CellContext`n$$]][
              "vertices"]], 
            
            ConvexHullRegion[($CellContext`l0$$/(
              2 $CellContext`L$$)) \
$CellContext`polyhedron[$CellContext`normals1$$, 
               Append[
                $CellContext`pts1[
                False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], $CellContext`cutPosition$$ 
                2 $CellContext`L$$ $CellContext`n$$]]["vertices"]]], 2]]]; 
      AppendTo[
        Part[
         Part[$CellContext`plateCutsGraphics$$, 3], $CellContext`j], 
        Table[{
          Which[Chop[
             Sort[
              Abs[
               Normalize[
                Cross[Part[
                   PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 3] - 
                 Part[
                  PolygonCoordinates[
                   Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 1], 
                 Part[
                   PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 2] - 
                 Part[
                  PolygonCoordinates[
                   Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 
                  1]]]]]] == {0, 0, 1}, 
           Darker[
            GrayLevel[0.7], 0], Chop[
             Sort[
              Abs[
               Normalize[
                Cross[Part[
                   PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 3] - 
                 Part[
                  PolygonCoordinates[
                   Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 1], 
                 Part[
                   PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 2] - 
                 Part[
                  PolygonCoordinates[
                   Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 
                  1]]]]]] == Normalize[{0, 1, 1}], 
           Darker[
            Lighter[Magenta, 0.4], 0], Chop[
             Sort[
              Abs[
               Normalize[
                Cross[Part[
                   PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 3] - 
                 Part[
                  PolygonCoordinates[
                   Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 1], 
                 Part[
                   PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 2] - 
                 Part[
                  PolygonCoordinates[
                   Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 
                  1]]]]]] == Normalize[{1, 1, 1}], 
           Darker[
            Blend[{Yellow, Green}, 0.7], 0]], 
          
          Part[$CellContext`tempPlateFaces$$, $CellContext`i]}, \
{$CellContext`i, 
          Length[$CellContext`tempPlateFaces$$]}]]; 
      Increment[$CellContext`numPlates$$]; Null, {$CellContext`j, 1, 
       Length[$CellContext`plateCutsDistances$$]}]; $CellContext`numPlates$$ = \
$CellContext`numPlates$$ + 
      2; $CellContext`cutPosition$$ = $CellContext`beginningCutPosition$$; \
$CellContext`timePolygon2D$$ = {}; If[
      And[
      Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
       Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
      Normalize[{0, 0, 1} - 
        Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
      If[
       Or[Abs[
          Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
        0], $CellContext`projX$$ = 
        Normalize[{0, 1, 0} - 
          Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
       Null, $CellContext`projX$$ = 
        Normalize[{1, 0, 0} - 
          Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; If[Total[
        Cross[$CellContext`n$$, $CellContext`projX$$]] < 
      0, $CellContext`projY$$ = 
      Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
      Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
     Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
       ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
     1; $CellContext`timeStepLines$$ = Append[
       Range[$CellContext`tMin$$, $CellContext`t$$, $CellContext`timeStep$$], \
$CellContext`t$$]; $CellContext`timingTest$$ = {}; 
    If[$CellContext`constantVelocity$$, 
      Module[{$CellContext`i$, $CellContext`poly$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
          
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
           1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`polygons2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             #["colors"]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`polygons$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             #["colors"]]& )[$CellContext`poly$]]; Decrement[$CellContext`i$]; 
          Null]; If[
         Last[$CellContext`polygons$$] == {}, 
          AppendTo[$CellContext`timeStepLines$$, 
            
            Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
             2]]; $CellContext`timeStepLines$$ = Sort[
             
             Select[$CellContext`timeStepLines$$, # >= 
              Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; Null]; 
        Null]; Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeStepLines$$] - 
          1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`L$$, 
            
            Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
             1], $CellContext`allNormals$$], 
           If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; While[
          
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
           1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          Decrement[$CellContext`i$]; 
          Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`L$$, 
            Part[$CellContext`timeStepLines$$, 1], $CellContext`allNormals$$],
            If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
      Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
           And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1], 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
              Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`polygons2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              #["colors"]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`polygons$$, 
              ($CellContext`polygon3D[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                 #["vertices"], 
                 #["face"]], 
               #["colors"]]& )[$CellContext`poly$]] 
            Decrement[$CellContext`i$]; Null] 
         If[Last[$CellContext`polygons$$] == {}, 
           AppendTo[$CellContext`timeStepLines$$, 
             
             Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
              2]]; $CellContext`timeStepLines$$ = Sort[
              
              Select[$CellContext`timeStepLines$$, # >= 
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; Null]; 
        Null]; Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeStepLines$$] - 1; 
        Quiet[$CellContext`tempVelocity$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
           Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
            1]]; $CellContext`tempL$ = $CellContext`l0$$/(
          2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`tempL$, 
            
            Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
             1], $CellContext`allNormals$$], 
           If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; While[
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
             Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          Decrement[$CellContext`i$]; Null]; 
        Quiet[$CellContext`tempVelocity$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              Part[$CellContext`timeStepLines$$, 1]}]/
           Part[$CellContext`timeStepLines$$, 
            1]]; $CellContext`tempL$ = $CellContext`l0$$/(
          2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`tempL$, 
            Part[$CellContext`timeStepLines$$, 1], $CellContext`allNormals$$],
            If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]]; 
      Null]; $CellContext`textX$$ = Max[
       Part[
        Part[
         Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
        1]]; $CellContext`textY$$ = Max[
       Part[
        Part[
         Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
        2]]; $CellContext`timePolygonColor$$ = Which[
       Or[Sort[
          Abs[$CellContext`n$$]] == {0, 0, 1}, 
        RegionMember[
         ConvexHullRegion[{{
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 0.}, {
            Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {-
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 0.}, {-Part[$CellContext`ds$$, 3], -
            Part[$CellContext`ds$$, 5], 0.}, {
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {
            Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}}], Part[
           Part[
            Last[$CellContext`timeStepLines3D$$], 1], 1] - {0.01, 0.01, 0}]], 
       Darker[
        GrayLevel[0.7], 0], Sort[
         Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
       Darker[
        Lighter[Magenta, 0.4], 0], Sort[
         Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
       Darker[
        Blend[{Yellow, Green}, 0.7], 
        0]]; $CellContext`timePolygon2D$$ = {$CellContext`timePolygonColor$$, 
       Polygon[
        Part[
         Last[$CellContext`timeStepLines2D$$], 
         1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
       Polygon[
        Part[
         Last[$CellContext`timeStepLines3D$$], 1]]}; PrependTo[
      Part[$CellContext`plateCutsGraphics$$, 3], {{
        Thickness[
        0.002], $CellContext`polygons$$}, $CellContext`timePolygon3D$$, {
        Thickness[0.005], $CellContext`timeStepLines3D$$}}]; PrependTo[
      Part[$CellContext`plateCutsGraphics$$, 1], 
      Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
         Thickness[0.002], $CellContext`timeStepLines2D$$}, 
        Text["Time of first appearance = " <> ToString[
           NumberForm[
            If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
             Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
         " hrs\nTime of growth completion = " <> ToString[
           NumberForm[$CellContext`t$$, {10, 2}]] <> 
         " hrs\nTime Intervals = " <> ToString[
           NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
         "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
         ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
         "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
         ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
         "\nCut Plane: " <> StringReplace[
           
           ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
           "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
            ")", "," -> " "}] <> "\nPlate Thickness = " <> ToString[
           NumberForm[
            Abs[-Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                  Part[$CellContext`pts$$, 
                   Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
         "\nCut Distance " <> 
         ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
          1, $CellContext`textY$$ + 1}]}, Axes -> True, ImageSize -> 500, 
       PlotLabel -> "Plate 1 Front Surface", AxesLabel -> {"(mm)", "(mm)"}]]; 
    Export[$CellContext`saveDirectory$$ <> "Plate " <> ToString[1] <> 
      " Front Surface" <> ".jpeg", 
      Part[
       Part[$CellContext`plateCutsGraphics$$, 1], 
       1]]; $CellContext`p1$$ = \
$CellContext`polyhedron[$CellContext`normals1$$, 
       Append[
        $CellContext`pts1[
        False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], $CellContext`cutPosition$$ 
        2 $CellContext`L$$ $CellContext`n$$]]; $CellContext`vertices1$$ = If[
        Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
        1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) $CellContext`p1$$[
       "vertices"]; $CellContext`faces1$$ = $CellContext`p1$$["faces"]; 
    If[Flatten[
        Part[$CellContext`faces1$$, 
         Flatten[
          Position[$CellContext`normals$$, (1/Max[
             Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 
          2]]] != {}, $CellContext`lastSurface2D$$ = Map[If[
          And[
          Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 0], {
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
         Part[$CellContext`vertices1$$, 
          Flatten[
           Part[$CellContext`faces1$$, 
            Flatten[
             Position[$CellContext`normals$$, (1/Max[
                Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 2]]]]]; 
      PrependTo[
        Part[$CellContext`plateCutsGraphics$$, 2], 
        Graphics[{{
           Which[Sort[
              Abs[$CellContext`n$$]] == {0, 0, 1}, 
            Darker[
             GrayLevel[0.7], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
            Darker[
             Lighter[Magenta, 0.4], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
            Darker[
             Blend[{Yellow, Green}, 0.7], 0]], 
           Polygon[$CellContext`lastSurface2D$$]}, 
          Text["Time of first appearance = " <> ToString[
              ToString[
               NumberForm[$CellContext`t$$, {10, 2}]]] <> 
            " hrs\nTime of growth completion = " <> ToString[
              NumberForm[$CellContext`t$$, {10, 2}]] <> " hrs" 
           "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
            ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
            "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
            ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
            "\nCut Plane: " <> StringReplace[
              
              ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
              "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
               ")", "," -> " "}] <> "\nPlate Thickness = " <> ToString[
              NumberForm[
               Abs[-Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
            "\nDistance = " <> ToString[
              
              NumberForm[-
               Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                   Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 2]]]], {10,
                2}]], {Max[
              Part[$CellContext`lastSurface2D$$, All, 1]] + 0.5, Max[
              Part[$CellContext`lastSurface2D$$, All, 2]] + 1}]}, Axes -> 
         True, ImageSize -> 500, PlotLabel -> "Plate 1 Back Surface", 
         AxesLabel -> {"(mm)", "(mm)"}]], 
      PrependTo[
       Part[$CellContext`plateCutsGraphics$$, 2], 
       "Surface is point or line"]]; 
    Export[$CellContext`saveDirectory$$ <> "Plate " <> ToString[1] <> 
      " Back Surface" <> ".jpeg", 
      Part[
       Part[$CellContext`plateCutsGraphics$$, 2], 1]]; AppendTo[
      Part[
       Part[$CellContext`plateCutsGraphics$$, 3], 1], 
      Table[
       If[Part[$CellContext`faces1$$, $CellContext`i] != {}, {
         Block[{$CellContext`k = Total[
             Map[Abs, 
              Part[$CellContext`normals1$$, $CellContext`i]]]}, 
          Switch[
           Part[
            Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
           Darker[
            GrayLevel[0.7], 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 1]]]], 2, 
           Darker[
            Lighter[Magenta, 0.4], 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 2]]]], 3, 
           Darker[
            Blend[{Yellow, Green}, 0.7], 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 3]]]], 5, 
           Darker[Blue, 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 5]]]], 7, 
           Darker[Yellow, 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 7]]]]]], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[
           Part[$CellContext`vertices1$$, 
            
            Part[$CellContext`faces1$$, $CellContext`i]]]}}, {}], \
{$CellContext`i, 1, 
        Length[
         If[$CellContext`drawCutPlane$$, $CellContext`normals1$$, \
$CellContext`allNormals$$]]}]]; $CellContext`cutPosition$$ = 
     Last[$CellContext`plateCutsDistances$$] + $CellContext`cutLoss$$; \
$CellContext`timePolygon2D$$ = {}; If[
      And[
      Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
       Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
      Normalize[{0, 0, 1} - 
        Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
      If[
       Or[Abs[
          Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
        0], $CellContext`projX$$ = 
        Normalize[{0, 1, 0} - 
          Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
       Null, $CellContext`projX$$ = 
        Normalize[{1, 0, 0} - 
          Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; If[Total[
        Cross[$CellContext`n$$, $CellContext`projX$$]] < 
      0, $CellContext`projY$$ = 
      Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
      Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
     Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
       ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
     1; $CellContext`timeStepLines$$ = Append[
       Range[$CellContext`tMin$$, $CellContext`t$$, $CellContext`timeStep$$], \
$CellContext`t$$]; $CellContext`timingTest$$ = {}; 
    If[$CellContext`constantVelocity$$, 
      Module[{$CellContext`i$, $CellContext`poly$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
          
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
           1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`polygons2D$$, 
            ($CellContext`polygon3D[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             #["colors"]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`polygons$$, 
            ($CellContext`polygon3D[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             #["colors"]]& )[$CellContext`poly$]]; Decrement[$CellContext`i$]; 
          Null]; If[
         Last[$CellContext`polygons$$] == {}, 
          AppendTo[$CellContext`timeStepLines$$, 
            
            Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
             2]]; $CellContext`timeStepLines$$ = Sort[
             
             Select[$CellContext`timeStepLines$$, # >= 
              Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; Null]; 
        Null]; Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeStepLines$$] - 
          1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`L$$, 
            
            Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
             1], $CellContext`allNormals$$], 
           If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; While[
          
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
           1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`L$$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          Decrement[$CellContext`i$]; 
          Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`L$$, 
            Part[$CellContext`timeStepLines$$, 1], $CellContext`allNormals$$],
            If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
      Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
           And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1], 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
              Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`polygons2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              #["colors"]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`polygons$$, 
              ($CellContext`polygon3D[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                 #["vertices"], 
                 #["face"]], 
               #["colors"]]& )[$CellContext`poly$]] 
            Decrement[$CellContext`i$]; Null] 
         If[Last[$CellContext`polygons$$] == {}, 
           AppendTo[$CellContext`timeStepLines$$, 
             
             Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
              2]]; $CellContext`timeStepLines$$ = Sort[
              
              Select[$CellContext`timeStepLines$$, # >= 
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; Null]; 
        Null]; Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
         Length[$CellContext`timeStepLines$$] - 1; 
        Quiet[$CellContext`tempVelocity$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
           Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
            1]]; $CellContext`tempL$ = $CellContext`l0$$/(
          2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`tempL$, 
            
            Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
             1], $CellContext`allNormals$$], 
           If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; While[
          And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
          Quiet[$CellContext`tempVelocity$ = 
            NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
             Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
            2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
             $CellContext`pts1[False, $CellContext`tempL$, 
              
              Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
             If[$CellContext`cutPosition$$ == 0, 
               0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
          AppendTo[$CellContext`timeStepLines2D$$, 
            ($CellContext`polygon[
             Map[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                And[
                Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                 0], {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                 
                 Dot[# - 
                  Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
              Part[
               #["vertices"], 
               #["face"]]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          AppendTo[$CellContext`timeStepLines3D$$, 
            ($CellContext`polygon[If[
               Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
               1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
               #["vertices"], 
               #["face"]], 
             ConstantArray[0, 
              Length[
               #["colors"]]]]& )[$CellContext`poly$]]; 
          Decrement[$CellContext`i$]; Null]; 
        Quiet[$CellContext`tempVelocity$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              Part[$CellContext`timeStepLines$$, 1]}]/
           Part[$CellContext`timeStepLines$$, 
            1]]; $CellContext`tempL$ = $CellContext`l0$$/(
          2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
           $CellContext`pts1[False, $CellContext`tempL$, 
            Part[$CellContext`timeStepLines$$, 1], $CellContext`allNormals$$],
            If[$CellContext`cutPosition$$ == 0, 
             0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
        AppendTo[$CellContext`timeStepLines2D$$, 
          ($CellContext`polygon3D[
           Map[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
              And[
              Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
               0], {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
               
               Dot[# - 
                Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[
             #["vertices"], 
             #["face"]]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]; 
        AppendTo[$CellContext`timeStepLines3D$$, 
          ($CellContext`polygon3D[If[
             Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
             1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
             #["vertices"], 
             #["face"]], 
           ConstantArray[0, 
            Length[
             #["colors"]]]]& )[$CellContext`poly$]]]; 
      Null]; $CellContext`textX$$ = Max[
       Part[
        Part[
         Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
        1]]; $CellContext`textY$$ = Max[
       Part[
        Part[
         Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
        2]]; $CellContext`timePolygonColor$$ = Which[
       Or[Sort[
          Abs[$CellContext`n$$]] == {0, 0, 1}, 
        RegionMember[
         ConvexHullRegion[{{
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 0.}, {
            Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {-
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 0.}, {-Part[$CellContext`ds$$, 3], -
            Part[$CellContext`ds$$, 5], 0.}, {
            Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {
            Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
            Part[$CellContext`ds$$, 5], 
            Part[$CellContext`ds$$, 2]}}], Part[
           Part[
            Last[$CellContext`timeStepLines3D$$], 1], 1] - {0.01, 0.01, 0}]], 
       Darker[
        GrayLevel[0.7], 0], Sort[
         Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
       Darker[
        Lighter[Magenta, 0.4], 0], Sort[
         Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
       Darker[
        Blend[{Yellow, Green}, 0.7], 
        0]]; $CellContext`timePolygon2D$$ = {$CellContext`timePolygonColor$$, 
       Polygon[
        Part[
         Last[$CellContext`timeStepLines2D$$], 
         1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
       Polygon[
        Part[
         Last[$CellContext`timeStepLines3D$$], 1]]}; AppendTo[
      Part[$CellContext`plateCutsGraphics$$, 3], {{
        Thickness[
        0.002], $CellContext`polygons$$}, $CellContext`timePolygon3D$$, {
        Thickness[0.005], $CellContext`timeStepLines3D$$}}]; AppendTo[
      Part[$CellContext`plateCutsGraphics$$, 2], 
      Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
         Thickness[0.002], $CellContext`timeStepLines2D$$}, 
        Text["Time of first appearance = " <> ToString[
           NumberForm[
            If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
             Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
         " hrs\nTime of growth completion = " <> ToString[
           NumberForm[$CellContext`t$$, {10, 2}]] <> 
         " hrs\nTime Intervals = " <> ToString[
           NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
         "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
         ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
         "\nCut Plane: " <> StringReplace[
           
           ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
           "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
            ")", "," -> " "}] <> "\nPlate Thickness = " <> ToString[
           NumberForm[
            Abs[Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                 Part[$CellContext`pts$$, 
                  Flatten[
                   Position[$CellContext`normals$$, (1/Max[
                    Abs[$CellContext`n$$]]) $CellContext`n$$], 
                   2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
         "\nCut Distance " <> 
         ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
          1, $CellContext`textY$$ + 1}]}, Axes -> True, ImageSize -> 500, 
       PlotLabel -> 
       "Plate " <> ToString[$CellContext`numPlates$$] <> " Front Surface ", 
       AxesLabel -> {"(mm)", "(mm)"}]]; 
    Export[$CellContext`saveDirectory$$ <> "Plate " <> 
      ToString[$CellContext`numPlates$$] <> " Front Surface" <> ".jpeg", 
      Part[
       Part[$CellContext`plateCutsGraphics$$, 
        2], $CellContext`numPlates$$]]; $CellContext`p1$$ = \
$CellContext`polyhedron[
       Append[$CellContext`allNormals$$, -$CellContext`n$$], 
       Append[
        $CellContext`pts1[
        False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], (-$CellContext`cutPosition$$) 
        2 $CellContext`L$$ (-$CellContext`n$$)]]; $CellContext`vertices1$$ = 
     If[
        Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
        1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) $CellContext`p1$$[
       "vertices"]; $CellContext`faces1$$ = $CellContext`p1$$["faces"]; 
    If[Flatten[
        Part[$CellContext`faces1$$, 
         Flatten[
          Position[$CellContext`normals$$, (1/Max[
             Abs[$CellContext`n$$]]) $CellContext`n$$], 
          2]]] != {}, $CellContext`lastSurface2D$$ = Map[If[
          And[
          Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 0], {
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
           
           Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
         Part[$CellContext`vertices1$$, 
          Flatten[
           Part[$CellContext`faces1$$, 
            Flatten[
             Position[$CellContext`normals$$, (1/Max[
                Abs[$CellContext`n$$]]) $CellContext`n$$], 2]]]]]; AppendTo[
        Part[$CellContext`plateCutsGraphics$$, 1], 
        Graphics[{{
           Which[Sort[
              Abs[$CellContext`n$$]] == {0, 0, 1}, 
            Darker[
             GrayLevel[0.7], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
            Darker[
             Lighter[Magenta, 0.4], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
            Darker[
             Blend[{Yellow, Green}, 0.7], 0]], 
           Polygon[$CellContext`lastSurface2D$$]}, 
          Text["Time of first appearance = " <> ToString[
             ToString[
              NumberForm[$CellContext`t$$, {10, 2}]]] <> 
           " hrs\nTime of growth completion = " <> ToString[
             NumberForm[$CellContext`t$$, {10, 2}]] <> " hrs" <> 
           "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
           ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
           "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
           ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
           "\nCut Plane: " <> StringReplace[
             
             ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
             "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
              ")", "," -> " "}] <> "\nPlate Thickness = " <> ToString[
             NumberForm[
              Abs[Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                   Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[$CellContext`n$$]]) $CellContext`n$$], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
           "\nDistance = " <> ToString[
             NumberForm[
              Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                 Part[$CellContext`pts$$, 
                  Flatten[
                   Position[$CellContext`normals$$, (1/Max[
                    Abs[$CellContext`n$$]]) $CellContext`n$$], 2]]]], {10, 
              2}]], {Max[
              Part[$CellContext`lastSurface2D$$, All, 1]] + 0.5, Max[
              Part[$CellContext`lastSurface2D$$, All, 2]] + 1}]}, Axes -> 
         True, ImageSize -> 500, PlotLabel -> 
         "Plate " <> ToString[$CellContext`numPlates$$] <> " Back Surface ", 
         AxesLabel -> {"(mm)", "(mm)"}]], 
      AppendTo[
       Part[$CellContext`plateCutsGraphics$$, 1], 
       "Surface is point or line"]]; 
    Export[$CellContext`saveDirectory$$ <> "Plate " <> 
      ToString[$CellContext`numPlates$$] <> " Back Surface" <> ".jpeg", 
      Part[
       Part[$CellContext`plateCutsGraphics$$, 1], $CellContext`numPlates$$]]; 
    AppendTo[
      Part[
       Part[$CellContext`plateCutsGraphics$$, 3], 
       Length[
        Part[$CellContext`plateCutsGraphics$$, 3]]], 
      Table[
       If[Part[$CellContext`faces1$$, $CellContext`i] != {}, {
         Block[{$CellContext`k = Total[
             Map[Abs, 
              Part[$CellContext`normals1$$, $CellContext`i]]]}, 
          Switch[
           Part[
            Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
           Darker[
            GrayLevel[0.7], 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 1]]]], 2, 
           Darker[
            Lighter[Magenta, 0.4], 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 2]]]], 3, 
           Darker[
            Blend[{Yellow, Green}, 0.7], 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 3]]]], 5, 
           Darker[Blue, 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 5]]]], 7, 
           Darker[Yellow, 0.5 Abs[
              Sign[
               Chop[$CellContext`k - 7]]]]]], {
          EdgeForm[
           Thickness[Medium]], 
          Polygon[
           Part[$CellContext`vertices1$$, 
            
            Part[$CellContext`faces1$$, $CellContext`i]]]}}, {}], \
{$CellContext`i, 1, 
        Length[
         If[$CellContext`drawCutPlane$$, $CellContext`normals1$$, \
$CellContext`allNormals$$]]}]]; 
    Part[$CellContext`plateCutsGraphics$$, 3] = 
     Map[Graphics3D[#, Axes -> $CellContext`boxed$$, 
        AxesLabel -> {"x", "y", "z"}, Lighting -> "Neutral", 
        ImageSize -> {500, 500}]& , 
       Part[$CellContext`plateCutsGraphics$$, 3]]; 
    Null], $CellContext`plateCutsDistances$$, \
$CellContext`plateCutsGraphics$$ = {}, $CellContext`plateThickness$$ = 
   0.4, $CellContext`cutLoss$$ = 
   0.1, $CellContext`beginningCutPosition$$ = -2.0599999999999996`, \
$CellContext`endCutPosition$$ = 
   1, $CellContext`tempPlateFaces$$, $CellContext`numPlates$$, \
$CellContext`lastSurface2D$$, $CellContext`\[CapitalDelta]\[Gamma]3z$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]pos1z$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]neg1z$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]posxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]negxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]pos1z$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]neg1z$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]5z$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]posxneg5y$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]neg5xposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]negxpos5y$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]posxnegy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]posxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]negxposy$$ = 
   0, $CellContext`\[CapitalDelta]\[Delta]negxnegy$$ = 
   0, $CellContext`\[Delta]1$$ = 5, $CellContext`\[CapitalDelta]100negz$$ = 
   0, $CellContext`f00neg1$$ = 1, $CellContext`f00pos1$$ = 
   0.6619999999999999, $CellContext`fpos100$$ = 0.9, $CellContext`fneg100$$ = 
   0.84, $CellContext`f0pos10$$ = 0.75, $CellContext`f0neg10$$ = 
   0.87, $CellContext`fpos1pos1pos1$$ = 
   0.8833459118601273, $CellContext`fneg1pos1pos1$$ = Rational[1, 2] 
   3^Rational[1, 2], $CellContext`fpos1neg1pos1$$ = Rational[1, 2] 
   3^Rational[1, 2], $CellContext`fneg1neg1pos1$$ = 
   0.7880831174438392, $CellContext`fpos1pos1neg1$$ = 
   0.6183421383020892, $CellContext`fneg1pos1neg1$$ = 
   0.55, $CellContext`fpos1neg1neg1$$ = 
   0.606217782649107, $CellContext`fneg1neg1neg1$$ = 
   0.5516581822106874, $CellContext`f0pos1pos1$$ = 
   0.9428090415820634, $CellContext`fpos10pos1$$ = 
   0.8768124086713188, $CellContext`fpos1pos10$$ = 
   0.8579562278396777, $CellContext`f0neg1pos1$$ = 
   0.8579562278396777, $CellContext`fpos10neg1$$ = 
   0.5962324378964968, $CellContext`fpos1neg10$$ = 
   0.8749267905881548, $CellContext`f0pos1neg1$$ = 
   0.641110148275803, $CellContext`fneg10pos1$$ = 
   0.9428090415820634, $CellContext`fneg1pos10$$ = 
   0.7683893688893816, $CellContext`f0neg1neg1$$ = 
   0.5834102349309808, $CellContext`fneg10neg1$$ = 
   0.55, $CellContext`fneg1neg10$$ = 
   0.7825315045131126, $CellContext`fpos1pos1pos3$$ = 
   0.8042815116611844, $CellContext`fpos1pos3pos1$$ = 
   0.8299853537864389, $CellContext`fpos3pos1pos1$$ = 
   0.9485546900416445, $CellContext`fpos1pos1neg3$$ = 
   0.8042815116611844, $CellContext`fpos1neg3pos1$$ = 
   0.9211925355212125, $CellContext`fneg3pos1pos1$$ = 
   0.912071817347735, $CellContext`fpos1neg1neg3$$ = 
   0.7255116728902438, $CellContext`fpos1neg3neg1$$ = 
   0.8206988043734437, $CellContext`fneg1pos1neg3$$ = 
   0.7503863588179093, $CellContext`fneg1neg3pos1$$ = 
   0.8482267901333934, $CellContext`fneg3pos1neg1$$ = 
   0.812573073637073, $CellContext`fneg3neg1pos1$$ = 
   0.8664682264803482, $CellContext`fpos1neg1pos3$$ = 
   0.7255116728902438, $CellContext`fpos1pos3neg1$$ = 
   0.7394414970097364, $CellContext`fneg1pos1pos3$$ = 
   0.7503863588179093, $CellContext`fneg1pos3pos1$$ = 
   0.8208646356129615, $CellContext`fpos3pos1neg1$$ = 
   0.8450759965825559, $CellContext`fpos3neg1pos1$$ = 
   0.912071817347735, $CellContext`fneg1neg1pos3$$ = 
   0.7794068257335189, $CellContext`fneg1pos3neg1$$ = 
   0.7313157662733657, $CellContext`fpos3neg1neg1$$ = 
   0.812573073637073, $CellContext`fneg1neg1neg3$$ = 
   0.7794068257335189, $CellContext`fneg1neg3neg1$$ = 
   0.8, $CellContext`fneg3neg1neg1$$ = 
   0.7719444199552192, $CellContext`fpos1pos1pos5$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fpos1pos5pos1$$ = 
   0.8085213169731519, $CellContext`fpos5pos1pos1$$ = 
   0.945699740932607, $CellContext`fpos1pos1neg5$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fpos1neg5pos1$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fneg5pos1pos1$$ = 
   1, $CellContext`fpos1neg1neg5$$ = 
   0.7139513428798911, $CellContext`fpos1neg5neg1$$ = 
   0.9768766554688466, $CellContext`fneg1pos1neg5$$ = 
   0.7316182611170936, $CellContext`fneg1neg5pos1$$ = 
   0.8521689973238875, $CellContext`fneg5pos1neg1$$ = 
   0.9768766554688466, $CellContext`fneg5neg1pos1$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fpos1neg1pos5$$ = 
   0.7139513428798911, $CellContext`fpos1pos5neg1$$ = 
   0.7600100379547627, $CellContext`fneg1pos1pos5$$ = 
   0.7316182611170936, $CellContext`fneg1pos5pos1$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fpos5pos1neg1$$ = 
   0.8889577564766504, $CellContext`fpos5neg1pos1$$ = 
   0.9145228263963672, $CellContext`fneg1neg1pos5$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fneg1pos5neg1$$ = 
   0.9768766554688466, $CellContext`fpos5neg1neg1$$ = 
   0.859651456812585, $CellContext`fneg1neg1neg5$$ = Rational[3, 5] 
   3^Rational[1, 2], $CellContext`fneg1neg5neg1$$ = 
   0.8010388574844544, $CellContext`fneg5neg1neg1$$ = 
   0.8, $CellContext`individualGrowthFactors$$ = 
   True, $CellContext`factorSelection$$ = 
   "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \(_\)])\)]\)", \
$CellContext`factorList$$ = {
   1, 0.6619999999999999, 0.9, 0.84, 0.75, 0.87, 0.8833459118601273, 
    Rational[1, 2] 3^Rational[1, 2], Rational[1, 2] 3^Rational[1, 2], 
    0.7880831174438392, 0.6183421383020892, 0.55, 0.606217782649107, 
    0.5516581822106874, 0.9428090415820634, 0.8768124086713188, 
    0.8579562278396777, 0.8579562278396777, 0.5962324378964968, 
    0.8749267905881548, 0.641110148275803, 0.9428090415820634, 
    0.7683893688893816, 0.5834102349309808, 0.55, 0.7825315045131126, 
    0.8042815116611844, 0.8299853537864389, 0.9485546900416445, 
    0.8042815116611844, 0.9211925355212125, 0.912071817347735, 
    0.7255116728902438, 0.8206988043734437, 0.7503863588179093, 
    0.8482267901333934, 0.812573073637073, 0.8664682264803482, 
    0.7255116728902438, 0.7394414970097364, 0.7503863588179093, 
    0.8208646356129615, 0.8450759965825559, 0.912071817347735, 
    0.7794068257335189, 0.7313157662733657, 0.812573073637073, 
    0.7794068257335189, 0.8, 0.7719444199552192, Rational[3, 5] 
    3^Rational[1, 2], 0.8085213169731519, 0.945699740932607, Rational[3, 5] 
    3^Rational[1, 2], Rational[3, 5] 3^Rational[1, 2], 1, 0.7139513428798911, 
    0.9768766554688466, 0.7316182611170936, 0.8521689973238875, 
    0.9768766554688466, Rational[3, 5] 3^Rational[1, 2], 0.7139513428798911, 
    0.7600100379547627, 0.7316182611170936, Rational[3, 5] 3^Rational[1, 2], 
    0.8889577564766504, 0.9145228263963672, Rational[3, 5] 3^Rational[1, 2], 
    0.9768766554688466, 0.859651456812585, Rational[3, 5] 3^Rational[1, 2], 
    0.8010388574844544, 0.8}, $CellContext`exportIndividualParameters$$ = Hold[
    Export[$CellContext`saveDirectory$$ <> 
     "Individual Parameter Config " <> $CellContext`parameterConfigFileName$$ <> 
     ".txt", 
     Compress[{$CellContext`f00neg1$$, $CellContext`f00pos1$$, \
$CellContext`fpos100$$, $CellContext`fneg100$$, $CellContext`f0pos10$$, \
$CellContext`f0neg10$$, $CellContext`fpos1pos1pos1$$, \
$CellContext`fneg1pos1pos1$$, $CellContext`fpos1neg1pos1$$, \
$CellContext`fneg1neg1pos1$$, $CellContext`fpos1pos1neg1$$, \
$CellContext`fneg1pos1neg1$$, $CellContext`fpos1neg1neg1$$, \
$CellContext`fneg1neg1neg1$$, $CellContext`f0pos1pos1$$, \
$CellContext`fpos10pos1$$, $CellContext`fpos1pos10$$, \
$CellContext`f0neg1pos1$$, $CellContext`fpos10neg1$$, \
$CellContext`fpos1neg10$$, $CellContext`f0pos1neg1$$, \
$CellContext`fneg10pos1$$, $CellContext`fneg1pos10$$, \
$CellContext`f0neg1neg1$$, $CellContext`fneg10neg1$$, \
$CellContext`fneg1neg10$$, $CellContext`fpos1pos1pos3$$, \
$CellContext`fpos1pos3pos1$$, $CellContext`fpos3pos1pos1$$, \
$CellContext`fpos1pos1neg3$$, $CellContext`fpos1neg3pos1$$, \
$CellContext`fneg3pos1pos1$$, $CellContext`fpos1neg1neg3$$, \
$CellContext`fpos1neg3neg1$$, $CellContext`fneg1pos1neg3$$, \
$CellContext`fneg1neg3pos1$$, $CellContext`fneg3pos1neg1$$, \
$CellContext`fneg3neg1pos1$$, $CellContext`fpos1neg1pos3$$, \
$CellContext`fpos1pos3neg1$$, $CellContext`fneg1pos1pos3$$, \
$CellContext`fneg1pos3pos1$$, $CellContext`fpos3pos1neg1$$, \
$CellContext`fpos3neg1pos1$$, $CellContext`fneg1neg1pos3$$, \
$CellContext`fneg1pos3neg1$$, $CellContext`fpos3neg1neg1$$, \
$CellContext`fneg1neg1neg3$$, $CellContext`fneg1neg3neg1$$, \
$CellContext`fneg3neg1neg1$$, $CellContext`fpos1pos1pos5$$, \
$CellContext`fpos1pos5pos1$$, $CellContext`fpos5pos1pos1$$, \
$CellContext`fpos1pos1neg5$$, $CellContext`fpos1neg5pos1$$, \
$CellContext`fneg5pos1pos1$$, $CellContext`fpos1neg1neg5$$, \
$CellContext`fpos1neg5neg1$$, $CellContext`fneg1pos1neg5$$, \
$CellContext`fneg1neg5pos1$$, $CellContext`fneg5pos1neg1$$, \
$CellContext`fneg5neg1pos1$$, $CellContext`fpos1neg1pos5$$, \
$CellContext`fpos1pos5neg1$$, $CellContext`fneg1pos1pos5$$, \
$CellContext`fneg1pos5pos1$$, $CellContext`fpos5pos1neg1$$, \
$CellContext`fpos5neg1pos1$$, $CellContext`fneg1neg1pos5$$, \
$CellContext`fneg1pos5neg1$$, $CellContext`fpos5neg1neg1$$, \
$CellContext`fneg1neg1neg5$$, $CellContext`fneg1neg5neg1$$, \
$CellContext`fneg5neg1neg1$$}]]], $CellContext`exportPlateCuts$$ = Hold[
    Export[$CellContext`saveDirectory$$ <> 
     "Plate Cuts Data " <> $CellContext`parameterConfigFileName$$ <> 
     ".txt", $CellContext`plateCutsGraphics$$]], \
$CellContext`plateCutsName$$, $CellContext`averageGrowthFactors$$ = {{
    "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 0.6619999999999999}, {
    "\!\(\*SubscriptBox[\(f\), \({11} 5\)]\)", 0.8810076432699092}, {
    "\!\(\*SubscriptBox[\(f\), \({11} 3\)]\)", 0.764896592275714}, {
    "\!\(\*SubscriptBox[\(f\), \({10} 1\)]\)", 0.9050966799187808}, {
    "\!\(\*SubscriptBox[\(f\), \({11} 1\)]\)", 0.850869959218211}, {
    "\!\(\*SubscriptBox[\(f\), \({31} 1\)]\)", 0.8824294832839337}, {
    "\!\(\*SubscriptBox[\(f\), \({51} 1\)]\)", 0.954825541906249}, {
    "\!\(\*SubscriptBox[\(f\), \({10} 0\)]\)", 0.8400000000000001}, {
    "\!\(\*SubscriptBox[\(f\), \({11} 0\)]\)", 0.8209509729575817}, {
    "\!\(\*SubscriptBox[\(f\), \({51} \*OverscriptBox[\(1\), \(_\)]\)]\)", 
     0.880036009391874}, {
    "\!\(\*SubscriptBox[\(f\), \({31} \*OverscriptBox[\(1\), \(_\)]\)]\)", 
     0.7917028289335584}, {
    "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(1\), \(_\)]\)]\)", 
     0.5815545257904708}, {
    "\!\(\*SubscriptBox[\(f\), \({10} \*OverscriptBox[\(1\), \(_\)]\)]\)", 
     0.5926882052758201}, {
    "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(3\), \(_\)]\)]\)", 
     0.764896592275714}, {
    "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(5\), \(_\)]\)]\)", 
     0.8810076432699092}, {
    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
     1}}}, 
   TagBox[GridBox[{
      {
       TemplateBox[{
         PanelBox[
          TagBox[
           GridBox[{{"\"Draw a box with axes\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{{$CellContext`boxed$$, True}, {
                   True, False}}, Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"Hide vertices\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{{$CellContext`hideVertices$$, True}, {
                   True, False}}, Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"Show Area and Velocities\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{{$CellContext`showAreaAndVelocities$$, 
                    True}, {True, False}}, Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"Opacity\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`opacity$$], 
                    Dynamic[$CellContext`opacity$$], {0, 1}, Medium, Small, 
                    Automatic, True, Automatic, False, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {147.546, {5., 8.}}], DynamicUpdating -> 
                  True], DynamicModuleValues :> {}], BaselinePosition -> 
                Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`opacity$$], {0, 1}, {}]]}, {
              TagBox[
               DynamicModuleBox[{Typeset`var$$ = True}, 
                InterpretationBox[
                 StyleBox[
                  PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"Initial shape\"", StripOnInput -> False, FontSize -> 
                    Medium, FontWeight -> Bold]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"Initial shape\"", StripOnInput -> False, FontSize -> 
                    Medium, FontWeight -> Bold]}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{
                    "\"Reference size \\!\\(\\*SubscriptBox[\\(l\\), \\(0\\)]\
\\) (mm)\"", 
                    TagBox[
                    PaneBox[
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                    Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                    Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`l0$$, ($CellContext`l0$$ = #; \
$CellContext`L$$ = $CellContext`l0$$/(2 $CellContext`V100$$))& ], 
                    
                    Dynamic[$CellContext`l0$$, ($CellContext`l0$$ = #; \
$CellContext`L$$ = $CellContext`l0$$/(2 $CellContext`V100$$))& ], {0.1, 10}, 
                    Medium, Small, 
                    Dynamic[
                    Not[$CellContext`infty$$]], True, Automatic, True, True, 
                    True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                    ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                    DynamicUpdating -> True], DynamicModuleValues :> {}], 
                    BaselinePosition -> Baseline, ImageMargins -> 0], 
                    Manipulate`InterpretManipulator[
                    
                    Dynamic[$CellContext`l0$$, ($CellContext`l0$$ = #; \
$CellContext`L$$ = $CellContext`l0$$/(2 $CellContext`V100$$))& ], {0.1, 10}, {
                    Enabled -> Dynamic[
                    Not[$CellContext`infty$$]], Appearance -> "Labeled"}]]}, {
                    "\"Initial Height (factor)\"", 
                    TagBox[
                    PaneBox[
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                    Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                    Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "Manipulator06"][
                    Dynamic[
                    Part[$CellContext`ds$$, 2], (
                    Part[$CellContext`ds$$, 2] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], 
                    Dynamic[
                    Part[$CellContext`ds$$, 2], (
                    Part[$CellContext`ds$$, 2] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {0.01, 1},
                     Medium, Small, Automatic, False, Automatic, True, True, 
                    True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                    ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                    DynamicUpdating -> True], DynamicModuleValues :> {}], 
                    BaselinePosition -> Baseline, ImageMargins -> 0], 
                    Manipulate`InterpretManipulator[
                    Dynamic[
                    Part[$CellContext`ds$$, 2], (
                    Part[$CellContext`ds$$, 2] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {
                    0.01, 1}, {
                    Appearance -> "Labeled", ContinuousAction -> False}]]}, {
                    "\"Initial Length (x factor)\"", 
                    TagBox[
                    PaneBox[
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                    Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                    Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "Manipulator06"][
                    Dynamic[
                    Part[$CellContext`ds$$, 3], (
                    Part[$CellContext`ds$$, 3] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], 
                    Dynamic[
                    Part[$CellContext`ds$$, 3], (
                    Part[$CellContext`ds$$, 3] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {0.01, 1},
                     Medium, Small, Automatic, False, Automatic, True, True, 
                    True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                    ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                    DynamicUpdating -> True], DynamicModuleValues :> {}], 
                    BaselinePosition -> Baseline, ImageMargins -> 0], 
                    Manipulate`InterpretManipulator[
                    Dynamic[
                    Part[$CellContext`ds$$, 3], (
                    Part[$CellContext`ds$$, 3] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {
                    0.01, 1}, {
                    Appearance -> "Labeled", ContinuousAction -> False}]]}, {
                    "\"Initial Width (y factor)\"", 
                    TagBox[
                    PaneBox[
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                    Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                    Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "Manipulator06"][
                    Dynamic[
                    Part[$CellContext`ds$$, 5], (
                    Part[$CellContext`ds$$, 5] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], 
                    Dynamic[
                    Part[$CellContext`ds$$, 5], (
                    Part[$CellContext`ds$$, 5] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {0.01, 1},
                     Medium, Small, Automatic, False, Automatic, True, True, 
                    True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                    ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                    DynamicUpdating -> True], DynamicModuleValues :> {}], 
                    BaselinePosition -> Baseline, ImageMargins -> 0], 
                    Manipulate`InterpretManipulator[
                    Dynamic[
                    Part[$CellContext`ds$$, 5], (
                    Part[$CellContext`ds$$, 5] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {
                    0.01, 1}, {
                    Appearance -> "Labeled", ContinuousAction -> False}]]}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                   Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, 
                   BaseStyle -> {}, BaselinePosition -> Baseline, 
                   DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                   ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                  False], 
                 OpenerView[{
                   Style["Initial shape", Bold, Medium], 
                   
                   Grid[{{"Reference size \!\(\*SubscriptBox[\(l\), \(0\)]\) \
(mm)", 
                    Manipulator[
                    
                    Dynamic[$CellContext`l0$$, ($CellContext`l0$$ = #; \
$CellContext`L$$ = $CellContext`l0$$/(2 $CellContext`V100$$))& ], {0.1, 10}, 
                    Enabled -> Dynamic[
                    Not[$CellContext`infty$$]], Appearance -> "Labeled"]}, {
                    "Initial Height (factor)", 
                    Manipulator[
                    Dynamic[
                    Part[$CellContext`ds$$, 2], (
                    Part[$CellContext`ds$$, 2] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {0.01, 1},
                     Appearance -> "Labeled", ContinuousAction -> False]}, {
                    "Initial Length (x factor)", 
                    Manipulator[
                    Dynamic[
                    Part[$CellContext`ds$$, 3], (
                    Part[$CellContext`ds$$, 3] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {0.01, 1},
                     Appearance -> "Labeled", ContinuousAction -> False]}, {
                    "Initial Width (y factor)", 
                    Manipulator[
                    Dynamic[
                    Part[$CellContext`ds$$, 5], (
                    Part[$CellContext`ds$$, 5] = #; 
                    ReleaseHold[$CellContext`calcTilt$$]; Null)& ], {0.01, 1},
                     Appearance -> "Labeled", ContinuousAction -> False]}}]}, 
                  True]], DynamicModuleValues :> {}], Setting[#, {0}]& ], 
              "\[SpanFromLeft]"}, {
              StyleBox[
              "\"Cut settings\"", StripOnInput -> False, FontSize -> Medium, 
               FontWeight -> Bold], ""}, {"\"Cut at time t\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{$CellContext`cutOn$$, {False, True}}, 
                  Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"cut normal \\!\\(\\*SubscriptBox[\\(n\\), \\(x\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`n1$$, ($CellContext`n1$$ = 
                    Round[#]; $CellContext`n$$ = 
                    Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                    Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                    Null)& ], 
                    
                    Dynamic[$CellContext`n1$$, ($CellContext`n1$$ = 
                    Round[#]; $CellContext`n$$ = 
                    Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                    Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                    Null)& ], {-1, 1, 1}, Medium, Small, Automatic, True, 
                    Automatic, True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`n1$$, ($CellContext`n1$$ = 
                  Round[#]; $CellContext`n$$ = 
                  Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                  Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                 Null)& ], {-1, 1, 1}, {Appearance -> "Labeled"}]]}, {
             "\"cut normal \\!\\(\\*SubscriptBox[\\(n\\), \\(y\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`n2$$, ($CellContext`n2$$ = 
                    Round[#]; $CellContext`n$$ = 
                    Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                    Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                    Null)& ], 
                    
                    Dynamic[$CellContext`n2$$, ($CellContext`n2$$ = 
                    Round[#]; $CellContext`n$$ = 
                    Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                    Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                    Null)& ], {-1, 1, 1}, Medium, Small, Automatic, True, 
                    Automatic, True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`n2$$, ($CellContext`n2$$ = 
                  Round[#]; $CellContext`n$$ = 
                  Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                  Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                 Null)& ], {-1, 1, 1}, {Appearance -> "Labeled"}]]}, {
             "\"cut normal \\!\\(\\*SubscriptBox[\\(n\\), \\(z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`n3$$, ($CellContext`n3$$ = 
                    Round[#]; $CellContext`n$$ = 
                    Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                    Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                    Null)& ], 
                    
                    Dynamic[$CellContext`n3$$, ($CellContext`n3$$ = 
                    Round[#]; $CellContext`n$$ = 
                    Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                    Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                    Null)& ], {-1, 1, 1}, Medium, Small, Automatic, True, 
                    Automatic, True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`n3$$, ($CellContext`n3$$ = 
                  Round[#]; $CellContext`n$$ = 
                  Normalize[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}]; $CellContext`normals1$$ = 
                  Append[$CellContext`allNormals$$, $CellContext`n$$]; 
                 Null)& ], {-1, 1, 1}, {Appearance -> "Labeled"}]]}, {
             "\"Cut plane distance from 0\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`cutPosition$$], 
                    Dynamic[$CellContext`cutPosition$$], 
                    
                    Dynamic[{(-(
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$)) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$)), (
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$))}], Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`cutPosition$$], 
                
                Dynamic[{(-(
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$)) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$)), (
                   Sqrt[3] $CellContext`V100$$/$CellContext`l0$$) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$))}], {
                Appearance -> "Labeled"}]]}, {"\"Preview quality\"", 
              InterpretationBox[
               StyleBox[
                GridBox[{{
                   SliderBox[
                    Dynamic[$CellContext`previewNum$$], {10, 300, 1}, 
                    Appearance -> Automatic, DefaultBaseStyle -> 
                    "LabeledSlider"], 
                   InputFieldBox[
                    Dynamic[$CellContext`previewNum$$], Appearance -> 
                    "Frameless", ContinuousAction -> True, DefaultBaseStyle -> 
                    "LabeledSlider", FieldSize -> {{5, 10}, {1, 2}}, 
                    ImageMargins -> 0]}}, AutoDelete -> False, 
                 BaselinePosition -> {{1, 1}, Axis}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], Deployed -> True, StripOnInput -> False, 
                FontFamily :> CurrentValue["ControlsFontFamily"]], 
               LabeledSlider[
                Dynamic[$CellContext`previewNum$$], {10, 300, 1}]]}, {
             "\"Number of steps\"", 
              InterpretationBox[
               StyleBox[
                GridBox[{{
                   SliderBox[
                    Dynamic[$CellContext`Num$$], {10, 1000, 1}, Appearance -> 
                    Automatic, ContinuousAction -> False, DefaultBaseStyle -> 
                    "LabeledSlider"], 
                   InputFieldBox[
                    Dynamic[$CellContext`Num$$], Appearance -> "Frameless", 
                    ContinuousAction -> False, DefaultBaseStyle -> 
                    "LabeledSlider", FieldSize -> {{5, 10}, {1, 2}}, 
                    ImageMargins -> 0]}}, AutoDelete -> False, 
                 BaselinePosition -> {{1, 1}, Axis}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], Deployed -> True, StripOnInput -> False, 
                FontFamily :> CurrentValue["ControlsFontFamily"]], 
               LabeledSlider[
                Dynamic[$CellContext`Num$$], {10, 1000, 1}, ContinuousAction -> 
                False]]}, {"\"tMin for section\"", 
              InterpretationBox[
               StyleBox[
                GridBox[{{
                   SliderBox[
                    Dynamic[
                    BoxForm`RemapVariable[$CellContext`tMin$$, {0.0001, 
                    Min[0.01, $CellContext`t$$ - 0.01]}], 
                    BoxForm`RemapValue[#, $CellContext`tMin$$, {0.0001, 
                    Min[0.01, $CellContext`t$$ - 0.01]}]& ], {0., 1.}, 
                    Appearance -> Automatic, DefaultBaseStyle -> 
                    "LabeledSlider"], 
                   InputFieldBox[
                    Dynamic[$CellContext`tMin$$], Appearance -> "Frameless", 
                    ContinuousAction -> True, DefaultBaseStyle -> 
                    "LabeledSlider", FieldSize -> {{5, 10}, {1, 2}}, 
                    ImageMargins -> 0]}}, AutoDelete -> False, 
                 BaselinePosition -> {{1, 1}, Axis}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], Deployed -> True, StripOnInput -> False, 
                FontFamily :> CurrentValue["ControlsFontFamily"]], 
               LabeledSlider[
                Dynamic[
                 BoxForm`RemapVariable[$CellContext`tMin$$, {0.0001, 
                   Min[0.01, $CellContext`t$$ - 0.01]}], 
                 BoxForm`RemapValue[#, $CellContext`tMin$$, {0.0001, 
                   Min[0.01, $CellContext`t$$ - 0.01]}]& ], {0., 1.}]]}, {
             "\"Time Step (hrs)\"", 
              InterpretationBox[
               StyleBox[
                GridBox[{{
                   SliderBox[
                    Dynamic[$CellContext`timeStep$$], {
                    Dynamic[$CellContext`t$$/100], 
                    Dynamic[$CellContext`t$$], 
                    Dynamic[$CellContext`t$$/1000]}, Appearance -> Automatic, 
                    DefaultBaseStyle -> "LabeledSlider"], 
                   InputFieldBox[
                    Dynamic[$CellContext`timeStep$$], Appearance -> 
                    "Frameless", ContinuousAction -> True, DefaultBaseStyle -> 
                    "LabeledSlider", FieldSize -> {{5, 10}, {1, 2}}, 
                    ImageMargins -> 0]}}, AutoDelete -> False, 
                 BaselinePosition -> {{1, 1}, Axis}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], Deployed -> True, StripOnInput -> False, 
                FontFamily :> CurrentValue["ControlsFontFamily"]], 
               LabeledSlider[
                Dynamic[$CellContext`timeStep$$], {
                 Dynamic[$CellContext`t$$/100], 
                 Dynamic[$CellContext`t$$], 
                 Dynamic[$CellContext`t$$/1000]}]]}, {
              ButtonBox[
              "\"Export Plate Cuts\"", Appearance -> Automatic, 
               ButtonFunction :> ReleaseHold[$CellContext`plateCuts$$], 
               Evaluator -> Automatic, Method -> "Preemptive"], ""}, {
             "\"Plate Cuts Thickness (mm)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`plateThickness$$], 
                    Dynamic[$CellContext`plateThickness$$], {0.01, 10}, 
                    Medium, Small, Automatic, True, Automatic, True, True, 
                    True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`plateThickness$$], {0.01, 10}, {
                Appearance -> "Labeled"}]]}, {"\"Kerf Loss (mm)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`cutLoss$$], 
                    Dynamic[$CellContext`cutLoss$$], {0.01, 10}, Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`cutLoss$$], {0.01, 10}, {
                Appearance -> "Labeled"}]]}, {
             "\"Beginning Cut Position (mm)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`beginningCutPosition$$], 
                    Dynamic[$CellContext`beginningCutPosition$$], 
                    
                    Dynamic[{(-(
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$)) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$)), (
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$))}], Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`beginningCutPosition$$], 
                
                Dynamic[{(-(
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$)) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$)), (
                   Sqrt[3] $CellContext`V100$$/$CellContext`l0$$) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$))}], {
                Appearance -> "Labeled"}]]}, {"\"End Cut Position (mm)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`endCutPosition$$], 
                    Dynamic[$CellContext`endCutPosition$$], 
                    
                    Dynamic[{(-(
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$)) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$)), (
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$))}], Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`endCutPosition$$], 
                
                Dynamic[{(-(
                    Sqrt[3] $CellContext`V100$$/$CellContext`l0$$)) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$)), (
                   Sqrt[3] $CellContext`V100$$/$CellContext`l0$$) \
($CellContext`t$$ + $CellContext`l0$$/(2 $CellContext`V100$$))}], {
                Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"Growth settings\"", StripOnInput -> False, FontSize -> 
               Medium, FontWeight -> Bold], ""}, {"\"Time of growth (hrs)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = 1, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`t$$, ($CellContext`t$$ = #; 
                    If[$CellContext`constantVelocity$$, $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 10^(-3), 
                    
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], 
                    
                    Dynamic[$CellContext`t$$, ($CellContext`t$$ = #; 
                    If[$CellContext`constantVelocity$$, $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 10^(-3), 
                    
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], 
                    Dynamic[{
                    If[$CellContext`cutOn$$, $CellContext`tMin$$ + 0.01, 0], 
                    1000}], Medium, Small, 
                    Dynamic[
                    Not[$CellContext`infty$$]], True, Automatic, True, True, 
                    True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`t$$, ($CellContext`t$$ = #; 
                 If[$CellContext`constantVelocity$$, $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 10^(-3), 
                   
                   Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]]; 
                 Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], 
                Dynamic[{
                  If[$CellContext`cutOn$$, $CellContext`tMin$$ + 0.01, 0], 
                  1000}], {
                Appearance -> "Labeled", AnimationRate -> 1, Enabled -> 
                 Dynamic[
                   Not[$CellContext`infty$$]]}]]}, {
             "\"Allow (00\\!\\(\\*OverscriptBox[\\(1\\), \\(_\\)]\\)) \
growth\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{$CellContext`growDown$$, {True, False}}, 
                  Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
              StyleBox[
              "\"Constant Velocity\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"Enable Constant Velocity\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{$CellContext`constantVelocity$$, {
                   True, False}}, Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"Constant Growth Velocity (\[Micro]m/hr)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`constantVelocityValue$$, \
($CellContext`constantVelocityValue$$ = #; $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 
                    10^(-3); $CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$); Null)& ], 
                    
                    Dynamic[$CellContext`constantVelocityValue$$, \
($CellContext`constantVelocityValue$$ = #; $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 
                    10^(-3); $CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$); Null)& ], {0.1, 1000}, Medium, 
                    Small, 
                    Dynamic[$CellContext`constantVelocity$$], True, Automatic,
                     True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`constantVelocityValue$$, \
($CellContext`constantVelocityValue$$ = #; $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 
                   10^(-3); $CellContext`L$$ = $CellContext`l0$$/(
                   2 $CellContext`V100$$); Null)& ], {0.1, 1000}, {
                Appearance -> "Labeled", Enabled -> 
                 Dynamic[$CellContext`constantVelocity$$]}]]}, {
              StyleBox[
              "\"Time Dependent Velocity:\\n v(t) = \
\\!\\(\\*FractionBox[\\(\\(A\\)\\(\\\\ \\)\\), SuperscriptBox[\\((C + t)\\), \
\\(B\\)]]\\) (\[Micro]m/hr)\"", StripOnInput -> False, FontSize -> Small, 
               FontWeight -> Bold], ""}, {"\"Show Velocity Plot\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{{$CellContext`ShowVelocityPlot$$, 
                    False}, {True, False}}, Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"Velocity A Coefficient\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`velocityA$$, \
($CellContext`velocityA$$ = #; 
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], 
                    
                    Dynamic[$CellContext`velocityA$$, \
($CellContext`velocityA$$ = #; 
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], {0, 5000}, Medium, Small, 
                    Dynamic[
                    Not[$CellContext`constantVelocity$$]], True, Automatic, 
                    True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`velocityA$$, ($CellContext`velocityA$$ = \
#; Quiet[$CellContext`V100$$ = 
                   NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                 Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], {0, 5000}, {
                Appearance -> "Labeled", Enabled -> Dynamic[
                   Not[$CellContext`constantVelocity$$]]}]]}, {
             "\"Velocity B Coefficient\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`velocityB$$, \
($CellContext`velocityB$$ = #; 
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], 
                    
                    Dynamic[$CellContext`velocityB$$, \
($CellContext`velocityB$$ = #; 
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], {-1, 10}, Medium, Small, 
                    Dynamic[
                    Not[$CellContext`constantVelocity$$]], True, Automatic, 
                    True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`velocityB$$, ($CellContext`velocityB$$ = \
#; Quiet[$CellContext`V100$$ = 
                   NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                 Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], {-1, 10}, {
                Appearance -> "Labeled", Enabled -> Dynamic[
                   Not[$CellContext`constantVelocity$$]]}]]}, {
             "\"Velocity C Coefficient\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    
                    Dynamic[$CellContext`velocityC$$, \
($CellContext`velocityC$$ = #; 
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], 
                    
                    Dynamic[$CellContext`velocityC$$, \
($CellContext`velocityC$$ = #; 
                    Quiet[$CellContext`V100$$ = 
                    NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                    Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], {0.0001, 5000}, Medium, 
                    Small, 
                    Dynamic[
                    Not[$CellContext`constantVelocity$$]], True, Automatic, 
                    True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`velocityC$$, ($CellContext`velocityC$$ = \
#; Quiet[$CellContext`V100$$ = 
                   NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]; 
                 Quiet[$CellContext`L$$ = $CellContext`l0$$/(
                    2 $CellContext`V100$$)])& ], {0.0001, 5000}, {
                Appearance -> "Labeled", Enabled -> Dynamic[
                   Not[$CellContext`constantVelocity$$]]}]]}, {
              TagBox[
               DynamicModuleBox[{Typeset`var$$ = True}, 
                InterpretationBox[
                 StyleBox[
                  PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"Individual Growth Parameters\"", StripOnInput -> False,
                     FontSize -> Medium, FontWeight -> Bold]}}, AutoDelete -> 
                    False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"Individual Growth Parameters\"", StripOnInput -> False,
                     FontSize -> Medium, FontWeight -> Bold]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{"\"Enable Individual Growth Factors\"", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    
                    Manipulate`Control[{$CellContext`individualGrowthFactors$$\
, {True, False}}, Automatic], StandardForm], 
                    ImageSizeCache -> {
                    9.6, {2.6102539062499996`, 6.98974609375}}], 
                    "Control"]}, {"\"Selected Parameter\"", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    
                    Manipulate`Control[{{$CellContext`factorSelection$$, 
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)"}, {
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}}, 
                    Automatic, 
                    Enabled -> $CellContext`individualGrowthFactors$$], 
                    StandardForm], 
                    ImageSizeCache -> {
                    39.6667868164062, {12.549999999999272`, 12.55}}], 
                    "Control"]}, {"\"Parameter Value\"", 
                    TagBox[
                    PaneBox[
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                    Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                    Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "Manipulator06"][
                    Dynamic[
                    Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]], (Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]] = #; 
                    ReleaseHold[$CellContext`calcCutOff$$])& ], 
                    Dynamic[
                    Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]], (Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]] = #; 
                    ReleaseHold[$CellContext`calcCutOff$$])& ], {0, 4}, 
                    Medium, Small, 
                    Dynamic[$CellContext`individualGrowthFactors$$], False, 
                    Automatic, True, True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                    ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                    DynamicUpdating -> True], DynamicModuleValues :> {}], 
                    BaselinePosition -> Baseline, ImageMargins -> 0], 
                    Manipulate`InterpretManipulator[
                    Dynamic[
                    Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]], (Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]] = #; 
                    ReleaseHold[$CellContext`calcCutOff$$])& ], {0, 4}, {
                    Appearance -> "Labeled", ContinuousAction -> False, 
                    Enabled -> 
                    Dynamic[$CellContext`individualGrowthFactors$$]}]]}, {
                    ButtonBox[
                    "\"Export Individual Growth Factor Configuration\"", 
                    Appearance -> Automatic, ButtonFunction :> 
                    ReleaseHold[$CellContext`exportIndividualParameters$$], 
                    Evaluator -> Automatic, Method -> "Preemptive"], ""}, {
                    ButtonBox[
                    "\"Upload Individual Growth Factor Configuration\"", 
                    Appearance -> Automatic, 
                    ButtonFunction :> ($CellContext`factorList$$ = Uncompress[
                    Import[
                    SystemDialogInput["FileOpen", ".txt"]]]; 
                    ReleaseHold[$CellContext`calcCutOff$$]), Evaluator -> 
                    Automatic, Method -> "Queued"], ""}}, AutoDelete -> False,
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                   Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, 
                   BaseStyle -> {}, BaselinePosition -> Baseline, 
                   DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                   ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                  False], 
                 OpenerView[{
                   Style["Individual Growth Parameters", Bold, Medium], 
                   Grid[{{"Enable Individual Growth Factors", 
                    
                    Control[{$CellContext`individualGrowthFactors$$, {
                    True, False}}]}, {"Selected Parameter", 
                    
                    Control[{{$CellContext`factorSelection$$, 
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)"}, {
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, 
                    Enabled -> $CellContext`individualGrowthFactors$$}]}, {
                    "Parameter Value", 
                    Manipulator[
                    Dynamic[
                    Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]], (Part[$CellContext`factorList$$, 
                    Part[
                    
                    Position[{
                    "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((100)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 00)\)]\)", "\!\(\*SubscriptBox[\(f\), \((010)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 0\\ \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((113)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((131)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((311)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 13)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 31)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 3)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 3 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((115)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((151)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((511)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 11)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 1 \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] 1 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 1)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \
\(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 15)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 51)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] 5)\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] 5 \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \
\(_\)] \*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)", 
                    "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \
\(_\)] \*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\)"}, \
$CellContext`factorSelection$$], 1, 1]] = #; 
                    ReleaseHold[$CellContext`calcCutOff$$])& ], {0, 4}, 
                    Appearance -> "Labeled", ContinuousAction -> False, 
                    Enabled -> 
                    Dynamic[$CellContext`individualGrowthFactors$$]]}, {
                    Button["Export Individual Growth Factor Configuration", 
                    ReleaseHold[$CellContext`exportIndividualParameters$$]]}, {
                    Button[
                    "Upload Individual Growth Factor Configuration", \
$CellContext`factorList$$ = Uncompress[
                    Import[
                    SystemDialogInput["FileOpen", ".txt"]]]; 
                    ReleaseHold[$CellContext`calcCutOff$$], Method -> 
                    "Queued"]}}]}, False]], DynamicModuleValues :> {}], 
               Setting[#, {0}]& ], "\[SpanFromLeft]"}, {
              StyleBox[
              "\"General parameters\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {"\"\[Alpha]\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[Alpha]1$$], 
                    Dynamic[$CellContext`\[Alpha]1$$], {0.1, 10}, Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[Alpha]1$$], {0.1, 10}, {
                Appearance -> "Labeled"}]]}, {"\"\[Beta]\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[Beta]1$$], 
                    Dynamic[$CellContext`\[Beta]1$$], {0.1, 10}, Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[Beta]1$$], {0.1, 10}, {
                Appearance -> "Labeled"}]]}, {"\"\[Gamma]\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[Gamma]1$$], 
                    Dynamic[$CellContext`\[Gamma]1$$], {0.1, 10}, Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[Gamma]1$$], {0.1, 10}, {
                Appearance -> "Labeled"}]]}, {"\"\[Delta]\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[Delta]1$$], 
                    Dynamic[$CellContext`\[Delta]1$$], {0.1, 10}, Medium, 
                    Small, Automatic, True, Automatic, True, True, True, All, 
                    False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[Delta]1$$], {0.1, 10}, {
                Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"{1 0 0} parameters\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\\), \\(+z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]100posz$$], 
                    Dynamic[$CellContext`\[CapitalDelta]100posz$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]100posz$$], {-0.9, 0.9}, {
                Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\\), \\(-z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]100negz$$], 
                    Dynamic[$CellContext`\[CapitalDelta]100negz$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]100negz$$], {-0.9, 0.9}, {
                Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\\), \\({100} + x\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]100posx$$], 
                    Dynamic[$CellContext`\[CapitalDelta]100posx$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]100posx$$], {-0.9, 0.9}, {
                Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\\), \\({100} + y\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]100posy$$], 
                    Dynamic[$CellContext`\[CapitalDelta]100posy$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]100posy$$], {-0.9, 0.9}, {
                Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\\), \\({100} - x\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]100negx$$], 
                    Dynamic[$CellContext`\[CapitalDelta]100negx$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]100negx$$], {-0.9, 0.9}, {
                Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\\), \\({100} - y\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]100negy$$], 
                    Dynamic[$CellContext`\[CapitalDelta]100negy$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]100negy$$], {-0.9, 0.9}, {
                Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"{1 1 1} parameters\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Alpha]\\), \
\\(-z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]z$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]z$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Alpha]z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Alpha]\\), \
\\((\\(+x\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]posxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]posxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Alpha]posxposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Alpha]\\), \
\\((\\(+x\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negyposx$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negyposx$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negyposx$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Alpha]\\), \\((\\(+\
\\(-x\\)\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negxposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Alpha]\\), \
\\((\\(-x\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negynegx$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negynegx$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Alpha]negynegx$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"{1 1 0} parameters\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\(+z\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posz$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posz$$], {-0.9,
                     0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]posz$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\(-z\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negz$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negz$$], {-0.9,
                     0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]negz$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\((\\(+x\
\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]posxposy$$], {-0.9,
                 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\((\\(+x\
\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negyposx$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negyposx$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]negyposx$$], {-0.9,
                 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\((\\(-x\
\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]negxposy$$], {-0.9,
                 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\((\\(-x\
\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negynegx$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negynegx$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]negynegx$$], {-0.9,
                 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\(+x\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posx$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posx$$], {-0.9,
                     0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]posx$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\(+y\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posy$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]posy$$], {-0.9,
                     0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]posy$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\(-x\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negx$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negx$$], {-0.9,
                     0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]negx$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Beta]\\), \\(-y\\)]\
\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negy$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Beta]negy$$], {-0.9,
                     0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Beta]negy$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"{1 1 3} parameters\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \\(\\(-3\
\\) z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]3z$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]3z$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]3z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \\(\\(+1\
\\) z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos1z$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos1z$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos1z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\[CapitalDelta]\[Gamma]\\!\\(\\*SubscriptBox[\\(-\\), \\(1  z\
\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg1z$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg1z$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg1z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(+x\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(+x\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(-x\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(-x\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\(\\((\\(+3\\) x, \\(+y\\))\\)\\(,\\)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(+3\\) x, \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(+x\\), \\(-3\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(+x\\), \\(+3\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(-3\\) x, \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(-3\\) x, \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(-x\\), \\(-3\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Gamma]\\), \
\\((\\(-x\\), \\(+3\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"{1 1 5} parameters\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \\(\\(-5\
\\) z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]5z$$], 
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]5z$$], {-0.9, 
                    0.9}, Medium, Small, Automatic, True, Automatic, True, 
                    True, True, All, False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]5z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \\(\\(+1\
\\) z\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos1z$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos1z$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos1z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\[CapitalDelta]\[Delta]\\!\\(\\*SubscriptBox[\\(-\\), \\(1  z\
\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg1z$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg1z$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg1z$$], {-0.9, 
                0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(+x\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(+x\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(-x\\), \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(-x\\), \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\(\\((\\(+5\\) x, \\(+y\\))\\)\\(,\\)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos5xposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos5xposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos5xposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(+5\\) x, \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(+x\\), \\(-5\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxneg5y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxneg5y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxneg5y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(+x\\), \\(+5\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxpos5y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxpos5y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]posxpos5y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(-5\\) x, \\(+y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg5xposy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg5xposy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg5xposy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(-5\\) x, \\(-y\\))\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(-x\\), \\(-5\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxneg5y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxneg5y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxneg5y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
             "\"\\!\\(\\*SubscriptBox[\\(\[CapitalDelta]\[Delta]\\), \
\\((\\(-x\\), \\(+5\\) y)\\)]\\)\"", 
              TagBox[
               PaneBox[
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`paused$$ = Automatic, 
                  Typeset`running$$ = False, Typeset`index$$ = Automatic, 
                  Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
                 StyleBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEExpressions", "Manipulator06"][
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxpos5y$$], 
                    
                    Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxpos5y$$], \
{-0.9, 0.9}, Medium, Small, Automatic, True, Automatic, True, True, True, All,
                     False, {}, 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`running$$], 
                    Dynamic[Typeset`index$$], 
                    Dynamic[Typeset`rate$$], 
                    Dynamic[Typeset`dir$$]], 
                   ImageSizeCache -> {165.67184374999997`, {5., 8.}}], 
                  DynamicUpdating -> True], DynamicModuleValues :> {}], 
                BaselinePosition -> Baseline, ImageMargins -> 0], 
               Manipulate`InterpretManipulator[
                
                Dynamic[$CellContext`\[CapitalDelta]\[Delta]negxpos5y$$], \
{-0.9, 0.9}, {Appearance -> "Labeled"}]]}, {
              StyleBox[
              "\"Export Options\"", StripOnInput -> False, FontSize -> Medium,
                FontWeight -> Bold], ""}, {
              ButtonBox[
              "\"Choose Save Directory\"", Appearance -> Automatic, 
               ButtonFunction :> ($CellContext`saveDirectory$$ = 
                SystemDialogInput["Directory"]), Evaluator -> Automatic, 
               Method -> "Queued"], ""}, {
              StyleBox[
              "\"Export Crystal Shape\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {"\"CAD File Name\"", 
              InputFieldBox[
               Dynamic[$CellContext`cadFileName$$], String]}, {
              ButtonBox[
              "\"Export Shape\"", Appearance -> Automatic, ButtonFunction :> 
               ReleaseHold[$CellContext`exportShape$$], Evaluator -> 
               Automatic, Method -> "Preemptive"], ""}, {
              StyleBox[
              "\"Cut\"", StripOnInput -> False, FontSize -> Small, FontWeight -> 
               Bold], ""}, {"\"Cut Image File Name\"", 
              InputFieldBox[
               Dynamic[$CellContext`exportCutFileName$$], String]}, {
              ButtonBox[
              "\"Export Cut Image\"", Appearance -> Automatic, ButtonFunction :> 
               ReleaseHold[$CellContext`exportCutImage$$], Evaluator -> 
               Automatic, Method -> "Preemptive"], ""}, {
              StyleBox[
              "\"Plate Cuts\"", StripOnInput -> False, FontSize -> Small, 
               FontWeight -> Bold], ""}, {"\"Plate Cuts File Name\"", 
              InputFieldBox[
               Dynamic[$CellContext`plateCutsName$$], String]}, {
              ButtonBox[
              "\"Export Cut Image\"", Appearance -> Automatic, ButtonFunction :> 
               ReleaseHold[$CellContext`exportPlateCuts$$], Evaluator -> 
               Automatic, Method -> "Preemptive"], ""}, {
              StyleBox[
              "\"Parameter Settings\"", StripOnInput -> False, FontSize -> 
               Small, FontWeight -> Bold], ""}, {
             "\"Parameter Config File Name\"", 
              InputFieldBox[
               Dynamic[$CellContext`parameterConfigFileName$$], String]}, {
              ButtonBox[
              "\"Export Parameter Configuration\"", Appearance -> Automatic, 
               ButtonFunction :> ReleaseHold[$CellContext`exportConfig$$], 
               Evaluator -> Automatic, Method -> "Preemptive"], ""}, {
              ButtonBox[
              "\"Upload Config File\"", Appearance -> Automatic, 
               ButtonFunction :> ({$CellContext`l0$$, $CellContext`V100$$, \
$CellContext`relativeOn$$, $CellContext`infty$$, $CellContext`opacity$$, \
$CellContext`boxed$$, $CellContext`planeChoice$$, $CellContext`normals$$, \
$CellContext`n$$, $CellContext`cutOn$$, $CellContext`drawCutPlane$$, \
$CellContext`cutPosition$$, $CellContext`previewNum$$, $CellContext`Num$$, \
$CellContext`tMin$$, $CellContext`t$$, $CellContext`\[Alpha]1$$, \
$CellContext`\[Beta]1$$, $CellContext`\[Gamma]1$$, $CellContext`\
\[CapitalDelta]100posz$$, $CellContext`\[CapitalDelta]100posx$$, \
$CellContext`\[CapitalDelta]100posy$$, \
$CellContext`\[CapitalDelta]\[Alpha]z$$, \
$CellContext`\[CapitalDelta]\[Beta]posz$$, \
$CellContext`\[CapitalDelta]\[Beta]negz$$, \
$CellContext`\[CapitalDelta]\[Beta]posy$$, $CellContext`\[CapitalDelta]\
\[Alpha]posxposy$$, $CellContext`\[CapitalDelta]\[Alpha]negyposx$$, \
$CellContext`mult100$$, $CellContext`mult\[Alpha]$$, \
$CellContext`mult\[Beta]$$, $CellContext`mult\[Gamma]$$, $CellContext`ds$$, \
$CellContext`ds1$$, $CellContext`tiltAngles$$, $CellContext`growDown$$, \
$CellContext`\[CapitalDelta]\[Beta]posx$$, $CellContext`showVelocity$$, \
$CellContext`\[CapitalDelta]100negx$$, $CellContext`\[CapitalDelta]100negy$$, \
$CellContext`\[CapitalDelta]\[Alpha]negxposy$$, $CellContext`\[CapitalDelta]\
\[Alpha]negynegx$$, $CellContext`\[CapitalDelta]\[Beta]negx$$, $CellContext`\
\[CapitalDelta]\[Beta]negy$$, $CellContext`cutZAxis$$, \
$CellContext`cutYAxis$$, $CellContext`cutXAxis$$, $CellContext`timeStep$$, \
$CellContext`\[CapitalDelta]\[Beta]posxposy$$, $CellContext`\[CapitalDelta]\
\[Beta]negyposx$$, $CellContext`\[CapitalDelta]\[Beta]negxposy$$, \
$CellContext`\[CapitalDelta]\[Beta]negynegx$$, $CellContext`velocityA$$, \
$CellContext`velocityB$$, $CellContext`velocityC$$, \
$CellContext`constantVelocity$$, $CellContext`constantVelocityValue$$, \
$CellContext`t$$, $CellContext`\[CapitalDelta]\[Gamma]3z$$, $CellContext`\
\[CapitalDelta]\[Gamma]pos1z$$, $CellContext`\[CapitalDelta]\[Gamma]neg1z$$, \
$CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]pos3xnegy$$, $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$, \
$CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]neg3xposy$$, $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$, \
$CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxpos3y$$, $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$, \
$CellContext`\[CapitalDelta]\[Gamma]posxposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxposy$$, $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$, \
$CellContext`\[Delta]1$$, $CellContext`\[CapitalDelta]\[Delta]5z$$, \
$CellContext`\[CapitalDelta]\[Delta]pos1z$$, $CellContext`\[CapitalDelta]\
\[Delta]neg1z$$, $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$, \
$CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$, $CellContext`\[CapitalDelta]\
\[Delta]posxneg5y$$, $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$, \
$CellContext`\[CapitalDelta]\[Delta]neg5xposy$$, $CellContext`\[CapitalDelta]\
\[Delta]neg5xnegy$$, $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$, \
$CellContext`\[CapitalDelta]\[Delta]negxpos5y$$, $CellContext`\[CapitalDelta]\
\[Delta]posxnegy$$, $CellContext`\[CapitalDelta]\[Delta]posxposy$$, \
$CellContext`\[CapitalDelta]\[Delta]negxposy$$, $CellContext`\[CapitalDelta]\
\[Delta]negxnegy$$, $CellContext`\[CapitalDelta]100negz$$, \
$CellContext`plateThickness$$, $CellContext`cutLoss$$, \
$CellContext`beginningCutPosition$$, $CellContext`endCutPosition$$} = 
                Uncompress[
                  Import[
                   SystemDialogInput["FileOpen", ".txt"]]]), Evaluator -> 
               Automatic, Method -> "Queued"], ""}, {
             "\"Print Parameter Configuration\"", 
              TagBox[
               DynamicBox[
                ToBoxes[
                 
                 Manipulate`Control[{{$CellContext`printOn$$, False}, {
                   True, False}}, Automatic], StandardForm], 
                ImageSizeCache -> {
                 9.6, {2.6102539062499996`, 6.98974609375}}], "Control"]}, {
             "\"Insert Saved Parameter Configugration\"", 
              InputFieldBox[
               Dynamic[$CellContext`stateString$$], String]}, {
              ButtonBox[
              "\"Apply Settings\"", Appearance -> Automatic, 
               ButtonFunction :> ({$CellContext`l0$$, $CellContext`V100$$, \
$CellContext`relativeOn$$, $CellContext`infty$$, $CellContext`opacity$$, \
$CellContext`boxed$$, $CellContext`planeChoice$$, $CellContext`normals$$, \
$CellContext`n$$, $CellContext`cutOn$$, $CellContext`drawCutPlane$$, \
$CellContext`cutPosition$$, $CellContext`previewNum$$, $CellContext`Num$$, \
$CellContext`tMin$$, $CellContext`t$$, $CellContext`\[Alpha]1$$, \
$CellContext`\[Beta]1$$, $CellContext`\[Gamma]1$$, $CellContext`\
\[CapitalDelta]100posz$$, $CellContext`\[CapitalDelta]100posx$$, \
$CellContext`\[CapitalDelta]100posy$$, \
$CellContext`\[CapitalDelta]\[Alpha]z$$, \
$CellContext`\[CapitalDelta]\[Beta]posz$$, \
$CellContext`\[CapitalDelta]\[Beta]negz$$, \
$CellContext`\[CapitalDelta]\[Beta]posy$$, $CellContext`\[CapitalDelta]\
\[Alpha]posxposy$$, $CellContext`\[CapitalDelta]\[Alpha]negyposx$$, \
$CellContext`mult100$$, $CellContext`mult\[Alpha]$$, \
$CellContext`mult\[Beta]$$, $CellContext`mult\[Gamma]$$, $CellContext`ds$$, \
$CellContext`ds1$$, $CellContext`tiltAngles$$, $CellContext`growDown$$, \
$CellContext`\[CapitalDelta]\[Beta]posx$$, $CellContext`showVelocity$$, \
$CellContext`\[CapitalDelta]100negx$$, $CellContext`\[CapitalDelta]100negy$$, \
$CellContext`\[CapitalDelta]\[Alpha]negxposy$$, $CellContext`\[CapitalDelta]\
\[Alpha]negynegx$$, $CellContext`\[CapitalDelta]\[Beta]negx$$, $CellContext`\
\[CapitalDelta]\[Beta]negy$$, $CellContext`cutZAxis$$, \
$CellContext`cutYAxis$$, $CellContext`cutXAxis$$, $CellContext`timeStep$$, \
$CellContext`\[CapitalDelta]\[Beta]posxposy$$, $CellContext`\[CapitalDelta]\
\[Beta]negyposx$$, $CellContext`\[CapitalDelta]\[Beta]negxposy$$, \
$CellContext`\[CapitalDelta]\[Beta]negynegx$$, $CellContext`velocityA$$, \
$CellContext`velocityB$$, $CellContext`velocityC$$, \
$CellContext`constantVelocity$$, $CellContext`constantVelocityValue$$, \
$CellContext`t$$, $CellContext`\[CapitalDelta]\[Gamma]3z$$, $CellContext`\
\[CapitalDelta]\[Gamma]pos1z$$, $CellContext`\[CapitalDelta]\[Gamma]neg1z$$, \
$CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]pos3xnegy$$, $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$, \
$CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]neg3xposy$$, $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$, \
$CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxpos3y$$, $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$, \
$CellContext`\[CapitalDelta]\[Gamma]posxposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxposy$$, $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$, \
$CellContext`\[Delta]1$$, $CellContext`\[CapitalDelta]\[Delta]5z$$, \
$CellContext`\[CapitalDelta]\[Delta]pos1z$$, $CellContext`\[CapitalDelta]\
\[Delta]neg1z$$, $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$, \
$CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$, $CellContext`\[CapitalDelta]\
\[Delta]posxneg5y$$, $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$, \
$CellContext`\[CapitalDelta]\[Delta]neg5xposy$$, $CellContext`\[CapitalDelta]\
\[Delta]neg5xnegy$$, $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$, \
$CellContext`\[CapitalDelta]\[Delta]negxpos5y$$, $CellContext`\[CapitalDelta]\
\[Delta]posxnegy$$, $CellContext`\[CapitalDelta]\[Delta]posxposy$$, \
$CellContext`\[CapitalDelta]\[Delta]negxposy$$, $CellContext`\[CapitalDelta]\
\[Delta]negxnegy$$, $CellContext`\[CapitalDelta]100negz$$, \
$CellContext`plateThickness$$, $CellContext`cutLoss$$, \
$CellContext`beginningCutPosition$$, $CellContext`endCutPosition$$} = 
                 Uncompress[$CellContext`stateString$$]; 
                ReleaseHold[$CellContext`calcTilt$$]), Evaluator -> Automatic,
                Method -> "Preemptive"], ""}}, AutoDelete -> False, 
            GridBoxAlignment -> {"Columns" -> {Right, Left}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
         DynamicBox[
          ToBoxes[If[
             Not[$CellContext`cutOn$$], 
             ReleaseHold[$CellContext`calcCutOff$$]; $CellContext`polygons$$ = \
{}; Null, $CellContext`infty$$ = False; ReleaseHold[$CellContext`calcCutOn$$]; 
             Null]; $CellContext`dsCurrent$$ = Prepend[
              Map[
              Norm[#] ($CellContext`V100$$/$CellContext`l0$$) \
$CellContext`param1[#, 
                 $CellContext`d[#], $CellContext`infty$$, $CellContext`\
\[Alpha]1$$, $CellContext`\[Beta]1$$, $CellContext`\[Gamma]1$$, \
$CellContext`mult100$$, $CellContext`mult\[Alpha]$$, \
$CellContext`mult\[Beta]$$, $CellContext`mult\[Gamma]$$, $CellContext`L$$, \
$CellContext`t$$]& , 
               Rest[$CellContext`normals$$]], 
              0]; $CellContext`exportCurrentState$$ = 
            Compress[{$CellContext`l0$$, $CellContext`V100$$, \
$CellContext`relativeOn$$, $CellContext`infty$$, $CellContext`opacity$$, \
$CellContext`boxed$$, $CellContext`planeChoice$$, $CellContext`normals$$, \
$CellContext`n$$, $CellContext`cutOn$$, $CellContext`drawCutPlane$$, \
$CellContext`cutPosition$$, $CellContext`previewNum$$, $CellContext`Num$$, \
$CellContext`tMin$$, $CellContext`t$$, $CellContext`\[Alpha]1$$, \
$CellContext`\[Beta]1$$, $CellContext`\[Gamma]1$$, $CellContext`\
\[CapitalDelta]100posz$$, $CellContext`\[CapitalDelta]100posx$$, \
$CellContext`\[CapitalDelta]100posy$$, \
$CellContext`\[CapitalDelta]\[Alpha]z$$, \
$CellContext`\[CapitalDelta]\[Beta]posz$$, \
$CellContext`\[CapitalDelta]\[Beta]negz$$, \
$CellContext`\[CapitalDelta]\[Beta]posy$$, $CellContext`\[CapitalDelta]\
\[Alpha]posxposy$$, $CellContext`\[CapitalDelta]\[Alpha]negyposx$$, \
$CellContext`mult100$$, $CellContext`mult\[Alpha]$$, \
$CellContext`mult\[Beta]$$, $CellContext`mult\[Gamma]$$, $CellContext`ds$$, \
$CellContext`ds1$$, $CellContext`tiltAngles$$, $CellContext`growDown$$, \
$CellContext`\[CapitalDelta]\[Beta]posx$$, $CellContext`showVelocity$$, \
$CellContext`\[CapitalDelta]100negx$$, $CellContext`\[CapitalDelta]100negy$$, \
$CellContext`\[CapitalDelta]\[Alpha]negxposy$$, $CellContext`\[CapitalDelta]\
\[Alpha]negynegx$$, $CellContext`\[CapitalDelta]\[Beta]negx$$, $CellContext`\
\[CapitalDelta]\[Beta]negy$$, $CellContext`cutZAxis$$, \
$CellContext`cutYAxis$$, $CellContext`cutXAxis$$, $CellContext`timeStep$$, \
$CellContext`\[CapitalDelta]\[Beta]posxposy$$, $CellContext`\[CapitalDelta]\
\[Beta]negyposx$$, $CellContext`\[CapitalDelta]\[Beta]negxposy$$, \
$CellContext`\[CapitalDelta]\[Beta]negynegx$$, $CellContext`velocityA$$, \
$CellContext`velocityB$$, $CellContext`velocityC$$, \
$CellContext`constantVelocity$$, $CellContext`constantVelocityValue$$, \
$CellContext`t$$, $CellContext`\[CapitalDelta]\[Gamma]3z$$, $CellContext`\
\[CapitalDelta]\[Gamma]pos1z$$, $CellContext`\[CapitalDelta]\[Gamma]neg1z$$, \
$CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]pos3xnegy$$, $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$, \
$CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]neg3xposy$$, $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$, \
$CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxpos3y$$, $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$, \
$CellContext`\[CapitalDelta]\[Gamma]posxposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxposy$$, $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$, \
$CellContext`\[Delta]1$$, $CellContext`\[CapitalDelta]\[Delta]5z$$, \
$CellContext`\[CapitalDelta]\[Delta]pos1z$$, $CellContext`\[CapitalDelta]\
\[Delta]neg1z$$, $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$, \
$CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$, $CellContext`\[CapitalDelta]\
\[Delta]posxneg5y$$, $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$, \
$CellContext`\[CapitalDelta]\[Delta]neg5xposy$$, $CellContext`\[CapitalDelta]\
\[Delta]neg5xnegy$$, $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$, \
$CellContext`\[CapitalDelta]\[Delta]negxpos5y$$, $CellContext`\[CapitalDelta]\
\[Delta]posxnegy$$, $CellContext`\[CapitalDelta]\[Delta]posxposy$$, \
$CellContext`\[CapitalDelta]\[Delta]negxposy$$, $CellContext`\[CapitalDelta]\
\[Delta]negxnegy$$, $CellContext`\[CapitalDelta]100negz$$, \
$CellContext`plateThickness$$, $CellContext`cutLoss$$, \
$CellContext`beginningCutPosition$$, $CellContext`endCutPosition$$}]; \
$CellContext`exportInitialState$$ = 
            Compress[{$CellContext`l0$$, $CellContext`boxed$$, \
$CellContext`ds$$, $CellContext`tiltAngles$$, $CellContext`cutOn$$, \
$CellContext`drawCutPlane$$, $CellContext`n$$, $CellContext`cutPosition$$, \
$CellContext`Num$$, $CellContext`tMin$$, $CellContext`infty$$, \
$CellContext`t$$, $CellContext`V100$$, $CellContext`\[Alpha]1$$, \
$CellContext`\[Beta]1$$, $CellContext`\[Gamma]1$$, $CellContext`mult100$$, \
$CellContext`mult\[Alpha]$$, $CellContext`mult\[Beta]$$, $CellContext`mult\
\[Gamma]$$}]; Grid[{{
               Dynamic[
                Show[$CellContext`polyGraphics$$, 
                 Graphics3D[$CellContext`polygons$$], 
                 Graphics3D[{
                   Thickness[0.003], $CellContext`timeStepLines3D$$}], 
                 Graphics3D[$CellContext`timePolygon3D$$], Boxed -> 
                 Dynamic[$CellContext`boxed$$], Axes -> 
                 Dynamic[$CellContext`boxed$$], ImageSize -> 500, Lighting -> 
                 "Neutral"]], "", ""}, {
               Dynamic[
                If[$CellContext`cutOn$$, 
                 Show[
                  
                  Graphics[{$CellContext`polygons2D$$, \
$CellContext`timePolygon2D$$, 
                    Thickness[0.002], $CellContext`timeStepLines2D$$, 
                    Text["Time of first appearance = " <> ToString[
                    NumberForm[
                    If[
                    Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 
                    0, 
                    Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
                    " hrs\nTime of growth completion = " <> ToString[
                    NumberForm[$CellContext`t$$, {10, 2}]] <> 
                    " hrs\nTime Intervals = " <> ToString[
                    NumberForm[$CellContext`timeStep$$, {10, 2}]] <> 
                    " hrs/step" <> "\n\[Alpha] = " <> 
                    ToString[$CellContext`\[Alpha]1$$] <> ", \[Beta] = " <> 
                    ToString[$CellContext`\[Beta]1$$] <> "\n\[Gamma] = " <> 
                    ToString[$CellContext`\[Gamma]1$$] <> ", \[Delta] = " <> 
                    ToString[$CellContext`\[Delta]1$$] <> "\nCut Plane: " <> 
                    StringReplace[
                    
                    ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
                    "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(",
                     "}" -> ")", "," -> " "}] <> "\nCut Distance " <> 
                    ToString[$CellContext`cutPosition$$], \
{$CellContext`textX$$ + 1, $CellContext`textY$$ + 1}]}, Axes -> True, 
                   AxesLabel -> {"(mm)", "(mm)"}], Boxed -> 
                  Dynamic[$CellContext`boxed$$], Axes -> 
                  Dynamic[$CellContext`boxed$$], ImageSize -> 500], ""]]}, {
               Dynamic[
                If[$CellContext`ShowVelocityPlot$$, 
                 Show[$CellContext`velocityPlot$$, ImageSize -> 500], ""]]}, {
               Dynamic[
               If[$CellContext`constantVelocity$$, "Constant Velocity = " <> 
                  ToString[
                    NumberForm[$CellContext`V100$$ 10^3, {10, 2}]], 
                  "Average Growth Velocity = " <> ToString[
                    NumberForm[
                    
                    If[$CellContext`t$$ == 
                    0, $CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`t$$)^$CellContext`velocityB$$, 
                    Quiet[
                    NIntegrate[$CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$, {$CellContext`x, 0, 
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
                    If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]], {
                    10, 2}]]] <> " (\[Micro]m/hr)\n" <> 
                If[$CellContext`infty$$, "The steady-state shape.\nType: ", 
                  If[
                   Not[$CellContext`relativeOn$$], "Type: ", 
                   "Sizes are relative to \!\(\*SubscriptBox[\(l\), \(0\)]\).\
\nType: "]] <> $CellContext`type$$ <> "\n" <> $CellContext`info$$ <> "\n" <> 
                "Volume = " <> ToString[
                  NumberForm[$CellContext`volume$$, {10, 2}]] <> 
                " \!\(\*SuperscriptBox[\(mm\), \(3\)]\), Crystal Mass = " <> 
                ToString[
                  NumberForm[$CellContext`volume$$ (3.5/1000), {10, 2}]] <> 
                " g (" <> ToString[
                  NumberForm[($CellContext`volume$$ (3.5/1000)) 5, {10, 1}]] <> 
                " ct)\nDiamond Height:" <> ToString[
                  NumberForm[$CellContext`maxHeight$$, {10, 2}]] <> " mm\n" <> 
                "Largest Rectangle Dimensions: " <> ToString[
                  NumberForm[$CellContext`largestlength$$, {10, 2}]] <> 
                " mm x " <> ToString[
                  NumberForm[$CellContext`largestwidth$$, {10, 2}]] <> 
                " mm\n" <> "Bottom Facet Dimensions: " <> ToString[
                  NumberForm[$CellContext`bottomLength$$, {10, 2}]] <> 
                " mm x " <> ToString[
                  NumberForm[$CellContext`bottomWidth$$, {10, 2}]] <> " mm\n" <> 
                "Top Facet Dimensions: " <> ToString[
                  NumberForm[$CellContext`topLength$$, {10, 2}]] <> " mm x " <> 
                ToString[
                  NumberForm[$CellContext`topWidth$$, {10, 2}]] <> " mm\n", 
                ""]}}], StandardForm], 
          ImageSizeCache -> {
           365.28, {245.18419446422718`, 249.19654806395062`}}, 
          SynchronousUpdating -> False, 
          TrackedSymbols :> {$CellContext`l0$$, $CellContext`V100$$, \
$CellContext`relativeOn$$, $CellContext`infty$$, $CellContext`opacity$$, \
$CellContext`boxed$$, $CellContext`planeChoice$$, $CellContext`normals$$, \
$CellContext`n$$, $CellContext`cutOn$$, $CellContext`drawCutPlane$$, \
$CellContext`cutPosition$$, $CellContext`previewNum$$, $CellContext`Num$$, \
$CellContext`tMin$$, $CellContext`t$$, $CellContext`\[Alpha]1$$, \
$CellContext`\[Beta]1$$, $CellContext`\[Gamma]1$$, $CellContext`\
\[CapitalDelta]100posz$$, $CellContext`\[CapitalDelta]100posx$$, \
$CellContext`\[CapitalDelta]100posy$$, \
$CellContext`\[CapitalDelta]\[Alpha]z$$, \
$CellContext`\[CapitalDelta]\[Beta]posz$$, \
$CellContext`\[CapitalDelta]\[Beta]negz$$, \
$CellContext`\[CapitalDelta]\[Beta]posy$$, $CellContext`\[CapitalDelta]\
\[Alpha]posxposy$$, $CellContext`\[CapitalDelta]\[Alpha]negyposx$$, \
$CellContext`mult100$$, $CellContext`mult\[Alpha]$$, \
$CellContext`mult\[Beta]$$, $CellContext`mult\[Gamma]$$, $CellContext`ds$$, \
$CellContext`ds1$$, $CellContext`tiltAngles$$, $CellContext`growDown$$, \
$CellContext`\[CapitalDelta]\[Beta]posx$$, $CellContext`showVelocity$$, \
$CellContext`\[CapitalDelta]100negx$$, $CellContext`\[CapitalDelta]100negy$$, \
$CellContext`\[CapitalDelta]\[Alpha]negxposy$$, $CellContext`\[CapitalDelta]\
\[Alpha]negynegx$$, $CellContext`\[CapitalDelta]\[Beta]negx$$, $CellContext`\
\[CapitalDelta]\[Beta]negy$$, $CellContext`cutZAxis$$, \
$CellContext`cutYAxis$$, $CellContext`cutXAxis$$, $CellContext`timeStep$$, \
$CellContext`\[CapitalDelta]\[Beta]posxposy$$, $CellContext`\[CapitalDelta]\
\[Beta]negyposx$$, $CellContext`\[CapitalDelta]\[Beta]negxposy$$, \
$CellContext`\[CapitalDelta]\[Beta]negynegx$$, $CellContext`velocityA$$, \
$CellContext`velocityB$$, $CellContext`velocityC$$, \
$CellContext`constantVelocity$$, $CellContext`constantVelocityValue$$, \
$CellContext`\[CapitalDelta]\[Gamma]3z$$, \
$CellContext`\[CapitalDelta]\[Gamma]pos1z$$, $CellContext`\[CapitalDelta]\
\[Gamma]neg1z$$, $CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$, \
$CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$, $CellContext`\[CapitalDelta]\
\[Gamma]posxneg3y$$, $CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$, \
$CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]neg3xnegy$$, $CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$, \
$CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$, $CellContext`\[CapitalDelta]\
\[Gamma]posxnegy$$, $CellContext`\[CapitalDelta]\[Gamma]posxposy$$, \
$CellContext`\[CapitalDelta]\[Gamma]negxposy$$, $CellContext`\[CapitalDelta]\
\[Gamma]negxnegy$$, $CellContext`\[Delta]1$$, $CellContext`\[CapitalDelta]\
\[Delta]5z$$, $CellContext`\[CapitalDelta]\[Delta]neg1z$$, $CellContext`\
\[CapitalDelta]\[Delta]pos1z$$, \
$CellContext`\[CapitalDelta]\[Delta]pos5xposy$$, $CellContext`\[CapitalDelta]\
\[Delta]pos5xnegy$$, $CellContext`\[CapitalDelta]\[Delta]posxneg5y$$, \
$CellContext`\[CapitalDelta]\[Delta]posxpos5y$$, $CellContext`\[CapitalDelta]\
\[Delta]neg5xposy$$, $CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$, \
$CellContext`\[CapitalDelta]\[Delta]negxneg5y$$, $CellContext`\[CapitalDelta]\
\[Delta]negxpos5y$$, $CellContext`\[CapitalDelta]\[Delta]posxnegy$$, \
$CellContext`\[CapitalDelta]\[Delta]posxposy$$, $CellContext`\[CapitalDelta]\
\[Delta]negxposy$$, $CellContext`\[CapitalDelta]\[Delta]negxnegy$$, \
$CellContext`\[CapitalDelta]100negz$$, $CellContext`factorList$$, \
$CellContext`individualGrowthFactors$$}]},
        "RowDefault"]},
      {
       DynamicBox[ToBoxes[
         Grid[$CellContext`plateCutsGraphics$$, Frame -> All], StandardForm],
        ImageSizeCache->{9.04, {4.5772754337452355`, 8.589629033468665}},
        SynchronousUpdating->False]},
      {
       DynamicBox[ToBoxes[
         If[$CellContext`printOn$$, 
          "Saved Parameter Settings: \n" <> $CellContext`exportCurrentState$$,
           ""], StandardForm],
        ImageSizeCache->{0., {0., 4.461132906004787}}]},
      {
       DynamicBox[ToBoxes[
         If[$CellContext`showAreaAndVelocities$$, 
          Grid[
           Prepend[
            MapThread[
            Append[#, #2]& , {$CellContext`velocities$$, \
$CellContext`faceArea$$}], {
            "Velocity Factor Definitions", "Factor Value", 
             "Area (\!\(\*SuperscriptBox[\(mm\), \(2\)]\))"}], Alignment -> 
           Left, Frame -> All, Spacings -> {2, 1}], ""], StandardForm],
        ImageSizeCache->{
         365.87105165252683`, {1067.575421873115, 1071.5877754728385`}}]},
      {
       DynamicBox[ToBoxes[
         Grid[
          
          Prepend[$CellContext`averageGrowthFactors$$, {
           "Growth Factors indices", "Average Value"}], Alignment -> Left, 
          Frame -> All, Spacings -> {2, 1}], StandardForm],
        ImageSizeCache->{
         212.21280632019045`, {157.04264244532214`, 161.05499604504558`}}]},
      {
       DynamicBox[ToBoxes[
         Grid[$CellContext`cutFactors$$, Alignment -> Left, Frame -> All, 
          Spacings -> {2, 1}], StandardForm],
        ImageSizeCache->{
         489.74059848785396`, {45.5314529603906, 49.54380656011403}},
        SynchronousUpdating->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   DynamicModuleValues:>{},
   Initialization:>($CellContext`saveDirectory$$ = 
     Directory[]; $CellContext`testPlanesParallel = 
     Compile[{{$CellContext`planes, 
         Blank[Real], 3}}, 
       Map[Append[#, 1]& , 
        Cases[
         Map[LinearSolve[
           (If[Det[#] != 0, #, 0 #]& )[
            Map[Most, #]], -Map[Last, #]]& , $CellContext`planes], 
         Blank[List]]], RuntimeAttributes -> {Listable}, RuntimeOptions -> 
       "Speed", Parallelization -> 
       True]; $CellContext`normals$$ = CompressedData["
1:eJx1kGEKgDAIha2xg3SdfnaEDlD3Z4xqMOnjoQ/E6dOnczvv41rNbP+s2I/n
g7+XaRFnCbfARi6KnwnlyDNH6IwoNpltosn9VdfrqMOabJeSeFqf2up5A3K8
icfa6zn+d7y5B3VKwLNHb1+Eo56jJ5471cTT2qxXz3+R4wyPtddzeh/uQZ0a
8OzR+1ThqOdoiR94Ad3pjOg=
      "]; $CellContext`tiltAngles$$ = 
     0 Map[Rest, $CellContext`normals$$]; $CellContext`tiltedNormals$$ = \
$CellContext`normals$$; $CellContext`allNormals$$ = $CellContext`normals$$; \
$CellContext`n$$ = {$CellContext`n1$$, $CellContext`n2$$, $CellContext`n3$$}; \
$CellContext`normals1$$ = 
     Append[$CellContext`allNormals$$, $CellContext`n$$]; $CellContext`ds$$ = \
{0, 0.2, 0.5, 0.5, 0.5, 0.5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
       2, 2, 2, 2, 
       2}; $CellContext`ds1$$ = $CellContext`ds$$; $CellContext`pts0$$ = 
     MapThread[#2 (#/
        Norm[#])& , {$CellContext`allNormals$$, $CellContext`ds1$$}]; \
$CellContext`planes0$$ = MapThread[Append[-#, 
        Dot[#, #2]]& , {$CellContext`allNormals$$, $CellContext`pts0$$}]; 
    Quiet[$CellContext`nodes0$$ = $CellContext`testPlanesParallel[
        Subsets[$CellContext`planes0$$, {3}]]]; $CellContext`vertices0$$ = 
     DeleteDuplicates[
       Select[$CellContext`nodes0$$, Chop[
          Min[
           Dot[$CellContext`planes0$$, #]]] >= 0& ], Chop[
         Norm[# - #2]] == 0& ]; $CellContext`pts0$$ = Table[
       Most[
        Part[
         Select[$CellContext`vertices0$$, Dot[#, 
            Part[$CellContext`planes0$$, $CellContext`i]] == Min[
            Dot[$CellContext`vertices0$$, 
             Part[$CellContext`planes0$$, $CellContext`i]]]& , 1], 
         1]], {$CellContext`i, 1, 
        Length[$CellContext`planes0$$]}]; $CellContext`ds1$$ = 
     MapThread[
      Dot[#, #2]/
       Norm[#]& , {$CellContext`allNormals$$, $CellContext`pts0$$}]; \
$CellContext`d[
       Pattern[$CellContext`n$, 
        Blank[]]] := Norm[$CellContext`n$] Part[$CellContext`ds1$$, 
        Part[
         Position[
          Join[$CellContext`tiltedNormals$$, 
           
           Complement[$CellContext`normals$$, $CellContext`tiltedNormals$$]], \
$CellContext`n$], 1, 1]]; $CellContext`polyhedron[
       Pattern[$CellContext`normals, 
        Blank[]], 
       Pattern[$CellContext`pts, 
        Blank[]]] := 
     Module[{$CellContext`planes, $CellContext`relevantPlanes, \
$CellContext`nodes, $CellContext`vertices, $CellContext`incidence, \
$CellContext`adjacency, $CellContext`faceNodes, $CellContext`faceGraphs, \
$CellContext`orderings, $CellContext`faces, $CellContext`result}, \
$CellContext`planes = MapThread[Append[-#, 
           
           Dot[#, #2]]& , {$CellContext`normals, $CellContext`pts}]; \
$CellContext`planes = DeleteDuplicates[$CellContext`planes, Chop[
            Norm[# - #2]] == 0& ]; 
       Quiet[$CellContext`nodes = $CellContext`testPlanesParallel[
           Subsets[$CellContext`planes, {3}]]]; $CellContext`vertices = 
        DeleteDuplicates[
          Select[$CellContext`nodes, Chop[
             Min[
              Dot[$CellContext`planes, #]]] >= 0& ], Chop[
            Norm[# - #2]] == 0& ]; $CellContext`incidence = SparseArray[
          Outer[Boole[Chop[
              Dot[#, #2]] == 0]& , $CellContext`vertices, $CellContext`planes,
            1]]; $CellContext`adjacency = Map[Boole[# >= 2]& , 
          Dot[$CellContext`incidence, 
           Transpose[$CellContext`incidence]], {2}]; $CellContext`faceNodes = 
        Map[Flatten[
           Position[
            Normal[#], 1]]& , 
          Transpose[$CellContext`incidence]]; $CellContext`faceGraphs = 
        Map[SimpleGraph[
           AdjacencyGraph[
            
            Part[$CellContext`adjacency, #, #]]]& , $CellContext`faceNodes]; \
$CellContext`orderings = Map[Map[First, 
           (If[# != {}, 
            First[#], {}]& )[
            
            FindEulerianCycle[#, 
             1]]]& , $CellContext`faceGraphs]; $CellContext`faces = 
        MapThread[
         Part, {$CellContext`faceNodes, $CellContext`orderings}]; \
$CellContext`result["vertices"] = 
        Map[Most, $CellContext`vertices]; $CellContext`result[
         "faces"] = $CellContext`faces; $CellContext`result]; \
$CellContext`param0[
       Pattern[$CellContext`n$, 
        Blank[]]] := Module[{$CellContext`k$ = Part[
          Nearest[$CellContext`normals$$, $CellContext`n$, 1], 1]}, 
       If[Chop[
          Norm[$CellContext`n$ - $CellContext`k$]] == 0, 
        Which[
         And[Sort[
            Map[Abs, $CellContext`k$]] == {0, 0, 1}, Part[$CellContext`k$, 3] == 
          1], 1/$CellContext`f00pos1$$, 
         And[Sort[
            Map[Abs, $CellContext`k$]] == {0, 0, 1}, 
          Part[$CellContext`k$, 3] == -1], 1/$CellContext`f00neg1$$, 
         And[Sort[
            Map[Abs, $CellContext`k$]] == {0, 0, 1}, Part[$CellContext`k$, 3] == 
          0, Part[$CellContext`k$, 1] == 1], 1/$CellContext`fpos100$$, 
         And[Sort[
            Map[Abs, $CellContext`k$]] == {0, 0, 1}, Part[$CellContext`k$, 3] == 
          0, Part[$CellContext`k$, 1] == -1], 1/$CellContext`fneg100$$, 
         And[Sort[
            Map[Abs, $CellContext`k$]] == {0, 0, 1}, Part[$CellContext`k$, 3] == 
          0, Part[$CellContext`k$, 2] == 1], 1/$CellContext`f0pos10$$, 
         And[Sort[
            Map[Abs, $CellContext`k$]] == {0, 0, 1}, Part[$CellContext`k$, 3] == 
          0, Part[$CellContext`k$, 2] == -1], 
         1/$CellContext`f0neg10$$, $CellContext`n$ == {0, 1, 1}, 
         Sqrt[2]/$CellContext`f0pos1pos1$$, $CellContext`n$ == {1, 0, 1}, 
         Sqrt[2]/$CellContext`fpos10pos1$$, $CellContext`n$ == {1, 1, 0}, 
         Sqrt[2]/$CellContext`fpos1pos10$$, $CellContext`n$ == {0, -1, 1}, 
         Sqrt[2]/$CellContext`f0neg1pos1$$, $CellContext`n$ == {1, 0, -1}, 
         Sqrt[2]/$CellContext`fpos10neg1$$, $CellContext`n$ == {1, -1, 0}, 
         Sqrt[2]/$CellContext`fpos1neg10$$, $CellContext`n$ == {0, 1, -1}, 
         Sqrt[2]/$CellContext`f0pos1neg1$$, $CellContext`n$ == {-1, 0, 1}, 
         Sqrt[2]/$CellContext`fneg10pos1$$, $CellContext`n$ == {-1, 1, 0}, 
         Sqrt[2]/$CellContext`fneg1pos10$$, $CellContext`n$ == {0, -1, -1}, 
         Sqrt[2]/$CellContext`f0neg1neg1$$, $CellContext`n$ == {-1, 0, -1}, 
         Sqrt[2]/$CellContext`fneg10neg1$$, $CellContext`n$ == {-1, -1, 0}, 
         Sqrt[2]/$CellContext`fneg1neg10$$, $CellContext`n$ == {1, 1, 1}, 
         Sqrt[3]/$CellContext`fpos1pos1pos1$$, $CellContext`n$ == {-1, 1, 1}, 
         Sqrt[3]/$CellContext`fneg1pos1pos1$$, $CellContext`n$ == {-1, -1, 1},
          Sqrt[3]/$CellContext`fneg1neg1pos1$$, $CellContext`n$ == {1, -1, 1},
          Sqrt[3]/$CellContext`fpos1neg1pos1$$, $CellContext`n$ == {1, 1, -1},
          Sqrt[3]/$CellContext`fpos1pos1neg1$$, $CellContext`n$ == {-1, 
          1, -1}, Sqrt[
          3]/$CellContext`fneg1pos1neg1$$, $CellContext`n$ == {-1, -1, -1}, 
         Sqrt[3]/$CellContext`fneg1neg1neg1$$, $CellContext`n$ == {1, -1, -1},
          Sqrt[3]/$CellContext`fpos1neg1neg1$$, $CellContext`n$ == {1, 1, 3}, 
         Sqrt[11]/$CellContext`fpos1pos1pos3$$, $CellContext`n$ == {1, 3, 1}, 
         Sqrt[11]/$CellContext`fpos1pos3pos1$$, $CellContext`n$ == {3, 1, 1}, 
         Sqrt[11]/$CellContext`fpos3pos1pos1$$, $CellContext`n$ == {1, 1, -3},
          Sqrt[11]/$CellContext`fpos1pos1pos3$$, $CellContext`n$ == {1, -3, 
          1}, Sqrt[11]/$CellContext`fpos1neg3pos1$$, $CellContext`n$ == {-3, 
          1, 1}, Sqrt[11]/$CellContext`fneg3pos1pos1$$, $CellContext`n$ == {
          1, -1, -3}, 
         Sqrt[11]/$CellContext`fpos1neg1neg3$$, $CellContext`n$ == {
          1, -3, -1}, 
         Sqrt[11]/$CellContext`fpos1neg3neg1$$, $CellContext`n$ == {-1, 
          1, -3}, Sqrt[
          11]/$CellContext`fneg1pos1neg3$$, $CellContext`n$ == {-1, -3, 1}, 
         Sqrt[11]/$CellContext`fneg1neg3pos1$$, $CellContext`n$ == {-3, 
          1, -1}, Sqrt[
          11]/$CellContext`fneg3pos1neg1$$, $CellContext`n$ == {-3, -1, 1}, 
         Sqrt[11]/$CellContext`fneg3neg1pos1$$, $CellContext`n$ == {1, -1, 3},
          Sqrt[11]/$CellContext`fpos1neg1pos3$$, $CellContext`n$ == {1, 
          3, -1}, Sqrt[
          11]/$CellContext`fpos1pos3neg1$$, $CellContext`n$ == {-1, 1, 3}, 
         Sqrt[11]/$CellContext`fneg1pos1pos3$$, $CellContext`n$ == {-1, 3, 1},
          Sqrt[11]/$CellContext`fneg1pos3pos1$$, $CellContext`n$ == {3, 
          1, -1}, Sqrt[11]/$CellContext`fpos3pos1neg1$$, $CellContext`n$ == {
          3, -1, 1}, 
         Sqrt[11]/$CellContext`fpos3neg1pos1$$, $CellContext`n$ == {-1, -1, 
          3}, Sqrt[11]/$CellContext`fneg1neg1pos3$$, $CellContext`n$ == {-1, 
          3, -1}, Sqrt[11]/$CellContext`fneg1pos3neg1$$, $CellContext`n$ == {
          3, -1, -1}, 
         Sqrt[11]/$CellContext`fpos3neg1neg1$$, $CellContext`n$ == {-1, -1, \
-3}, Sqrt[11]/$CellContext`fneg1neg1neg3$$, $CellContext`n$ == {-1, -3, -1}, 
         Sqrt[11]/$CellContext`fneg1neg3neg1$$, $CellContext`n$ == {-3, -1, \
-1}, Sqrt[11]/$CellContext`fneg3neg1neg1$$, $CellContext`n$ == {1, 1, 5}, 
         Sqrt[27]/$CellContext`fpos1pos1pos5$$, $CellContext`n$ == {1, 5, 1}, 
         Sqrt[27]/$CellContext`fpos1pos5pos1$$, $CellContext`n$ == {5, 1, 1}, 
         Sqrt[27]/$CellContext`fpos5pos1pos1$$, $CellContext`n$ == {1, 1, -5},
          Sqrt[27]/$CellContext`fpos1pos1pos5$$, $CellContext`n$ == {1, -5, 
          1}, Sqrt[27]/$CellContext`fpos1neg5pos1$$, $CellContext`n$ == {-5, 
          1, 1}, Sqrt[27]/$CellContext`fneg5pos1pos1$$, $CellContext`n$ == {
          1, -1, -5}, 
         Sqrt[27]/$CellContext`fpos1neg1neg5$$, $CellContext`n$ == {
          1, -5, -1}, 
         Sqrt[27]/$CellContext`fpos1neg5neg1$$, $CellContext`n$ == {-1, 
          1, -5}, Sqrt[
          27]/$CellContext`fneg1pos1neg5$$, $CellContext`n$ == {-1, -5, 1}, 
         Sqrt[27]/$CellContext`fneg1neg5pos1$$, $CellContext`n$ == {-5, 
          1, -1}, Sqrt[
          27]/$CellContext`fneg5pos1neg1$$, $CellContext`n$ == {-5, -1, 1}, 
         Sqrt[27]/$CellContext`fneg5neg1pos1$$, $CellContext`n$ == {1, -1, 5},
          Sqrt[27]/$CellContext`fpos1neg1pos5$$, $CellContext`n$ == {1, 
          5, -1}, Sqrt[
          27]/$CellContext`fpos1pos5neg1$$, $CellContext`n$ == {-1, 1, 5}, 
         Sqrt[27]/$CellContext`fneg1pos1pos5$$, $CellContext`n$ == {-1, 5, 1},
          Sqrt[27]/$CellContext`fneg1pos5pos1$$, $CellContext`n$ == {5, 
          1, -1}, Sqrt[27]/$CellContext`fpos5pos1neg1$$, $CellContext`n$ == {
          5, -1, 1}, 
         Sqrt[27]/$CellContext`fpos5neg1pos1$$, $CellContext`n$ == {-1, -1, 
          5}, Sqrt[27]/$CellContext`fneg1neg1pos5$$, $CellContext`n$ == {-1, 
          5, -1}, Sqrt[27]/$CellContext`fneg1pos5neg1$$, $CellContext`n$ == {
          5, -1, -1}, 
         Sqrt[27]/$CellContext`fpos5neg1neg1$$, $CellContext`n$ == {-1, -1, \
-5}, Sqrt[27]/$CellContext`fneg1neg1neg5$$, $CellContext`n$ == {-1, -5, -1}, 
         Sqrt[27]/$CellContext`fneg1neg5neg1$$, $CellContext`n$ == {-5, -1, \
-1}, Sqrt[27]/$CellContext`fneg5neg1neg1$$, Sort[
           Map[Abs, $CellContext`n$]] == {1, 1, 3}, $CellContext`\[Gamma]1$$], 
        Which[Sort[
           Map[Abs, $CellContext`k$]] == {0, 0, 1}, 1/$CellContext`mult100$$, 
         Sort[
           Map[Abs, $CellContext`k$]] == {0, 1, 
          1}, $CellContext`\[Beta]1$$/$CellContext`mult\[Beta]$$, Sort[
           Map[Abs, $CellContext`k$]] == {1, 1, 
          1}, $CellContext`\[Alpha]1$$/$CellContext`mult\[Alpha]$$, Sort[
           Map[Abs, $CellContext`k$]] == {1, 1, 
          3}, $CellContext`\[Gamma]1$$/$CellContext`mult\[Gamma]$$]]]; \
$CellContext`param1[
       Pattern[$CellContext`n, 
        Blank[]], 
       Pattern[$CellContext`d0, 
        Blank[]], 
       Pattern[$CellContext`infty, 
        Blank[]], 
       Pattern[$CellContext`L, 
        Blank[]], 
       Pattern[$CellContext`t, 
        Blank[]]] := 
     If[$CellContext`infty, 1/$CellContext`param0[$CellContext`n], 
       2 $CellContext`L $CellContext`d0/
        Norm[$CellContext`n]^2 + \
$CellContext`t/$CellContext`param0[$CellContext`n]]; $CellContext`pts1[
       Pattern[$CellContext`infty$, 
        Blank[]], 
       Pattern[$CellContext`L$, 
        Blank[]], 
       Pattern[$CellContext`t$, 
        Blank[]], 
       Pattern[$CellContext`normals$, 
        Blank[]]] := If[$CellContext`growDown$$, 
       Map[$CellContext`param1[#, 
          $CellContext`d[#], $CellContext`infty$, $CellContext`L$, \
$CellContext`t$] #& , $CellContext`normals$], 
       Prepend[
        Map[$CellContext`param1[#, 
           $CellContext`d[#], $CellContext`infty$, $CellContext`L$, \
$CellContext`t$] #& , 
         Rest[$CellContext`normals$]], {0, 0, 0}]]; $CellContext`polyhedron2[
       Pattern[$CellContext`normals, 
        Blank[]], 
       Pattern[$CellContext`pts, 
        Blank[]], 
       Pattern[$CellContext`c, 
        Blank[]]] := 
     Module[{$CellContext`n, $CellContext`p, $CellContext`planes, \
$CellContext`nodes, $CellContext`vertices, $CellContext`incidence, \
$CellContext`adjacency, $CellContext`faceNodes, $CellContext`faceGraph, \
$CellContext`ordering, $CellContext`face, $CellContext`result, \
$CellContext`edges, $CellContext`colors}, $CellContext`p = 
        Part[$CellContext`pts, 1, 1]; $CellContext`n = 
        Last[$CellContext`normals]; $CellContext`planes = MapThread[Append[-#, 
           Dot[#, #2]]& , {$CellContext`normals, 
           Append[$CellContext`pts, $CellContext`c $CellContext`n]}]; 
       If[$CellContext`c == $CellContext`p, $CellContext`planes = 
         Drop[$CellContext`planes, -1]]; 
       Quiet[$CellContext`nodes = Map[Append[#, 1]& , 
           Cases[
            Map[LinearSolve[
              (If[Det[#] != 0, #, 0 #]& )[
               Map[Most, #]], -Map[Last, #]]& , 
             Map[Append[#, 
               Last[$CellContext`planes]]& , 
              Subsets[
               Most[$CellContext`planes], {2}]]], 
            Blank[List]]]]; $CellContext`vertices = DeleteDuplicates[
          Select[$CellContext`nodes, Chop[
             Min[
              Dot[$CellContext`planes, #]]] >= 0& ], Chop[
            Norm[# - #2]] == 0& ]; 
       If[$CellContext`vertices != {}, $CellContext`incidence = SparseArray[
            Outer[Boole[Chop[
                Dot[#, #2]] == 
              0]& , $CellContext`vertices, $CellContext`planes, 
             1]]; $CellContext`adjacency = Map[Boole[# >= 2]& , 
            Dot[$CellContext`incidence, 
             Transpose[$CellContext`incidence]], {2}]; $CellContext`faceNodes = 
          Map[Flatten[
             Position[
              Normal[#], 1]]& , 
            Transpose[$CellContext`incidence]]; $CellContext`faceGraph = (
           SimpleGraph[
            AdjacencyGraph[
             Part[$CellContext`adjacency, #, #]]]& )[
            Last[$CellContext`faceNodes]]; $CellContext`ordering = (Map[First, 
            (If[# != {}, 
             First[#], {}]& )[
             
             FindEulerianCycle[#, 
              1]]]& )[$CellContext`faceGraph]; $CellContext`face = Part[
            
            Last[$CellContext`faceNodes], $CellContext`ordering]; \
$CellContext`edges = Transpose[
            ({#, 
             RotateLeft[#]}& )[
             Range[
              Length[$CellContext`face]]]]; $CellContext`colors = Map[Total, 
            Map[Map[Abs, 
              Extract[$CellContext`normals, 
               Flatten[
                Position[
                 Most[$CellContext`faceNodes], 
                 Alternatives[{
                   BlankNullSequence[], 
                   Part[$CellContext`face, 
                    Part[$CellContext`edges, #, 1]], 
                   Part[$CellContext`face, 
                    Part[$CellContext`edges, #, 2]], 
                   BlankNullSequence[]}, {
                   BlankNullSequence[], 
                   Part[$CellContext`face, 
                    Part[$CellContext`edges, #, 2]], 
                   Part[$CellContext`face, 
                    Part[$CellContext`edges, #, 1]], 
                   BlankNullSequence[]}], 1, 1]]]]& , 
             Range[
              Length[$CellContext`edges]]]]; $CellContext`result["vertices"] = 
          Map[Most, $CellContext`vertices]; $CellContext`result[
           "face"] = $CellContext`face; $CellContext`result[
           "colors"] = $CellContext`colors; 
         Null, $CellContext`result["vertices"] = {}; $CellContext`result[
           "face"] = {}; $CellContext`result["colors"] = {}; 
         Null]; $CellContext`result]; $CellContext`polygon[
       Pattern[$CellContext`vertices, 
        Blank[]], 
       Pattern[$CellContext`colors, 
        Blank[]]] := 
     Module[{$CellContext`edges, $CellContext`angle, $CellContext`k}, 
       If[$CellContext`vertices != {}, $CellContext`edges = Transpose[
           ({#, 
            RotateLeft[#]}& )[
            Range[
             Length[$CellContext`vertices]]]]; 
        GraphicsComplex[$CellContext`vertices, 
          Join[
           Map[{$CellContext`k = Part[$CellContext`colors, #]; Switch[
               Part[
                Nearest[{0, 1, 2, 3, 5}, $CellContext`k, 1], 1], 0, Black, 1, 
               Darker[
                GrayLevel[0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 1]]]], 2, 
               Darker[
                Lighter[Magenta, 0.4], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 2]]]], 3, 
               Darker[
                Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 3]]]], 5, 
               Darker[Blue, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 5]]]], 7, 
               Darker[Yellow, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 7]]]]], Dashed, 
             Line[
              Part[$CellContext`edges, #]]}& , 
            Range[
             Length[$CellContext`vertices]]]]], {}]]; $CellContext`polygon3D[
       Pattern[$CellContext`vertices, 
        Blank[]], 
       Pattern[$CellContext`colors, 
        Blank[]]] := 
     Module[{$CellContext`edges, $CellContext`angle, $CellContext`k}, 
       If[$CellContext`vertices != {}, $CellContext`edges = Transpose[
           ({#, 
            RotateLeft[#]}& )[
            Range[
             Length[$CellContext`vertices]]]]; 
        GraphicsComplex[$CellContext`vertices, 
          Join[
           Map[{$CellContext`k = Part[$CellContext`colors, #]; Switch[
               Part[
                Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 0, Black, 1, 
               Darker[
                GrayLevel[0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 1]]]], 2, 
               Darker[
                Lighter[Magenta, 0.4], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 2]]]], 3, 
               Darker[
                Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 3]]]], 5, 
               Darker[Blue, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 5]]]], 7, 
               Darker[Yellow, 0.5 Abs[
                  Sign[
                   Chop[$CellContext`k - 7]]]]], 
             Line[
              Part[$CellContext`edges, #]]}& , 
            Range[
             
             Length[$CellContext`vertices]]]]], {}]]; \
$CellContext`exportCutImage$$ = Hold[
       Export[$CellContext`saveDirectory$$ <> "\[Alpha]=" <> 
        ToString[$CellContext`\[Alpha]1$$] <> " \[Beta] =" <> 
        ToString[$CellContext`\[Beta]1$$] <> " \[Gamma]=" <> 
        ToString[$CellContext`\[Gamma]1$$] <> " \[Delta]=" <> 
        ToString[$CellContext`\[Delta]1$$] <> 
        " " <> $CellContext`exportCutFileName$$ <> ".jpeg", 
        Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, 
          Thickness[0.002], $CellContext`timeStepLines2D$$, 
          Text["Time of first appearance = " <> ToString[
             NumberForm[
              If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
               Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
           " hrs\nTime of growth completion = " <> ToString[
             NumberForm[$CellContext`t$$, {10, 2}]] <> 
           " hrs\nTime Intervals = " <> ToString[
             NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
           "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
           ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
           "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
           ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
           "\nCut Plane: " <> StringReplace[
             
             ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
             "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
              ")", "," -> " "}] <> "\nCut Distance " <> 
           ToString[$CellContext`cutPosition$$], {$CellContext`textX$$, \
$CellContext`textY$$ + 1}]}, Axes -> True, 
         AxesLabel -> {"(mm)", "(mm)"}]]]; $CellContext`exportShape$$ = 
     Hold[$CellContext`ExportCrystal$$ = Graphics3D[{
           Specularity[0.5, 6], 
           GraphicsComplex[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] 
            If[$CellContext`infty$$, 1, 1/(
              2 $CellContext`L$$)] $CellContext`vertices$$, {
             Opacity[
              Dynamic[$CellContext`opacity$$]], 
             Table[
              If[Part[$CellContext`faces$$, $CellContext`i] != {}, {
                Block[{$CellContext`k = Total[
                    Map[Abs, 
                    Part[$CellContext`allNormals$$, $CellContext`i]]]}, 
                 Switch[
                  Part[
                   Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
                  Darker[
                   GrayLevel[0.7], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 1]]]], 2, 
                  Darker[
                   Lighter[Magenta, 0.4], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 2]]]], 3, 
                  Darker[
                   Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 3]]]], 5, 
                  Darker[Blue, 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 5]]]], 7, 
                  Darker[Yellow, 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 7]]]]]], {
                 EdgeForm[
                  Thickness[Medium]], 
                 Polygon[
                  
                  Part[$CellContext`faces$$, $CellContext`i]]}}, {}], \
{$CellContext`i, 1, 
               Length[$CellContext`allNormals$$]}], 
             PointSize[0.015], Red, 
             Opacity[1], 
             Dynamic[
              If[$CellContext`hideVertices$$, {}, 
               Point[
                Range[$CellContext`v$$]]]]}]}, Axes -> True, 
          AxesLabel -> {"x", "y", "z"}]; 
       Export[$CellContext`saveDirectory$$ <> "\[Alpha]=" <> 
         ToString[$CellContext`\[Alpha]1$$] <> " \[Beta] =" <> 
         ToString[$CellContext`\[Beta]1$$] <> " \[Gamma]=" <> 
         ToString[$CellContext`\[Gamma]1$$] <> " \[Delta]=" <> 
         ToString[$CellContext`\[Delta]1$$] <> 
         " " <> $CellContext`cadFileName$$ <> 
         ".stl", $CellContext`ExportCrystal$$]; 
       Null]; $CellContext`exportPlateCuts$$ = Hold[
       Export[$CellContext`saveDirectory$$ <> 
        "Plate Cuts Data " <> $CellContext`parameterConfigFileName$$ <> 
        ".txt", $CellContext`plateCutsGraphics$$]]; \
$CellContext`exportIndividualParameters$$ = Hold[
       Export[$CellContext`saveDirectory$$ <> 
        "Individual Parameter Config " <> \
$CellContext`parameterConfigFileName$$ <> ".txt", 
        Compress[{$CellContext`f00neg1$$, $CellContext`f00pos1$$, \
$CellContext`fpos100$$, $CellContext`fneg100$$, $CellContext`f0pos10$$, \
$CellContext`f0neg10$$, $CellContext`fpos1pos1pos1$$, \
$CellContext`fneg1pos1pos1$$, $CellContext`fpos1neg1pos1$$, \
$CellContext`fneg1neg1pos1$$, $CellContext`fpos1pos1neg1$$, \
$CellContext`fneg1pos1neg1$$, $CellContext`fpos1neg1neg1$$, \
$CellContext`fneg1neg1neg1$$, $CellContext`f0pos1pos1$$, \
$CellContext`fpos10pos1$$, $CellContext`fpos1pos10$$, \
$CellContext`f0neg1pos1$$, $CellContext`fpos10neg1$$, \
$CellContext`fpos1neg10$$, $CellContext`f0pos1neg1$$, \
$CellContext`fneg10pos1$$, $CellContext`fneg1pos10$$, \
$CellContext`f0neg1neg1$$, $CellContext`fneg10neg1$$, \
$CellContext`fneg1neg10$$, $CellContext`fpos1pos1pos3$$, \
$CellContext`fpos1pos3pos1$$, $CellContext`fpos3pos1pos1$$, \
$CellContext`fpos1pos1neg3$$, $CellContext`fpos1neg3pos1$$, \
$CellContext`fneg3pos1pos1$$, $CellContext`fpos1neg1neg3$$, \
$CellContext`fpos1neg3neg1$$, $CellContext`fneg1pos1neg3$$, \
$CellContext`fneg1neg3pos1$$, $CellContext`fneg3pos1neg1$$, \
$CellContext`fneg3neg1pos1$$, $CellContext`fpos1neg1pos3$$, \
$CellContext`fpos1pos3neg1$$, $CellContext`fneg1pos1pos3$$, \
$CellContext`fneg1pos3pos1$$, $CellContext`fpos3pos1neg1$$, \
$CellContext`fpos3neg1pos1$$, $CellContext`fneg1neg1pos3$$, \
$CellContext`fneg1pos3neg1$$, $CellContext`fpos3neg1neg1$$, \
$CellContext`fneg1neg1neg3$$, $CellContext`fneg1neg3neg1$$, \
$CellContext`fneg3neg1neg1$$, $CellContext`fpos1pos1pos5$$, \
$CellContext`fpos1pos5pos1$$, $CellContext`fpos5pos1pos1$$, \
$CellContext`fpos1pos1neg5$$, $CellContext`fpos1neg5pos1$$, \
$CellContext`fneg5pos1pos1$$, $CellContext`fpos1neg1neg5$$, \
$CellContext`fpos1neg5neg1$$, $CellContext`fneg1pos1neg5$$, \
$CellContext`fneg1neg5pos1$$, $CellContext`fneg5pos1neg1$$, \
$CellContext`fneg5neg1pos1$$, $CellContext`fpos1neg1pos5$$, \
$CellContext`fpos1pos5neg1$$, $CellContext`fneg1pos1pos5$$, \
$CellContext`fneg1pos5pos1$$, $CellContext`fpos5pos1neg1$$, \
$CellContext`fpos5neg1pos1$$, $CellContext`fneg1neg1pos5$$, \
$CellContext`fneg1pos5neg1$$, $CellContext`fpos5neg1neg1$$, \
$CellContext`fneg1neg1neg5$$, $CellContext`fneg1neg5neg1$$, \
$CellContext`fneg5neg1neg1$$}]]]; $CellContext`exportConfig$$ = Hold[
       Export[$CellContext`saveDirectory$$ <> "\[Alpha]=" <> 
        ToString[$CellContext`\[Alpha]1$$] <> " \[Beta] =" <> 
        ToString[$CellContext`\[Beta]1$$] <> " \[Gamma]=" <> 
        ToString[$CellContext`\[Gamma]1$$] <> " \[Delta]=" <> 
        ToString[$CellContext`\[Delta]1$$] <> 
        " " <> $CellContext`parameterConfigFileName$$ <> 
        ".txt", $CellContext`exportCurrentState$$]]; $CellContext`calcTilt$$ = 
     Hold[
       If[
        Not[$CellContext`infty$$], 
        Part[$CellContext`ds$$, 4] = Part[$CellContext`ds$$, 3]; 
        Part[$CellContext`ds$$, 6] = 
         Part[$CellContext`ds$$, 5]; $CellContext`allNormals$$ = 
         Join[$CellContext`tiltedNormals$$, 
           
           Complement[$CellContext`normals$$, $CellContext`tiltedNormals$$, 
            SameTest -> (Chop[
               Norm[# - #2]] == 0& )]]; $CellContext`ds1$$ = 
         Join[$CellContext`ds$$, 
           Table[
           20000000000, {$CellContext`i, 1, Length[$CellContext`allNormals$$] - 
             Length[$CellContext`normals$$]}]]; $CellContext`pts0$$ = 
         MapThread[#2 (#/
            Norm[#])& , {$CellContext`allNormals$$, $CellContext`ds1$$}]; \
$CellContext`planes0$$ = MapThread[Append[-#, 
            Dot[#, #2]]& , {$CellContext`allNormals$$, $CellContext`pts0$$}]; 
        Quiet[$CellContext`nodes0$$ = $CellContext`testPlanesParallel[
            Subsets[$CellContext`planes0$$, {3}]]]; $CellContext`vertices0$$ = 
         DeleteDuplicates[
           Select[$CellContext`nodes0$$, Chop[
              Min[
               Dot[$CellContext`planes0$$, #]]] >= 0& ], Chop[
             Norm[# - #2]] == 0& ]; $CellContext`pts0$$ = Table[
           Most[
            Part[$CellContext`vertices0$$, 
             Part[
              Ordering[
               Dot[$CellContext`vertices0$$, 
                Part[$CellContext`planes0$$, $CellContext`i]], 1], 
              1]]], {$CellContext`i, 1, 
            Length[$CellContext`planes0$$]}]; $CellContext`ds1$$ = 
         MapThread[
          Dot[#, #2]/
           Norm[#]& , {$CellContext`allNormals$$, $CellContext`pts0$$}]; 
        Null, $CellContext`tiltedNormals$$ = $CellContext`normals$$; \
$CellContext`allNormals$$ = $CellContext`normals$$; $CellContext`ds1$$ = \
$CellContext`ds$$; Null]]; $CellContext`calcCutOff$$ = Hold[If[
         Not[$CellContext`individualGrowthFactors$$], $CellContext`f00neg1$$ = 
          1 + $CellContext`\[CapitalDelta]100negz$$; $CellContext`f00pos1$$ = 
          1 + $CellContext`\[CapitalDelta]100posz$$; $CellContext`fpos100$$ = 
          1 + $CellContext`\[CapitalDelta]100posx$$; $CellContext`fneg100$$ = 
          1 + $CellContext`\[CapitalDelta]100negx$$; $CellContext`f0pos10$$ = 
          1 + $CellContext`\[CapitalDelta]100posy$$; $CellContext`f0neg10$$ = 
          1 + $CellContext`\[CapitalDelta]100negy$$; \
$CellContext`fpos1pos1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]posxposy$$); \
$CellContext`fneg1pos1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Alpha]negxposy$$); \
$CellContext`fpos1neg1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Alpha]negyposx$$); \
$CellContext`fneg1neg1pos1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Alpha]negynegx$$); \
$CellContext`fpos1pos1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]posxposy$$); \
$CellContext`fneg1pos1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]negxposy$$); \
$CellContext`fpos1neg1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]negyposx$$); \
$CellContext`fneg1neg1neg1$$ = (Sqrt[3]/$CellContext`\[Alpha]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]z$$) (
            1 + $CellContext`\[CapitalDelta]\[Alpha]negynegx$$); \
$CellContext`f0pos1pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posy$$) 
           1; $CellContext`fpos10pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posx$$) 
           1; $CellContext`fpos1pos10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Beta]posxposy$$); \
$CellContext`f0neg1pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negy$$) 
           1; $CellContext`fpos10neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posx$$) 
           1; $CellContext`fpos1neg10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Beta]negyposx$$); \
$CellContext`f0pos1neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posy$$) 
           1; $CellContext`fneg10pos1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]posz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negx$$) 
           1; $CellContext`fneg1pos10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Beta]negxposy$$); \
$CellContext`f0neg1neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negy$$) 
           1; $CellContext`fneg10neg1$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negz$$) (
            1 + $CellContext`\[CapitalDelta]\[Beta]negx$$) 
           1; $CellContext`fneg1neg10$$ = (Sqrt[2]/$CellContext`\[Beta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Beta]negynegx$$); \
$CellContext`fpos1pos1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Gamma]posxposy$$); \
$CellContext`fpos1pos3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$); \
$CellContext`fpos3pos1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$); \
$CellContext`fpos1pos1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]posxposy$$); \
$CellContext`fpos1neg3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$); \
$CellContext`fneg3pos1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$); \
$CellContext`fpos1neg1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$); \
$CellContext`fpos1neg3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]posxneg3y$$); \
$CellContext`fneg1pos1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]negxposy$$); \
$CellContext`fneg1neg3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$); \
$CellContext`fneg3pos1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xposy$$); \
$CellContext`fneg3neg1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$); \
$CellContext`fpos1neg1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Gamma]posxnegy$$); \
$CellContext`fpos1pos3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]posxpos3y$$); \
$CellContext`fneg1pos1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Gamma]negxposy$$); \
$CellContext`fneg1pos3pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$); \
$CellContext`fpos3pos1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xposy$$); \
$CellContext`fpos3neg1pos1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$); \
$CellContext`fneg1neg1pos3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$); \
$CellContext`fneg1pos3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]negxpos3y$$); \
$CellContext`fpos3neg1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]pos3xnegy$$); \
$CellContext`fneg1neg1neg3$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]3z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]negxnegy$$); \
$CellContext`fneg1neg3neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]negxneg3y$$); \
$CellContext`fneg3neg1neg1$$ = (Sqrt[11]/$CellContext`\[Gamma]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Gamma]neg3xnegy$$); \
$CellContext`fpos1pos1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Delta]posxposy$$); \
$CellContext`fpos1pos5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$); \
$CellContext`fpos5pos1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$); \
$CellContext`fpos1pos1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]posxposy$$); \
$CellContext`fpos1neg5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]posxneg5y$$); \
$CellContext`fneg5pos1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg5xposy$$); \
$CellContext`fpos1neg1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]posxnegy$$); \
$CellContext`fpos1neg5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]posxneg5y$$); \
$CellContext`fneg1pos1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]negxposy$$); \
$CellContext`fneg1neg5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$); \
$CellContext`fneg5pos1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg5xposy$$); \
$CellContext`fneg5neg1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$); \
$CellContext`fpos1neg1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Delta]posxnegy$$); \
$CellContext`fpos1pos5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]posxpos5y$$); \
$CellContext`fneg1pos1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Delta]negxposy$$); \
$CellContext`fneg1pos5pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]negxpos5y$$); \
$CellContext`fpos5pos1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos5xposy$$); \
$CellContext`fpos5neg1pos1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$); \
$CellContext`fneg1neg1pos5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) 
           1 (1 + $CellContext`\[CapitalDelta]\[Delta]negxnegy$$); \
$CellContext`fneg1pos5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]negxpos5y$$); \
$CellContext`fpos5neg1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]pos5xnegy$$); \
$CellContext`fneg1neg1neg5$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]5z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]negxnegy$$); \
$CellContext`fneg1neg5neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]negxneg5y$$); \
$CellContext`fneg5neg1neg1$$ = (Sqrt[27]/$CellContext`\[Delta]1$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg1z$$) (
            1 + $CellContext`\[CapitalDelta]\[Delta]neg5xnegy$$); \
$CellContext`factorList$$ = {$CellContext`f00neg1$$, $CellContext`f00pos1$$, \
$CellContext`fpos100$$, $CellContext`fneg100$$, $CellContext`f0pos10$$, \
$CellContext`f0neg10$$, $CellContext`fpos1pos1pos1$$, \
$CellContext`fneg1pos1pos1$$, $CellContext`fpos1neg1pos1$$, \
$CellContext`fneg1neg1pos1$$, $CellContext`fpos1pos1neg1$$, \
$CellContext`fneg1pos1neg1$$, $CellContext`fpos1neg1neg1$$, \
$CellContext`fneg1neg1neg1$$, $CellContext`f0pos1pos1$$, \
$CellContext`fpos10pos1$$, $CellContext`fpos1pos10$$, \
$CellContext`f0neg1pos1$$, $CellContext`fpos10neg1$$, \
$CellContext`fpos1neg10$$, $CellContext`f0pos1neg1$$, \
$CellContext`fneg10pos1$$, $CellContext`fneg1pos10$$, \
$CellContext`f0neg1neg1$$, $CellContext`fneg10neg1$$, \
$CellContext`fneg1neg10$$, $CellContext`fpos1pos1pos3$$, \
$CellContext`fpos1pos3pos1$$, $CellContext`fpos3pos1pos1$$, \
$CellContext`fpos1pos1neg3$$, $CellContext`fpos1neg3pos1$$, \
$CellContext`fneg3pos1pos1$$, $CellContext`fpos1neg1neg3$$, \
$CellContext`fpos1neg3neg1$$, $CellContext`fneg1pos1neg3$$, \
$CellContext`fneg1neg3pos1$$, $CellContext`fneg3pos1neg1$$, \
$CellContext`fneg3neg1pos1$$, $CellContext`fpos1neg1pos3$$, \
$CellContext`fpos1pos3neg1$$, $CellContext`fneg1pos1pos3$$, \
$CellContext`fneg1pos3pos1$$, $CellContext`fpos3pos1neg1$$, \
$CellContext`fpos3neg1pos1$$, $CellContext`fneg1neg1pos3$$, \
$CellContext`fneg1pos3neg1$$, $CellContext`fpos3neg1neg1$$, \
$CellContext`fneg1neg1neg3$$, $CellContext`fneg1neg3neg1$$, \
$CellContext`fneg3neg1neg1$$, $CellContext`fpos1pos1pos5$$, \
$CellContext`fpos1pos5pos1$$, $CellContext`fpos5pos1pos1$$, \
$CellContext`fpos1pos1neg5$$, $CellContext`fpos1neg5pos1$$, \
$CellContext`fneg5pos1pos1$$, $CellContext`fpos1neg1neg5$$, \
$CellContext`fpos1neg5neg1$$, $CellContext`fneg1pos1neg5$$, \
$CellContext`fneg1neg5pos1$$, $CellContext`fneg5pos1neg1$$, \
$CellContext`fneg5neg1pos1$$, $CellContext`fpos1neg1pos5$$, \
$CellContext`fpos1pos5neg1$$, $CellContext`fneg1pos1pos5$$, \
$CellContext`fneg1pos5pos1$$, $CellContext`fpos5pos1neg1$$, \
$CellContext`fpos5neg1pos1$$, $CellContext`fneg1neg1pos5$$, \
$CellContext`fneg1pos5neg1$$, $CellContext`fpos5neg1neg1$$, \
$CellContext`fneg1neg1neg5$$, $CellContext`fneg1neg5neg1$$, \
$CellContext`fneg5neg1neg1$$}; 
         Null, {$CellContext`f00neg1$$, $CellContext`f00pos1$$, \
$CellContext`fpos100$$, $CellContext`fneg100$$, $CellContext`f0pos10$$, \
$CellContext`f0neg10$$, $CellContext`fpos1pos1pos1$$, \
$CellContext`fneg1pos1pos1$$, $CellContext`fpos1neg1pos1$$, \
$CellContext`fneg1neg1pos1$$, $CellContext`fpos1pos1neg1$$, \
$CellContext`fneg1pos1neg1$$, $CellContext`fpos1neg1neg1$$, \
$CellContext`fneg1neg1neg1$$, $CellContext`f0pos1pos1$$, \
$CellContext`fpos10pos1$$, $CellContext`fpos1pos10$$, \
$CellContext`f0neg1pos1$$, $CellContext`fpos10neg1$$, \
$CellContext`fpos1neg10$$, $CellContext`f0pos1neg1$$, \
$CellContext`fneg10pos1$$, $CellContext`fneg1pos10$$, \
$CellContext`f0neg1neg1$$, $CellContext`fneg10neg1$$, \
$CellContext`fneg1neg10$$, $CellContext`fpos1pos1pos3$$, \
$CellContext`fpos1pos3pos1$$, $CellContext`fpos3pos1pos1$$, \
$CellContext`fpos1pos1neg3$$, $CellContext`fpos1neg3pos1$$, \
$CellContext`fneg3pos1pos1$$, $CellContext`fpos1neg1neg3$$, \
$CellContext`fpos1neg3neg1$$, $CellContext`fneg1pos1neg3$$, \
$CellContext`fneg1neg3pos1$$, $CellContext`fneg3pos1neg1$$, \
$CellContext`fneg3neg1pos1$$, $CellContext`fpos1neg1pos3$$, \
$CellContext`fpos1pos3neg1$$, $CellContext`fneg1pos1pos3$$, \
$CellContext`fneg1pos3pos1$$, $CellContext`fpos3pos1neg1$$, \
$CellContext`fpos3neg1pos1$$, $CellContext`fneg1neg1pos3$$, \
$CellContext`fneg1pos3neg1$$, $CellContext`fpos3neg1neg1$$, \
$CellContext`fneg1neg1neg3$$, $CellContext`fneg1neg3neg1$$, \
$CellContext`fneg3neg1neg1$$, $CellContext`fpos1pos1pos5$$, \
$CellContext`fpos1pos5pos1$$, $CellContext`fpos5pos1pos1$$, \
$CellContext`fpos1pos1neg5$$, $CellContext`fpos1neg5pos1$$, \
$CellContext`fneg5pos1pos1$$, $CellContext`fpos1neg1neg5$$, \
$CellContext`fpos1neg5neg1$$, $CellContext`fneg1pos1neg5$$, \
$CellContext`fneg1neg5pos1$$, $CellContext`fneg5pos1neg1$$, \
$CellContext`fneg5neg1pos1$$, $CellContext`fpos1neg1pos5$$, \
$CellContext`fpos1pos5neg1$$, $CellContext`fneg1pos1pos5$$, \
$CellContext`fneg1pos5pos1$$, $CellContext`fpos5pos1neg1$$, \
$CellContext`fpos5neg1pos1$$, $CellContext`fneg1neg1pos5$$, \
$CellContext`fneg1pos5neg1$$, $CellContext`fpos5neg1neg1$$, \
$CellContext`fneg1neg1neg5$$, $CellContext`fneg1neg5neg1$$, \
$CellContext`fneg5neg1neg1$$} = $CellContext`factorList$$; 
         Null]; $CellContext`timePolygon2D$$ = {}; \
$CellContext`timePolygon3D$$ = {}; 
       If[$CellContext`constantVelocity$$, $CellContext`V100$$ = \
$CellContext`constantVelocityValue$$ 10^(-3), 
         Quiet[$CellContext`V100$$ = 
          NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
              If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]}]/
           If[$CellContext`t$$ == 0, 0.0001, $CellContext`t$$]]]; 
       Quiet[$CellContext`L$$ = $CellContext`l0$$/(2 $CellContext`V100$$)]; 
       Quiet[$CellContext`velocityPlot$$ = 
          Plot[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 
            10^(-3), {$CellContext`x, 0, $CellContext`t$$}, 
            AxesLabel -> {"time (hr)", "Growth Velocity (mm/hr)"}]; 
         Null]; $CellContext`timeStepLines3D$$ = {}; $CellContext`pts$$ = \
$CellContext`pts1[$CellContext`infty$$, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$]; $CellContext`p$$ = \
$CellContext`polyhedron[$CellContext`allNormals$$, $CellContext`pts$$]; \
$CellContext`vertices$$ = $CellContext`p$$[
         "vertices"]; $CellContext`faces$$ = $CellContext`p$$[
         "faces"]; $CellContext`v$$ = 
        Length[$CellContext`vertices$$]; $CellContext`f$$ = Count[
          $CellContext`p$$["faces"], 
          Except[{}]]; $CellContext`e$$ = $CellContext`v$$ + $CellContext`f$$ - 
         2; $CellContext`downP$$ = \
$CellContext`polyhedron[$CellContext`allNormals$$, 
          Map[$CellContext`param1[#, 
             $CellContext`d[#], $CellContext`infty$$, $CellContext`L$$, \
$CellContext`t$$] #& , $CellContext`allNormals$$]]; \
$CellContext`calcVertices$$ = $CellContext`downP$$[
         "vertices"]; $CellContext`calcFaces$$ = $CellContext`downP$$[
         "faces"]; $CellContext`rotatedVertices2D$$ = 
        Map[RotationTransform[
          45 Degree][#]& , (1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`vertices$$, All, 
            Span[1, 2]]]; $CellContext`rotatedVertices3D$$ = 
        Map[RotationTransform[
          45 Degree, {0, 0, 1}][#]& , (1/(
           2 $CellContext`L$$)) $CellContext`l0$$ $CellContext`vertices$$]; \
$CellContext`CalcrotatedVertices2D$$ = 
        Map[RotationTransform[
          45 Degree][#]& , (1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`calcVertices$$, All, 
            Span[1, 2]]]; $CellContext`CalcrotatedVertices3D$$ = 
        Map[RotationTransform[
          45 Degree, {0, 0, 1}][#]& , (1/(
           2 $CellContext`L$$)) $CellContext`l0$$ \
$CellContext`calcVertices$$]; $CellContext`polyGraphics$$ = Graphics3D[{
           Specularity[0.5, 6], 
           GraphicsComplex[If[
              Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
              1, $CellContext`l0$$] 
            If[$CellContext`infty$$, 1, 1/(
              2 $CellContext`L$$)] $CellContext`vertices$$, {
             Opacity[
              Dynamic[$CellContext`opacity$$]], 
             Table[
              If[Part[$CellContext`faces$$, $CellContext`i] != {}, {
                Block[{$CellContext`k = Total[
                    Map[Abs, 
                    Part[$CellContext`allNormals$$, $CellContext`i]]]}, 
                 Switch[
                  Part[
                   Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
                  Darker[
                   GrayLevel[0.7], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 1]]]], 2, 
                  Darker[
                   Lighter[Magenta, 0.4], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 2]]]], 3, 
                  Darker[
                   Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 3]]]], 5, 
                  Darker[Blue, 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 5]]]], 7, 
                  Darker[Yellow, 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 7]]]]]], {
                 EdgeForm[
                  Thickness[Medium]], 
                 Polygon[
                  
                  Part[$CellContext`faces$$, $CellContext`i]]}}, {}], \
{$CellContext`i, 1, 
               Length[$CellContext`allNormals$$]}], 
             PointSize[0.015], Red, 
             Opacity[1], 
             Dynamic[
              If[$CellContext`hideVertices$$, {}, 
               Point[
                Range[$CellContext`v$$]]]]}]}, Axes -> True, 
          AxesLabel -> {"x", "y", "z"}]; $CellContext`volume$$ = Volume[
          
          ConvexHullRegion[(1/(
            2 $CellContext`L$$)) $CellContext`l0$$ $CellContext`vertices$$]]; \
$CellContext`maxHeight$$ = 
        Max[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
          Part[$CellContext`vertices$$, All, 3]]; $CellContext`largestwidth$$ = 
        Max[
           Part[$CellContext`rotatedVertices2D$$, All, 1]] - Min[
          
          Part[$CellContext`rotatedVertices2D$$, All, 
           1]]; $CellContext`largestlength$$ = Max[
           Part[$CellContext`rotatedVertices2D$$, All, 2]] - Min[
          
          Part[$CellContext`rotatedVertices2D$$, All, 
           2]]; $CellContext`bottomWidth$$ = 
        If[Part[$CellContext`faces$$, 1] != {}, Max[
            Part[
             Map[
             RotationTransform[
              45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
                Part[$CellContext`vertices$$, 
                 Part[$CellContext`faces$$, 1]], All, 
                Span[1, 2]]], All, 1]] - Min[
           Part[
            Map[
            RotationTransform[
             45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
               Part[$CellContext`vertices$$, 
                Part[$CellContext`faces$$, 1]], All, 
               Span[1, 2]]], All, 1]], 0]; $CellContext`bottomLength$$ = 
        If[Part[$CellContext`faces$$, 1] != {}, Max[
            Part[
             Map[
             RotationTransform[
              45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
                Part[$CellContext`vertices$$, 
                 Part[$CellContext`faces$$, 1]], All, 
                Span[1, 2]]], All, 2]] - Min[
           Part[
            Map[
            RotationTransform[
             45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
               Part[$CellContext`vertices$$, 
                Part[$CellContext`faces$$, 1]], All, 
               Span[1, 2]]], All, 2]], 0]; $CellContext`topWidth$$ = 
        If[Part[$CellContext`faces$$, 2] != {}, Max[
            Part[
             Map[
             RotationTransform[
              45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
                Part[$CellContext`vertices$$, 
                 Part[$CellContext`faces$$, 2]], All, 
                Span[1, 2]]], All, 1]] - Min[
           Part[
            Map[
            RotationTransform[
             45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
               Part[$CellContext`vertices$$, 
                Part[$CellContext`faces$$, 2]], All, 
               Span[1, 2]]], All, 1]], 0]; $CellContext`topLength$$ = 
        If[Part[$CellContext`faces$$, 2] != {}, Max[
            Part[
             Map[
             RotationTransform[
              45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
                Part[$CellContext`vertices$$, 
                 Part[$CellContext`faces$$, 2]], All, 
                Span[1, 2]]], All, 2]] - Min[
           Part[
            Map[
            RotationTransform[
             45 Degree][#]& , ($CellContext`l0$$/(2 $CellContext`L$$)) Part[
               Part[$CellContext`vertices$$, 
                Part[$CellContext`faces$$, 2]], All, 
               Span[1, 2]]], All, 2]], 
          0]; $CellContext`averageGrowthFactors$$ = {{
          "\!\(\*SubscriptBox[\(f\), \((001)\)]\)", $CellContext`f00pos1$$}, {
          "\!\(\*SubscriptBox[\(f\), \({11} 5\)]\)", \
($CellContext`fpos1pos1pos5$$ + $CellContext`fpos1neg1pos5$$ + \
$CellContext`fneg1pos1pos5$$ + $CellContext`fneg1neg1pos5$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({11} 3\)]\)", \
($CellContext`fpos1pos1pos3$$ + $CellContext`fpos1neg1pos3$$ + \
$CellContext`fneg1pos1pos3$$ + $CellContext`fneg1neg1pos3$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({10} 1\)]\)", \
($CellContext`fpos10pos1$$ + $CellContext`fneg10pos1$$ + \
$CellContext`f0pos1pos1$$ + $CellContext`f0neg1pos1$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({11} 1\)]\)", \
($CellContext`fpos1pos1pos1$$ + $CellContext`fpos1neg1pos1$$ + \
$CellContext`fneg1pos1pos1$$ + $CellContext`fneg1neg1pos1$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({31} 1\)]\)", \
($CellContext`fpos3pos1pos1$$ + $CellContext`fpos3neg1pos1$$ + \
$CellContext`fneg3pos1pos1$$ + $CellContext`fneg3neg1pos1$$ + \
$CellContext`fpos1pos3pos1$$ + $CellContext`fpos1neg3pos1$$ + \
$CellContext`fneg1pos3pos1$$ + $CellContext`fneg1neg3pos1$$)/8}, {
          "\!\(\*SubscriptBox[\(f\), \({51} 1\)]\)", \
($CellContext`fpos5pos1pos1$$ + $CellContext`fpos5neg1pos1$$ + \
$CellContext`fneg5pos1pos1$$ + $CellContext`fneg5neg1pos1$$ + \
$CellContext`fpos1pos5pos1$$ + $CellContext`fpos1neg5pos1$$ + \
$CellContext`fneg1pos5pos1$$ + $CellContext`fneg1neg5pos1$$)/8}, {
          "\!\(\*SubscriptBox[\(f\), \({10} 0\)]\)", ($CellContext`fpos100$$ + \
$CellContext`fneg100$$ + $CellContext`f0pos10$$ + $CellContext`f0neg10$$)/
           4}, {"\!\(\*SubscriptBox[\(f\), \({11} 0\)]\)", \
($CellContext`fpos1pos10$$ + $CellContext`fpos1neg10$$ + \
$CellContext`fneg1pos10$$ + $CellContext`fneg1neg10$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({51} \*OverscriptBox[\(1\), \
\(_\)]\)]\)", ($CellContext`fpos5pos1neg1$$ + $CellContext`fpos5neg1neg1$$ + \
$CellContext`fneg5pos1neg1$$ + $CellContext`fneg5neg1neg1$$ + \
$CellContext`fpos1pos5neg1$$ + $CellContext`fpos1neg5neg1$$ + \
$CellContext`fneg1pos5neg1$$ + $CellContext`fneg1neg5neg1$$)/8}, {
          "\!\(\*SubscriptBox[\(f\), \({31} \*OverscriptBox[\(1\), \
\(_\)]\)]\)", ($CellContext`fpos3pos1neg1$$ + $CellContext`fpos3neg1neg1$$ + \
$CellContext`fneg3pos1neg1$$ + $CellContext`fneg3neg1neg1$$ + \
$CellContext`fpos1pos3neg1$$ + $CellContext`fpos1neg3neg1$$ + \
$CellContext`fneg1pos3neg1$$ + $CellContext`fneg1neg3neg1$$)/8}, {
          "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(1\), \
\(_\)]\)]\)", ($CellContext`fpos1pos1neg1$$ + $CellContext`fpos1neg1neg1$$ + \
$CellContext`fneg1pos1neg1$$ + $CellContext`fneg1neg1neg1$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({10} \*OverscriptBox[\(1\), \
\(_\)]\)]\)", ($CellContext`fpos10neg1$$ + $CellContext`fneg10neg1$$ + \
$CellContext`f0pos1neg1$$ + $CellContext`f0neg1neg1$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(3\), \
\(_\)]\)]\)", ($CellContext`fpos1pos1neg3$$ + $CellContext`fpos1neg1neg3$$ + \
$CellContext`fneg1pos1neg3$$ + $CellContext`fneg1neg1neg3$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \({11} \*OverscriptBox[\(5\), \
\(_\)]\)]\)", ($CellContext`fpos1pos1neg5$$ + $CellContext`fpos1neg1neg5$$ + \
$CellContext`fneg1pos1neg5$$ + $CellContext`fneg1neg1neg5$$)/4}, {
          "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\)", $CellContext`f00neg1$$}}; $CellContext`faceArea$$ = {}; 
       For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`faces$$], 
         Increment[$CellContext`i], 
         If[True, 
          AppendTo[$CellContext`faceArea$$, 
           ToString[
            If[Part[$CellContext`faces$$, $CellContext`i] == {}, 0, 
             ToString[
              Area[
               
               Polygon[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
                Part[$CellContext`vertices$$, 
                  
                  Part[$CellContext`faces$$, $CellContext`i]]]]]]]]]]; \
$CellContext`velocities$$ = {{
          "\!\(\*SubscriptBox[\(f\), \((00 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = (1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \(-z\)]\)) ", 
           ToString[$CellContext`f00neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((001)\)]\) = (1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\), \(+z\)]\))  ", 
           ToString[$CellContext`f00pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((100)\)]\) = (1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} + x\)]\)) ", 
           ToString[$CellContext`fpos100$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
00)\)]\) = (1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} - x\)]\))  ", 
           ToString[$CellContext`fneg100$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((010)\)]\) = (1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} + y\)]\)) ", 
           ToString[$CellContext`f0pos10$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((0 \*OverscriptBox[\(1\), \(_\)] 0)\)]\
\) = (1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\), \({100} - y\)]\))  ", 
           ToString[$CellContext`f0neg10$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \((\(+x\), \(+y\))\)]\)) ", 
           ToString[$CellContext`fpos1pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1\\ \
1)\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 1)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1\\ 1 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos1pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \
\(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \
\(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(3\)], \(\
\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \
\(-z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(+x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(3\)], \(\[Alpha]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Alpha]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Alpha]\), \((\(-x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((0\\ 1\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+y\)]\))  ", 
           ToString[$CellContext`f0pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1\\ 0\\ 1)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\
\[Beta]\), \(+x\)]\))  ", 
           ToString[$CellContext`fpos10pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1\\ 1\\ 0)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Beta]\), \((\(+x\), \(+y\))\)]\)) ", 
           ToString[$CellContext`fpos1pos10$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \(_\)] \
1)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-y\)]\))  ", 
           ToString[$CellContext`f0neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1\\ 0 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+x\)]\))  ", 
           ToString[$CellContext`fpos10neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 0)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\
\(\[CapitalDelta]\[Beta]\), \((\(+x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg10$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((0\\ 1 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+y\)]\))  ", 
           ToString[$CellContext`f0pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 0\\ \
1)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(+z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-x\)]\))  ", 
           ToString[$CellContext`fneg10pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1\\ \
0)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\[Beta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \((\(-x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos10$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((0\\ \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\
\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-y\)]\))  ", 
           ToString[$CellContext`f0neg1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 0\\ \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \(\
\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-z\)]\))(1 \
+ \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \(-x\)]\))  ", 
           ToString[$CellContext`fneg10neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)]\\ 0)\)]\) = \!\(\*FractionBox[SqrtBox[\(2\)], \
\(\[Beta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Beta]\), \((\(-x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg10$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((113)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos1pos1pos3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((131)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+3\) y)\)]\))  ", 
           ToString[$CellContext`fpos1pos3pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((311)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos3pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(3\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos1pos1neg3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \(_\)] 1)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-3\) y)\)]\))  ", 
           ToString[$CellContext`fpos1neg3pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
11)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(+y\))\)]\))  ", 
           ToString[$CellContext`fneg3pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg1neg3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-3\) \
y)\)]\))  ", 
           ToString[$CellContext`fpos1neg3neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(3\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-3\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \
\(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos1neg3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-3\) \
y)\)]\))  ", 
           ToString[$CellContext`fneg1neg3pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(+y\
\))\)]\))  ", 
           ToString[$CellContext`fneg3pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(-y\
\))\)]\))  ", 
           ToString[$CellContext`fneg3neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 3)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg1pos3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((13 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+x\), \(+3\) y)\)]\))  ", 
           ToString[$CellContext`fpos1pos3neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
13)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos1pos3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
31)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+3\) y)\)]\))  ", 
           ToString[$CellContext`fneg1pos3pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((31 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos3pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \(_\)] 1)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(-y\))\)]\))  ", 
           ToString[$CellContext`fpos3neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 3)\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg1pos3$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 3 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(-x\), \(+3\) \
y)\)]\))  ", 
           ToString[$CellContext`fneg1pos3neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((3 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(11\)], \(\
\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Gamma]\), \((\(+3\) x, \(-y\
\))\)]\))  ", 
           ToString[$CellContext`fpos3neg1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(3\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-3\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg1neg3$$]}, {
          
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(3\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-x\), \(-3\) y)\)]\))  ", 
           ToString[$CellContext`fneg1neg3neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(3\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(11\)], \(\[Gamma]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Gamma]\), \((\(-3\) x, \(-y\))\)]\))  ", 
           ToString[$CellContext`fneg3neg1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((115)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos1pos1pos5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((151)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+x\), \(+5\) y)\)]\))  ", 
           ToString[$CellContext`fpos1pos5pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((511)\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos5pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((11 \*OverscriptBox[\(5\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos1pos1neg5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \(_\)] 1)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-5\) y)\)]\))  ", 
           ToString[$CellContext`fpos1neg5pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
11)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(+y\))\)]\))  ", 
           ToString[$CellContext`fneg5pos1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg1neg5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-5\) \
y)\)]\))  ", 
           ToString[$CellContext`fpos1neg5neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 1 \
\*OverscriptBox[\(5\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-5\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \
\(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos1neg5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(-5\) \
y)\)]\))  ", 
           ToString[$CellContext`fneg1neg5pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] 1 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(+y\
\))\)]\))  ", 
           ToString[$CellContext`fneg5pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 1)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(-y\
\))\)]\))  ", 
           ToString[$CellContext`fneg5neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((1 \*OverscriptBox[\(1\), \(_\)] 5)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fpos1neg1pos5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((15 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+x\), \(+5\) y)\)]\))  ", 
           ToString[$CellContext`fpos1pos5neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
15)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(+y\))\)]\))  ", 
           ToString[$CellContext`fneg1pos1pos5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
51)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(+5\) y)\)]\))  ", 
           ToString[$CellContext`fneg1pos5pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((51 \*OverscriptBox[\(1\), \
\(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(+y\))\)]\))  ", 
           ToString[$CellContext`fpos5pos1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \(_\)] 1)\)]\
\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(+1\) z\)]\))(1 + \
\!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(-y\))\)]\))  ", 
           ToString[$CellContext`fpos5neg1pos1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] 5)\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \
\(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg1pos5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] 5 \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(-x\), \(+5\) \
y)\)]\))  ", 
           ToString[$CellContext`fneg1pos5neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((5 \*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)])\)]\) = \!\(\*FractionBox[SqrtBox[\(27\)], \(\
\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \(\(-1\) \
z\)]\))(1 + \!\(\*SubscriptBox[\(\[CapitalDelta]\[Delta]\), \((\(+5\) x, \(-y\
\))\)]\))  ", 
           ToString[$CellContext`fpos5neg1neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(5\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-5\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(-y\))\)]\))  ", 
           ToString[$CellContext`fneg1neg1neg5$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(1\), \(_\)] \
\*OverscriptBox[\(5\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-x\), \(-5\) y)\)]\))  ", 
           ToString[$CellContext`fneg1neg5neg1$$]}, {
          "\!\(\*SubscriptBox[\(f\), \((\*OverscriptBox[\(5\), \(_\)] \
\*OverscriptBox[\(1\), \(_\)] \*OverscriptBox[\(1\), \(_\)])\)]\) = \
\!\(\*FractionBox[SqrtBox[\(27\)], \(\[Delta]\)]\)(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \(\(-1\) z\)]\))(1 + \!\(\*SubscriptBox[\(\
\[CapitalDelta]\[Delta]\), \((\(-5\) x, \(-y\))\)]\))  ", 
           
           ToString[$CellContext`fneg5neg1neg1$$]}}; \
$CellContext`cutFactors$$ = {{
          "", "\!\(\*SubscriptBox[\(L\), \(max\)]\)", 
           "\!\(\*SubscriptBox[\(H\), \(Max\)]\)", "", 
           "\!\(\*SubscriptBox[\(L\), \(max\)]\)", 
           "\!\(\*SubscriptBox[\(H\), \(Max\)]\)", "", 
           "\!\(\*SubscriptBox[\(L\), \({111}\)]\)", 
           "\!\(\*SubscriptBox[\(L\), \({11 \*OverscriptBox[\(1\), \(_\)]}\)]\
\)"}, {"(1 0 0)", 
           
           Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
            Part[$CellContext`vertices$$, All, 1]], 
           Max[
            Part[
             
             Select[($CellContext`l0$$/(
               2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 1] == 
              Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
                Part[$CellContext`vertices$$, All, 1]]& ], All, 3]], 
           "(1 1 0)", 
           Max[
            Part[$CellContext`rotatedVertices2D$$, All, 2]], 
           Mean[
            Part[
             Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Max[
                Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 3]], 
           "(1 1 1)", 
           If[Part[$CellContext`faces$$, 7] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 7]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`vertices$$, 
               Flatten[
                Position[$CellContext`rotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`rotatedVertices3D$$, And[
                   Part[#, 2] == Max[
                    Part[$CellContext`rotatedVertices2D$$, All, 2]], 
                    Part[#, 3] == Max[
                    Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Max[
                    Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 
                    3]]]& ], 1]]]]]], 
           If[Part[$CellContext`calcFaces$$, 11] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 11]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`calcVertices$$, 
               Flatten[
                Position[$CellContext`CalcrotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`CalcrotatedVertices3D$$, And[
                   Part[#, 2] == Max[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 2]], 
                    Part[#, 3] == Min[
                    Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 2] == 
                    Max[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 2]]& ], 
                    All, 3]]]& ], 1]]]]]]}, {
          "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 0 0)", 
           Abs[
            
            Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
             Part[$CellContext`vertices$$, All, 1]]], 
           Max[
            Part[
             
             Select[($CellContext`l0$$/(
               2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 1] == 
              Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
                Part[$CellContext`vertices$$, All, 1]]& ], All, 3]], 
           "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 1 0)", 
           Abs[
            Min[
             Part[$CellContext`rotatedVertices2D$$, All, 1]]], 
           Mean[
            Part[
             Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Min[
                Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 3]], 
           "(\!\(\*OverscriptBox[\(1\), \(_\)]\) 1 1)", 
           If[Part[$CellContext`faces$$, 8] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 8]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`vertices$$, 
               Flatten[
                Position[$CellContext`rotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`rotatedVertices3D$$, And[
                   Part[#, 1] == Min[
                    Part[$CellContext`rotatedVertices2D$$, All, 1]], 
                    Part[#, 3] == Max[
                    Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Min[
                    Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 
                    3]]]& ], 1]]]]]], 
           If[Part[$CellContext`calcFaces$$, 12] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 12]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`calcVertices$$, 
               Flatten[
                Position[$CellContext`CalcrotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`CalcrotatedVertices3D$$, And[
                   Part[#, 1] == Min[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 1]], 
                    Part[#, 3] == Min[
                    Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 1] == 
                    Min[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 1]]& ], 
                    All, 3]]]& ], 1]]]]]]}, {"(0 1 0)", 
           
           Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
            Part[$CellContext`vertices$$, All, 2]], 
           Max[
            Part[
             
             Select[($CellContext`l0$$/(
               2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 2] == 
              Max[($CellContext`l0$$/(2 $CellContext`L$$)) 
                Part[$CellContext`vertices$$, All, 2]]& ], All, 3]], 
           "(1 \!\(\*OverscriptBox[\(1\), \(_\)]\) 0)", 
           Max[
            Part[$CellContext`rotatedVertices2D$$, All, 1]], 
           Mean[
            Part[
             Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Max[
                Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 3]], 
           "(1 \!\(\*OverscriptBox[\(1\), \(_\)]\) 1)", 
           If[Part[$CellContext`faces$$, 9] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 9]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`vertices$$, 
               Flatten[
                Position[$CellContext`rotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`rotatedVertices3D$$, And[
                   Part[#, 1] == Max[
                    Part[$CellContext`rotatedVertices2D$$, All, 1]], 
                    Part[#, 3] == Max[
                    Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 1] == Max[
                    Part[$CellContext`rotatedVertices2D$$, All, 1]]& ], All, 
                    3]]]& ], 1]]]]]], 
           If[Part[$CellContext`calcFaces$$, 13] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 13]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`calcVertices$$, 
               Flatten[
                Position[$CellContext`CalcrotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`CalcrotatedVertices3D$$, And[
                   Part[#, 1] == Max[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 1]], 
                    Part[#, 3] == Min[
                    Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 1] == 
                    Max[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 1]]& ], 
                    All, 3]]]& ], 1]]]]]]}, {
          "(0 \!\(\*OverscriptBox[\(1\), \(_\)]\) 0)", 
           Abs[
            
            Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
             Part[$CellContext`vertices$$, All, 2]]], 
           Max[
            Part[
             
             Select[($CellContext`l0$$/(
               2 $CellContext`L$$)) $CellContext`vertices$$, Part[#, 2] == 
              Min[($CellContext`l0$$/(2 $CellContext`L$$)) 
                Part[$CellContext`vertices$$, All, 2]]& ], All, 3]], 
           "(\!\(\*OverscriptBox[\(1\), \(_\)]\) \!\(\*OverscriptBox[\(1\), \
\(_\)]\) 0)", 
           Abs[
            Min[
             Part[$CellContext`rotatedVertices2D$$, All, 2]]], 
           Mean[
            Part[
             Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Min[
                Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 3]], 
           "(\!\(\*OverscriptBox[\(1\), \(_\)]\) \!\(\*OverscriptBox[\(1\), \
\(_\)]\) 1)", 
           If[Part[$CellContext`faces$$, 10] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 10]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`vertices$$, 
               Flatten[
                Position[$CellContext`rotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`rotatedVertices3D$$, And[
                   Part[#, 2] == Min[
                    Part[$CellContext`rotatedVertices2D$$, All, 2]], 
                    Part[#, 3] == Max[
                    Part[
                    Select[$CellContext`rotatedVertices3D$$, Part[#, 2] == Min[
                    Part[$CellContext`rotatedVertices2D$$, All, 2]]& ], All, 
                    3]]]& ], 1]]]]]], 
           If[Part[$CellContext`calcFaces$$, 14] != {}, 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`pts$$, 14]], 
            
            Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ 
             Part[$CellContext`calcVertices$$, 
               Flatten[
                Position[$CellContext`CalcrotatedVertices3D$$, 
                 Part[
                  
                  Select[$CellContext`CalcrotatedVertices3D$$, And[
                   Part[#, 2] == Min[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 2]], 
                    Part[#, 3] == Min[
                    Part[
                    
                    Select[$CellContext`CalcrotatedVertices3D$$, Part[#, 2] == 
                    Min[
                    Part[$CellContext`CalcrotatedVertices2D$$, All, 2]]& ], 
                    All, 3]]]& ], 1]]]]]]}}; $CellContext`type$$ = StringJoin[
          Map["(" <> StringJoin[
             Map[ToString, #]] <> ")"& , 
           DeleteDuplicates[
            Map[Sort[#, Greater]& , 
             Map[Abs, 
              Map[Part[
                Nearest[$CellContext`normals$$, #], 1]& , 
               Extract[$CellContext`allNormals$$, 
                Rest[
                 Position[$CellContext`faces$$, 
                  Except[{}], 1]]]]]]]]]; $CellContext`info$$ = 
        ToString[$CellContext`f$$] <> " Faces, " <> 
         ToString[$CellContext`e$$] <> " Edges, " <> 
         ToString[$CellContext`v$$] <> " Vertices."; 
       Null]; $CellContext`plateCuts$$ = 
     Hold[$CellContext`numPlates$$ = 
        0; $CellContext`plateCutsGraphics$$ = {{}, {}, {}}; \
$CellContext`plateCutsDistances$$ = Rest[
          
          Range[$CellContext`beginningCutPosition$$, \
$CellContext`endCutPosition$$, $CellContext`plateThickness$$ + \
$CellContext`cutLoss$$]]; $CellContext`normals1$$ = 
        Append[$CellContext`allNormals$$, $CellContext`n$$]; 
       Do[$CellContext`cutPosition$$ = 
          Part[$CellContext`plateCutsDistances$$, $CellContext`j]; \
$CellContext`timePolygon2D$$ = {}; If[
           And[
           Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
            Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
           Normalize[{0, 0, 1} - 
             Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
           If[
            Or[Abs[
               Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
             0], $CellContext`projX$$ = 
             Normalize[{0, 1, 0} - 
               Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
            Null, $CellContext`projX$$ = 
             Normalize[{1, 0, 0} - 
               Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
         If[Total[
             Cross[$CellContext`n$$, $CellContext`projX$$]] < 
           0, $CellContext`projY$$ = 
           Cross[$CellContext`projX$$, $CellContext`n$$], \
$CellContext`projY$$ = 
           Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
          Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
            ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
          1; $CellContext`timeStepLines$$ = Append[
            
            Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
         If[$CellContext`constantVelocity$$, 
           Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`polygons$$ = {}; $CellContext`poly$["vertices"] = {
               0}; $CellContext`i$ = 
              Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = \
{}; $CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
               
               And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
                1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                  $CellContext`pts1[False, $CellContext`L$$, 
                   
                   Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                  If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
               AppendTo[$CellContext`polygons2D$$, 
                 ($CellContext`polygon3D[
                  Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                   Part[
                    #["vertices"], 
                    #["face"]]], 
                  #["colors"]]& )[$CellContext`poly$]]; 
               AppendTo[$CellContext`polygons$$, 
                 ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  #["colors"]]& )[$CellContext`poly$]]; 
               Decrement[$CellContext`i$]; Null]; 
             If[Last[$CellContext`polygons$$] == {}, 
               AppendTo[$CellContext`timeStepLines$$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                  2]]; $CellContext`timeStepLines$$ = Sort[
                  
                  Select[$CellContext`timeStepLines$$, # >= 
                   Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
               Null]; Null]; 
           Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
              Length[$CellContext`timeStepLines$$] - 
               1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; While[
               
               And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
                1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                  $CellContext`pts1[False, $CellContext`L$$, 
                   
                   Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                  If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
               AppendTo[$CellContext`timeStepLines2D$$, 
                 ($CellContext`polygon[
                  Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                   Part[
                    #["vertices"], 
                    #["face"]]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               AppendTo[$CellContext`timeStepLines3D$$, 
                 ($CellContext`polygon[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               Decrement[$CellContext`i$]; 
               Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
           Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
              Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = \
{}; $CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
                
                And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
                 1], Quiet[$CellContext`tempVelocity$ = 
                  NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                   Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                  2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                   $CellContext`pts1[False, $CellContext`tempL$, 
                    
                    Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                   If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 
                   2 $CellContext`tempL$]; AppendTo[$CellContext`polygons2D$$, 
                  ($CellContext`polygon3D[
                   Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                    Part[
                    #["vertices"], 
                    #["face"]]], 
                   #["colors"]]& )[$CellContext`poly$]]; 
                AppendTo[$CellContext`polygons$$, 
                   ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                    #["colors"]]& )[$CellContext`poly$]] 
                 Decrement[$CellContext`i$]; Null] 
              If[Last[$CellContext`polygons$$] == {}, 
                AppendTo[$CellContext`timeStepLines$$, 
                  
                  Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                   2]]; $CellContext`timeStepLines$$ = Sort[
                   
                   Select[$CellContext`timeStepLines$$, # >= 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
                Null]; Null]; 
           Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
              Length[$CellContext`timeStepLines$$] - 1; 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
                Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                 1]]; $CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; While[
               And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1],
                Quiet[$CellContext`tempVelocity$ = 
                 NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$\
$ + $CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
                  Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                 2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                  $CellContext`pts1[False, $CellContext`tempL$, 
                   
                   Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                  If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 
                  2 $CellContext`tempL$]; 
               AppendTo[$CellContext`timeStepLines2D$$, 
                 ($CellContext`polygon[
                  Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                   Part[
                    #["vertices"], 
                    #["face"]]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               AppendTo[$CellContext`timeStepLines3D$$, 
                 ($CellContext`polygon[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               Decrement[$CellContext`i$]; Null]; 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, 1]}]/
                Part[$CellContext`timeStepLines$$, 
                 1]]; $CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]]; 
           Null]; $CellContext`textX$$ = Max[
            Part[
             Part[
              Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
             1]]; $CellContext`textY$$ = Max[
            Part[
             Part[
              Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
             2]]; $CellContext`timePolygonColor$$ = Which[
            Or[Sort[
               Abs[$CellContext`n$$]] == {0, 0, 1}, 
             RegionMember[
              ConvexHullRegion[{{
                 Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 0.}, {
                 Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
                 0.}, {-Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 0.}, {-
                 Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
                 0.}, {
                 Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}, {
                 Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
                 Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}}], Part[
                Part[
                 Last[$CellContext`timeStepLines3D$$], 1], 1] - {
              0.01, 0.01, 0}]], 
            Darker[
             GrayLevel[0.7], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
            Darker[
             Lighter[Magenta, 0.4], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
            Darker[
             Blend[{Yellow, Green}, 0.7], 
             0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
            Polygon[
             Part[
              Last[$CellContext`timeStepLines2D$$], 
              1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
            Polygon[
             Part[
              Last[$CellContext`timeStepLines3D$$], 1]]}; AppendTo[
           Part[$CellContext`plateCutsGraphics$$, 3], {{
             Thickness[
             0.002], $CellContext`polygons$$}, $CellContext`timePolygon3D$$, {
             Thickness[0.005], $CellContext`timeStepLines3D$$}}]; AppendTo[
           Part[$CellContext`plateCutsGraphics$$, 1], 
           Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
              Thickness[0.002], $CellContext`timeStepLines2D$$}, 
             Text["Time of first appearance = " <> ToString[
                NumberForm[
                 If[
                 Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
                  Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
              " hrs\nTime of growth completion = " <> ToString[
                NumberForm[$CellContext`t$$, {10, 2}]] <> 
              " hrs\nTime Intervals = " <> ToString[
                NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
              "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
              ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
              "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
              ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
              "\nCut Plane: " <> StringReplace[
                
                ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
                "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", 
                 "}" -> ")", "," -> " "}] <> "\nPlate Thickness = " <> 
              ToString[$CellContext`plateThickness$$] <> "\nCut Distance " <> 
              ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
               1, $CellContext`textY$$ + 1}]}, Axes -> True, ImageSize -> 500,
             PlotLabel -> 
            "Plate " <> ToString[$CellContext`j + 1] <> " Back Surface ", 
            AxesLabel -> {"(mm)", "(mm)"}]]; 
         Export[$CellContext`saveDirectory$$ <> "Plate " <> 
           ToString[$CellContext`j + 1] <> " Back Surface" <> ".jpeg", 
           Part[
            
            Part[$CellContext`plateCutsGraphics$$, 
             1], $CellContext`j]]; $CellContext`cutPosition$$ = 
          Part[$CellContext`plateCutsDistances$$, $CellContext`j] - \
$CellContext`plateThickness$$; $CellContext`timePolygon2D$$ = {}; If[
           And[
           Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
            Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
           Normalize[{0, 0, 1} - 
             Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
           If[
            Or[Abs[
               Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
             0], $CellContext`projX$$ = 
             Normalize[{0, 1, 0} - 
               Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
            Null, $CellContext`projX$$ = 
             Normalize[{1, 0, 0} - 
               Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
         If[Total[
             Cross[$CellContext`n$$, $CellContext`projX$$]] < 
           0, $CellContext`projY$$ = 
           Cross[$CellContext`projX$$, $CellContext`n$$], \
$CellContext`projY$$ = 
           Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
          Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
            ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
          1; $CellContext`timeStepLines$$ = Append[
            
            Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
         If[$CellContext`constantVelocity$$, 
           Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`polygons$$ = {}; $CellContext`poly$["vertices"] = {
               0}; $CellContext`i$ = 
              Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = \
{}; $CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
               
               And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
                
                1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                  $CellContext`pts1[False, $CellContext`L$$, 
                   
                   Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                  If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
               AppendTo[$CellContext`polygons2D$$, 
                 ($CellContext`polygon3D[
                  Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                   Part[
                    #["vertices"], 
                    #["face"]]], 
                  #["colors"]]& )[$CellContext`poly$]]; 
               AppendTo[$CellContext`polygons$$, 
                 ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  #["colors"]]& )[$CellContext`poly$]]; 
               Decrement[$CellContext`i$]; Null]; 
             If[Last[$CellContext`polygons$$] == {}, 
               AppendTo[$CellContext`timeStepLines$$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                  2]]; $CellContext`timeStepLines$$ = Sort[
                  
                  Select[$CellContext`timeStepLines$$, # >= 
                   Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
               Null]; Null]; 
           Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
              Length[$CellContext`timeStepLines$$] - 
               1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; While[
               
               And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
                
                1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                  $CellContext`pts1[False, $CellContext`L$$, 
                   
                   Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                  If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
               AppendTo[$CellContext`timeStepLines2D$$, 
                 ($CellContext`polygon[
                  Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                   Part[
                    #["vertices"], 
                    #["face"]]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               AppendTo[$CellContext`timeStepLines3D$$, 
                 ($CellContext`polygon[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               Decrement[$CellContext`i$]; 
               Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
           Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
              Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = \
{}; $CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
                
                And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
                 1], Quiet[$CellContext`tempVelocity$ = 
                  NIntegrate[($CellContext`velocityA$$/($CellContext`\
velocityC$$ + $CellContext`x)^$CellContext`velocityB$$) 
                    10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                   Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                  2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                   $CellContext`pts1[False, $CellContext`tempL$, 
                    
                    Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                   If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 
                   2 $CellContext`tempL$]; AppendTo[$CellContext`polygons2D$$, 
                  ($CellContext`polygon3D[
                   Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                    Part[
                    #["vertices"], 
                    #["face"]]], 
                   #["colors"]]& )[$CellContext`poly$]]; 
                AppendTo[$CellContext`polygons$$, 
                   ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                    #["colors"]]& )[$CellContext`poly$]] 
                 Decrement[$CellContext`i$]; Null] 
              If[Last[$CellContext`polygons$$] == {}, 
                AppendTo[$CellContext`timeStepLines$$, 
                  
                  Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                   2]]; $CellContext`timeStepLines$$ = Sort[
                   
                   Select[$CellContext`timeStepLines$$, # >= 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
                Null]; Null]; 
           Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
              Length[$CellContext`timeStepLines$$] - 1; 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
                Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                 1]]; $CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; While[
               And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1],
                Quiet[$CellContext`tempVelocity$ = 
                 NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$\
$ + $CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
                  Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                 2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                  $CellContext`pts1[False, $CellContext`tempL$, 
                   
                   Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                  If[$CellContext`cutPosition$$ == 0, 
                    0.0001, $CellContext`cutPosition$$] 
                  2 $CellContext`tempL$]; 
               AppendTo[$CellContext`timeStepLines2D$$, 
                 ($CellContext`polygon[
                  Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                   Part[
                    #["vertices"], 
                    #["face"]]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               AppendTo[$CellContext`timeStepLines3D$$, 
                 ($CellContext`polygon[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  ConstantArray[0, 
                   Length[
                    #["colors"]]]]& )[$CellContext`poly$]]; 
               Decrement[$CellContext`i$]; Null]; 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, 1]}]/
                Part[$CellContext`timeStepLines$$, 
                 1]]; $CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, 
                  1], $CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]]; 
           Null]; $CellContext`textX$$ = Max[
            Part[
             Part[
              Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
             1]]; $CellContext`textY$$ = Max[
            Part[
             Part[
              Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
             2]]; $CellContext`timePolygonColor$$ = Which[
            Or[Sort[
               Abs[$CellContext`n$$]] == {0, 0, 1}, 
             RegionMember[
              ConvexHullRegion[{{
                 Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 0.}, {
                 Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
                 0.}, {-Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 0.}, {-
                 Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
                 0.}, {
                 Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}, {
                 Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
                 Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
                 Part[$CellContext`ds$$, 5], 
                 Part[$CellContext`ds$$, 2]}}], Part[
                Part[
                 Last[$CellContext`timeStepLines3D$$], 1], 1] - {
              0.01, 0.01, 0}]], 
            Darker[
             GrayLevel[0.7], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
            Darker[
             Lighter[Magenta, 0.4], 0], Sort[
              Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
            Darker[
             Blend[{Yellow, Green}, 0.7], 
             0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
            Polygon[
             Part[
              Last[$CellContext`timeStepLines2D$$], 
              1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
            Polygon[
             Part[
              Last[$CellContext`timeStepLines3D$$], 1]]}; AppendTo[
           Part[$CellContext`plateCutsGraphics$$, 2], 
           Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
              Thickness[0.002], $CellContext`timeStepLines2D$$}, 
             Text["Time of first appearance = " <> ToString[
                NumberForm[
                 If[
                 Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
                  Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
              " hrs\nTime of growth completion = " <> ToString[
                NumberForm[$CellContext`t$$, {10, 2}]] <> 
              " hrs\nTime Intervals = " <> ToString[
                NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
              "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
              ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
              "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
              ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
              "\nCut Plane: " <> StringReplace[
                
                ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
                "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", 
                 "}" -> ")", "," -> " "}] <> "\nPlate Thickness = " <> 
              ToString[$CellContext`plateThickness$$] <> "\nCut Distance " <> 
              ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
               1, $CellContext`textY$$ + 1}]}, ImageSize -> 500, Axes -> True,
             PlotLabel -> 
            "Plate " <> ToString[$CellContext`j + 1] <> " Front Surface ", 
            AxesLabel -> {"(mm)", "(mm)"}]]; 
         Export[$CellContext`saveDirectory$$ <> "Plate " <> 
           ToString[$CellContext`j + 1] <> " Front Surface" <> ".jpeg", 
           Part[
            Part[$CellContext`plateCutsGraphics$$, 2], $CellContext`j]]; 
         AppendTo[
           Part[
            Part[$CellContext`plateCutsGraphics$$, 3], $CellContext`j], {
            Thickness[0.002], $CellContext`polygons$$}]; AppendTo[
           Part[
            
            Part[$CellContext`plateCutsGraphics$$, 
             3], $CellContext`j], $CellContext`timePolygon3D$$]; AppendTo[
           Part[
            Part[$CellContext`plateCutsGraphics$$, 3], $CellContext`j], {
            Thickness[
            0.005], $CellContext`timeStepLines3D$$}]; \
$CellContext`tempPlateFaces$$ = Most[
            Most[
             MeshPrimitives[
              RegionDifference[
               
               ConvexHullRegion[($CellContext`l0$$/(
                 2 $CellContext`L$$)) \
$CellContext`polyhedron[$CellContext`normals1$$, 
                  Append[
                   $CellContext`pts1[
                   False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], ($CellContext`cutPosition$$ + \
$CellContext`plateThickness$$) 2 $CellContext`L$$ $CellContext`n$$]][
                 "vertices"]], 
               
               ConvexHullRegion[($CellContext`l0$$/(
                 2 $CellContext`L$$)) \
$CellContext`polyhedron[$CellContext`normals1$$, 
                  Append[
                   $CellContext`pts1[
                   False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], $CellContext`cutPosition$$ 
                   2 $CellContext`L$$ $CellContext`n$$]]["vertices"]]], 2]]]; 
         AppendTo[
           Part[
            Part[$CellContext`plateCutsGraphics$$, 3], $CellContext`j], 
           Table[{
             Which[Chop[
                Sort[
                 Abs[
                  Normalize[
                   Cross[Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 3] - 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 1], 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 2] - 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 
                    1]]]]]] == {0, 0, 1}, 
              Darker[
               GrayLevel[0.7], 0], Chop[
                Sort[
                 Abs[
                  Normalize[
                   Cross[Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 3] - 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 1], 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 2] - 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 
                    1]]]]]] == Normalize[{0, 1, 1}], 
              Darker[
               Lighter[Magenta, 0.4], 0], Chop[
                Sort[
                 Abs[
                  Normalize[
                   Cross[Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 3] - 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 1], 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 2] - 
                    Part[
                    PolygonCoordinates[
                    Part[$CellContext`tempPlateFaces$$, $CellContext`i]], 
                    1]]]]]] == Normalize[{1, 1, 1}], 
              Darker[
               Blend[{Yellow, Green}, 0.7], 0]], 
             
             Part[$CellContext`tempPlateFaces$$, $CellContext`i]}, \
{$CellContext`i, 
             Length[$CellContext`tempPlateFaces$$]}]]; 
         Increment[$CellContext`numPlates$$]; Null, {$CellContext`j, 1, 
          
          Length[$CellContext`plateCutsDistances$$]}]; \
$CellContext`numPlates$$ = $CellContext`numPlates$$ + 
         2; $CellContext`cutPosition$$ = $CellContext`beginningCutPosition$$; \
$CellContext`timePolygon2D$$ = {}; If[
         And[
         Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
          Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
         Normalize[{0, 0, 1} - 
           Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
         If[
          Or[Abs[
             Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
           0], $CellContext`projX$$ = 
           Normalize[{0, 1, 0} - 
             Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
          Null, $CellContext`projX$$ = 
           Normalize[{1, 0, 0} - 
             Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
       If[Total[
           Cross[$CellContext`n$$, $CellContext`projX$$]] < 
         0, $CellContext`projY$$ = 
         Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
         Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
        Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
          ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
        1; $CellContext`timeStepLines$$ = Append[
          
          Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
       If[$CellContext`constantVelocity$$, 
         Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`polygons$$ = {}; $CellContext`poly$["vertices"] = {
             0}; $CellContext`i$ = 
            Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
             
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
              1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`polygons2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`polygons$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; Null]; 
           If[Last[$CellContext`polygons$$] == {}, 
             AppendTo[$CellContext`timeStepLines$$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                2]]; $CellContext`timeStepLines$$ = Sort[
                
                Select[$CellContext`timeStepLines$$, # >= 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
             Null]; Null]; 
         Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeStepLines$$] - 
             1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`L$$, 
               
               Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; While[
             
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
              1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; 
             Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`L$$, 
               
               Part[$CellContext`timeStepLines$$, 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
         Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
              And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1],
               Quiet[$CellContext`tempVelocity$ = 
                NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$\
 + $CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                 Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                 $CellContext`pts1[False, $CellContext`tempL$, 
                  
                  Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                 If[$CellContext`cutPosition$$ == 0, 
                   0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
              AppendTo[$CellContext`polygons2D$$, 
                ($CellContext`polygon3D[
                 Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                  Part[
                   #["vertices"], 
                   #["face"]]], 
                 #["colors"]]& )[$CellContext`poly$]]; 
              AppendTo[$CellContext`polygons$$, 
                 ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  #["colors"]]& )[$CellContext`poly$]] 
               Decrement[$CellContext`i$]; Null] 
            If[Last[$CellContext`polygons$$] == {}, 
              AppendTo[$CellContext`timeStepLines$$, 
                
                Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                 2]]; $CellContext`timeStepLines$$ = Sort[
                 
                 Select[$CellContext`timeStepLines$$, # >= 
                  Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
              Null]; Null]; 
         Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeStepLines$$] - 1; 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1]]; $CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; While[
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
                Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; Null]; 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeStepLines$$, 1]}]/
              Part[$CellContext`timeStepLines$$, 
               1]]; $CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeStepLines$$, 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]]; 
         Null]; $CellContext`textX$$ = Max[
          Part[
           Part[
            Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
           1]]; $CellContext`textY$$ = Max[
          Part[
           Part[
            Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
           2]]; $CellContext`timePolygonColor$$ = Which[
          Or[Sort[
             Abs[$CellContext`n$$]] == {0, 0, 1}, 
           RegionMember[
            ConvexHullRegion[{{
               Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 0.}, {
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
               0.}, {-Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 0.}, {-
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {
               Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}}], Part[
              Part[
               Last[$CellContext`timeStepLines3D$$], 1], 1] - {
            0.01, 0.01, 0}]], 
          Darker[
           GrayLevel[0.7], 0], Sort[
            Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
          Darker[
           Lighter[Magenta, 0.4], 0], Sort[
            Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
          Darker[
           Blend[{Yellow, Green}, 0.7], 
           0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
          Polygon[
           Part[
            Last[$CellContext`timeStepLines2D$$], 
            1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
          Polygon[
           Part[
            Last[$CellContext`timeStepLines3D$$], 1]]}; PrependTo[
         Part[$CellContext`plateCutsGraphics$$, 3], {{
           Thickness[
           0.002], $CellContext`polygons$$}, $CellContext`timePolygon3D$$, {
           Thickness[0.005], $CellContext`timeStepLines3D$$}}]; PrependTo[
         Part[$CellContext`plateCutsGraphics$$, 1], 
         Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
            Thickness[0.002], $CellContext`timeStepLines2D$$}, 
           Text["Time of first appearance = " <> ToString[
              NumberForm[
               If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
                Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
            " hrs\nTime of growth completion = " <> ToString[
              NumberForm[$CellContext`t$$, {10, 2}]] <> 
            " hrs\nTime Intervals = " <> ToString[
              NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
            "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
            ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
            "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
            ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
            "\nCut Plane: " <> StringReplace[
              
              ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
              "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
               ")", "," -> " "}] <> "\nPlate Thickness = " <> ToString[
              NumberForm[
               Abs[-Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
            "\nCut Distance " <> 
            ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
             1, $CellContext`textY$$ + 1}]}, Axes -> True, ImageSize -> 500, 
          PlotLabel -> "Plate 1 Front Surface", 
          AxesLabel -> {"(mm)", "(mm)"}]]; 
       Export[$CellContext`saveDirectory$$ <> "Plate " <> ToString[1] <> 
         " Front Surface" <> ".jpeg", 
         Part[
          Part[$CellContext`plateCutsGraphics$$, 1], 
          1]]; $CellContext`p1$$ = \
$CellContext`polyhedron[$CellContext`normals1$$, 
          Append[
           $CellContext`pts1[
           False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], $CellContext`cutPosition$$ 
           2 $CellContext`L$$ $CellContext`n$$]]; $CellContext`vertices1$$ = 
        If[
           Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
           1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) $CellContext`p1$$[
          "vertices"]; $CellContext`faces1$$ = $CellContext`p1$$["faces"]; 
       If[Flatten[
           Part[$CellContext`faces1$$, 
            Flatten[
             Position[$CellContext`normals$$, (1/Max[
                Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 
             2]]] != {}, $CellContext`lastSurface2D$$ = Map[If[
             And[
             Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 0], {
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[$CellContext`vertices1$$, 
             Flatten[
              Part[$CellContext`faces1$$, 
               Flatten[
                Position[$CellContext`normals$$, (1/Max[
                   Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 2]]]]]; 
         PrependTo[
           Part[$CellContext`plateCutsGraphics$$, 2], 
           Graphics[{{
              Which[Sort[
                 Abs[$CellContext`n$$]] == {0, 0, 1}, 
               Darker[
                GrayLevel[0.7], 0], Sort[
                 Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
               Darker[
                Lighter[Magenta, 0.4], 0], Sort[
                 Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
               Darker[
                Blend[{Yellow, Green}, 0.7], 0]], 
              Polygon[$CellContext`lastSurface2D$$]}, 
             Text["Time of first appearance = " <> ToString[
                 ToString[
                  NumberForm[$CellContext`t$$, {10, 2}]]] <> 
               " hrs\nTime of growth completion = " <> ToString[
                 NumberForm[$CellContext`t$$, {10, 2}]] <> " hrs" 
              "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
               ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
               "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
               ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
               "\nCut Plane: " <> StringReplace[
                 
                 ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
                 "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", 
                  "}" -> ")", "," -> " "}] <> "\nPlate Thickness = " <> 
               ToString[
                 NumberForm[
                  Abs[-Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
               "\nDistance = " <> ToString[
                 
                 NumberForm[-
                  Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[-$CellContext`n$$]]) (-$CellContext`n$$)], 2]]]], {10,
                   2}]], {Max[
                 Part[$CellContext`lastSurface2D$$, All, 1]] + 0.5, Max[
                 Part[$CellContext`lastSurface2D$$, All, 2]] + 1}]}, Axes -> 
            True, ImageSize -> 500, PlotLabel -> "Plate 1 Back Surface", 
            AxesLabel -> {"(mm)", "(mm)"}]], 
         PrependTo[
          Part[$CellContext`plateCutsGraphics$$, 2], 
          "Surface is point or line"]]; 
       Export[$CellContext`saveDirectory$$ <> "Plate " <> ToString[1] <> 
         " Back Surface" <> ".jpeg", 
         Part[
          Part[$CellContext`plateCutsGraphics$$, 2], 1]]; AppendTo[
         Part[
          Part[$CellContext`plateCutsGraphics$$, 3], 1], 
         Table[
          If[Part[$CellContext`faces1$$, $CellContext`i] != {}, {
            Block[{$CellContext`k = Total[
                Map[Abs, 
                 Part[$CellContext`normals1$$, $CellContext`i]]]}, 
             Switch[
              Part[
               Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
              Darker[
               GrayLevel[0.7], 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 1]]]], 2, 
              Darker[
               Lighter[Magenta, 0.4], 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 2]]]], 3, 
              Darker[
               Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 3]]]], 5, 
              Darker[Blue, 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 5]]]], 7, 
              Darker[Yellow, 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 7]]]]]], {
             EdgeForm[
              Thickness[Medium]], 
             Polygon[
              Part[$CellContext`vertices1$$, 
               
               Part[$CellContext`faces1$$, $CellContext`i]]]}}, {}], \
{$CellContext`i, 1, 
           Length[
            
            If[$CellContext`drawCutPlane$$, $CellContext`normals1$$, \
$CellContext`allNormals$$]]}]]; $CellContext`cutPosition$$ = 
        Last[$CellContext`plateCutsDistances$$] + $CellContext`cutLoss$$; \
$CellContext`timePolygon2D$$ = {}; If[
         And[
         Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
          Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
         Normalize[{0, 0, 1} - 
           Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
         If[
          Or[Abs[
             Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
           0], $CellContext`projX$$ = 
           Normalize[{0, 1, 0} - 
             Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
          Null, $CellContext`projX$$ = 
           Normalize[{1, 0, 0} - 
             Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
       If[Total[
           Cross[$CellContext`n$$, $CellContext`projX$$]] < 
         0, $CellContext`projY$$ = 
         Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
         Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
        Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
          ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
        1; $CellContext`timeStepLines$$ = Append[
          
          Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
       If[$CellContext`constantVelocity$$, 
         Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`polygons$$ = {}; $CellContext`poly$["vertices"] = {
             0}; $CellContext`i$ = 
            Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
             
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
              1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`polygons2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`polygons$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; Null]; 
           If[Last[$CellContext`polygons$$] == {}, 
             AppendTo[$CellContext`timeStepLines$$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                2]]; $CellContext`timeStepLines$$ = Sort[
                
                Select[$CellContext`timeStepLines$$, # >= 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
             Null]; Null]; 
         Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeStepLines$$] - 
             1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`L$$, 
               
               Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; While[
             
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
              1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; 
             Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`L$$, 
               
               Part[$CellContext`timeStepLines$$, 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
         Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
              And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1],
               Quiet[$CellContext`tempVelocity$ = 
                NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$\
 + $CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                 Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                 $CellContext`pts1[False, $CellContext`tempL$, 
                  
                  Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                 If[$CellContext`cutPosition$$ == 0, 
                   0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
              AppendTo[$CellContext`polygons2D$$, 
                ($CellContext`polygon3D[
                 Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                  Part[
                   #["vertices"], 
                   #["face"]]], 
                 #["colors"]]& )[$CellContext`poly$]]; 
              AppendTo[$CellContext`polygons$$, 
                 ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  #["colors"]]& )[$CellContext`poly$]] 
               Decrement[$CellContext`i$]; Null] 
            If[Last[$CellContext`polygons$$] == {}, 
              AppendTo[$CellContext`timeStepLines$$, 
                
                Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                 2]]; $CellContext`timeStepLines$$ = Sort[
                 
                 Select[$CellContext`timeStepLines$$, # >= 
                  Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
              Null]; Null]; 
         Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeStepLines$$] - 1; 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1]]; $CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; While[
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
                Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; Null]; 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeStepLines$$, 1]}]/
              Part[$CellContext`timeStepLines$$, 
               1]]; $CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeStepLines$$, 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]]; 
         Null]; $CellContext`textX$$ = Max[
          Part[
           Part[
            Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
           1]]; $CellContext`textY$$ = Max[
          Part[
           Part[
            Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
           2]]; $CellContext`timePolygonColor$$ = Which[
          Or[Sort[
             Abs[$CellContext`n$$]] == {0, 0, 1}, 
           RegionMember[
            ConvexHullRegion[{{
               Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 0.}, {
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
               0.}, {-Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 0.}, {-
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {
               Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}}], Part[
              Part[
               Last[$CellContext`timeStepLines3D$$], 1], 1] - {
            0.01, 0.01, 0}]], 
          Darker[
           GrayLevel[0.7], 0], Sort[
            Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
          Darker[
           Lighter[Magenta, 0.4], 0], Sort[
            Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
          Darker[
           Blend[{Yellow, Green}, 0.7], 
           0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
          Polygon[
           Part[
            Last[$CellContext`timeStepLines2D$$], 
            1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
          Polygon[
           Part[
            Last[$CellContext`timeStepLines3D$$], 1]]}; AppendTo[
         Part[$CellContext`plateCutsGraphics$$, 3], {{
           Thickness[
           0.002], $CellContext`polygons$$}, $CellContext`timePolygon3D$$, {
           Thickness[0.005], $CellContext`timeStepLines3D$$}}]; AppendTo[
         Part[$CellContext`plateCutsGraphics$$, 2], 
         Graphics[{$CellContext`polygons2D$$, $CellContext`timePolygon2D$$, {
            Thickness[0.002], $CellContext`timeStepLines2D$$}, 
           Text["Time of first appearance = " <> ToString[
              NumberForm[
               If[Min[$CellContext`timeStepLines$$] == $CellContext`tMin$$, 0, 
                Min[$CellContext`timeStepLines$$]], {10, 2}]] <> 
            " hrs\nTime of growth completion = " <> ToString[
              NumberForm[$CellContext`t$$, {10, 2}]] <> 
            " hrs\nTime Intervals = " <> ToString[
              NumberForm[$CellContext`timeStep$$, {10, 2}]] <> " hrs/step" <> 
            "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
            ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
            "\nCut Plane: " <> StringReplace[
              
              ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
              "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", "}" -> 
               ")", "," -> " "}] <> "\nPlate Thickness = " <> ToString[
              NumberForm[
               Abs[Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[$CellContext`n$$]]) $CellContext`n$$], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
            "\nCut Distance " <> 
            ToString[$CellContext`cutPosition$$], {$CellContext`textX$$ + 
             1, $CellContext`textY$$ + 1}]}, Axes -> True, ImageSize -> 500, 
          PlotLabel -> 
          "Plate " <> ToString[$CellContext`numPlates$$] <> " Front Surface ",
           AxesLabel -> {"(mm)", "(mm)"}]]; 
       Export[$CellContext`saveDirectory$$ <> "Plate " <> 
         ToString[$CellContext`numPlates$$] <> " Front Surface" <> ".jpeg", 
         Part[
          
          Part[$CellContext`plateCutsGraphics$$, 
           2], $CellContext`numPlates$$]]; $CellContext`p1$$ = \
$CellContext`polyhedron[
          Append[$CellContext`allNormals$$, -$CellContext`n$$], 
          Append[
           $CellContext`pts1[
           False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], (-$CellContext`cutPosition$$) 
           2 $CellContext`L$$ (-$CellContext`n$$)]]; $CellContext`vertices1$$ = 
        If[
           Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
           1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) $CellContext`p1$$[
          "vertices"]; $CellContext`faces1$$ = $CellContext`p1$$["faces"]; 
       If[Flatten[
           Part[$CellContext`faces1$$, 
            Flatten[
             Position[$CellContext`normals$$, (1/Max[
                Abs[$CellContext`n$$]]) $CellContext`n$$], 
             2]]] != {}, $CellContext`lastSurface2D$$ = Map[If[
             And[
             Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 0], {
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
              
              Dot[# - Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
            Part[$CellContext`vertices1$$, 
             Flatten[
              Part[$CellContext`faces1$$, 
               Flatten[
                Position[$CellContext`normals$$, (1/Max[
                   Abs[$CellContext`n$$]]) $CellContext`n$$], 2]]]]]; AppendTo[
           Part[$CellContext`plateCutsGraphics$$, 1], 
           Graphics[{{
              Which[Sort[
                 Abs[$CellContext`n$$]] == {0, 0, 1}, 
               Darker[
                GrayLevel[0.7], 0], Sort[
                 Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
               Darker[
                Lighter[Magenta, 0.4], 0], Sort[
                 Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
               Darker[
                Blend[{Yellow, Green}, 0.7], 0]], 
              Polygon[$CellContext`lastSurface2D$$]}, 
             Text["Time of first appearance = " <> ToString[
                ToString[
                 NumberForm[$CellContext`t$$, {10, 2}]]] <> 
              " hrs\nTime of growth completion = " <> ToString[
                NumberForm[$CellContext`t$$, {10, 2}]] <> " hrs" <> 
              "\n\[Alpha] = " <> ToString[$CellContext`\[Alpha]1$$] <> 
              ", \[Beta] = " <> ToString[$CellContext`\[Beta]1$$] <> 
              "\n\[Gamma] = " <> ToString[$CellContext`\[Gamma]1$$] <> 
              ", \[Delta] = " <> ToString[$CellContext`\[Delta]1$$] <> 
              "\nCut Plane: " <> StringReplace[
                
                ToString[{$CellContext`n1$$, $CellContext`n2$$, \
$CellContext`n3$$}], {
                "-1" -> "\!\(\*OverscriptBox[\(1\), \(_\)]\)", "{" -> "(", 
                 "}" -> ")", "," -> " "}] <> "\nPlate Thickness = " <> 
              ToString[
                NumberForm[
                 Abs[Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[$CellContext`n$$]]) $CellContext`n$$], 
                    2]]]] - $CellContext`cutPosition$$], {10, 2}]] <> 
              "\nDistance = " <> ToString[
                NumberForm[
                 Norm[(1/(2 $CellContext`L$$)) $CellContext`l0$$ Flatten[
                    Part[$CellContext`pts$$, 
                    Flatten[
                    Position[$CellContext`normals$$, (1/Max[
                    Abs[$CellContext`n$$]]) $CellContext`n$$], 2]]]], {10, 
                 2}]], {Max[
                 Part[$CellContext`lastSurface2D$$, All, 1]] + 0.5, Max[
                 Part[$CellContext`lastSurface2D$$, All, 2]] + 1}]}, Axes -> 
            True, ImageSize -> 500, PlotLabel -> 
            "Plate " <> ToString[$CellContext`numPlates$$] <> 
             " Back Surface ", AxesLabel -> {"(mm)", "(mm)"}]], 
         AppendTo[
          Part[$CellContext`plateCutsGraphics$$, 1], 
          "Surface is point or line"]]; 
       Export[$CellContext`saveDirectory$$ <> "Plate " <> 
         ToString[$CellContext`numPlates$$] <> " Back Surface" <> ".jpeg", 
         Part[
          
          Part[$CellContext`plateCutsGraphics$$, 
           1], $CellContext`numPlates$$]]; AppendTo[
         Part[
          Part[$CellContext`plateCutsGraphics$$, 3], 
          Length[
           Part[$CellContext`plateCutsGraphics$$, 3]]], 
         Table[
          If[Part[$CellContext`faces1$$, $CellContext`i] != {}, {
            Block[{$CellContext`k = Total[
                Map[Abs, 
                 Part[$CellContext`normals1$$, $CellContext`i]]]}, 
             Switch[
              Part[
               Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
              Darker[
               GrayLevel[0.7], 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 1]]]], 2, 
              Darker[
               Lighter[Magenta, 0.4], 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 2]]]], 3, 
              Darker[
               Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 3]]]], 5, 
              Darker[Blue, 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 5]]]], 7, 
              Darker[Yellow, 0.5 Abs[
                 Sign[
                  Chop[$CellContext`k - 7]]]]]], {
             EdgeForm[
              Thickness[Medium]], 
             Polygon[
              Part[$CellContext`vertices1$$, 
               
               Part[$CellContext`faces1$$, $CellContext`i]]]}}, {}], \
{$CellContext`i, 1, 
           Length[
            
            If[$CellContext`drawCutPlane$$, $CellContext`normals1$$, \
$CellContext`allNormals$$]]}]]; 
       Part[$CellContext`plateCutsGraphics$$, 3] = 
        Map[Graphics3D[#, Axes -> $CellContext`boxed$$, 
           AxesLabel -> {"x", "y", "z"}, Lighting -> "Neutral", 
           ImageSize -> {500, 500}]& , 
          Part[$CellContext`plateCutsGraphics$$, 3]]; 
       Null]; $CellContext`calcSection$$ = 
     Hold[$CellContext`timePolygon2D$$ = {}; $CellContext`n$$ = 
        Normalize[$CellContext`n$$]; If[
         And[
         Part[$CellContext`n$$, 1] != 0, Part[$CellContext`n$$, 2] != 0, 
          Part[$CellContext`n$$, 3] != 0], $CellContext`projX$$ = 
         Normalize[{0, 0, 1} - 
           Dot[{0, 0, 1}, $CellContext`n$$] $CellContext`n$$], 
         If[
          Or[Abs[
             Part[$CellContext`n$$, 1]] == 1, Part[$CellContext`n$$, 3] != 
           0], $CellContext`projX$$ = 
           Normalize[{0, 1, 0} - 
             Dot[{0, 1, 0}, $CellContext`n$$] $CellContext`n$$]; 
          Null, $CellContext`projX$$ = 
           Normalize[{1, 0, 0} - 
             Dot[{1, 0, 0}, $CellContext`n$$] $CellContext`n$$]; Null]]; 
       If[Total[
           Cross[$CellContext`n$$, $CellContext`projX$$]] < 
         0, $CellContext`projY$$ = 
         Cross[$CellContext`projX$$, $CellContext`n$$], $CellContext`projY$$ = 
         Cross[$CellContext`n$$, $CellContext`projX$$]]; \
$CellContext`timeGrid1$$ = 
        Range[$CellContext`tMin$$, $CellContext`t$$, ($CellContext`t$$ - \
$CellContext`tMin$$)/
          ControlActive[$CellContext`previewNum$$, $CellContext`Num$$]]; \
$CellContext`textX$$ = 1; $CellContext`textY$$ = 
        1; $CellContext`timeStepLines$$ = Append[
          
          Range[$CellContext`tMin$$, $CellContext`t$$, \
$CellContext`timeStep$$], $CellContext`t$$]; $CellContext`timingTest$$ = {}; 
       If[$CellContext`constantVelocity$$, 
         Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`polygons$$ = {}; $CellContext`poly$["vertices"] = {
             0}; $CellContext`i$ = 
            Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
             
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 
              1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`polygons2D$$, 
               ($CellContext`polygon3D[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`polygons$$, 
               ($CellContext`polygon3D[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                #["colors"]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; Null]; 
           If[Last[$CellContext`polygons$$] == {}, 
             AppendTo[$CellContext`timeStepLines$$, 
               
               Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                2]]; $CellContext`timeStepLines$$ = Sort[
                
                Select[$CellContext`timeStepLines$$, # >= 
                 Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
             Null]; Null]; 
         Module[{$CellContext`i$, $CellContext`poly$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeStepLines$$] - 
             1; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`L$$, 
               
               Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; While[
             
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 
              1], $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`L$$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; 
             Null]; $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`L$$, 
               
               Part[$CellContext`timeStepLines$$, 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`L$$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]]; Null, 
         Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, $CellContext`polygons$$ = \
{}; $CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeGrid1$$]; $CellContext`polygons2D$$ = {}; \
$CellContext`Llist$$ = {}; $CellContext`timingTest$$ = {}; While[
              And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ >= 1],
               Quiet[$CellContext`tempVelocity$ = 
                NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$\
 + $CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                    Part[$CellContext`timeGrid1$$, $CellContext`i$]}]/
                 Part[$CellContext`timeGrid1$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
                2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                 $CellContext`pts1[False, $CellContext`tempL$, 
                  
                  Part[$CellContext`timeGrid1$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                 If[$CellContext`cutPosition$$ == 0, 
                   0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
              AppendTo[$CellContext`polygons2D$$, 
                ($CellContext`polygon3D[
                 Map[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                    And[
                    Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                  Part[
                   #["vertices"], 
                   #["face"]]], 
                 #["colors"]]& )[$CellContext`poly$]]; 
              AppendTo[$CellContext`polygons$$, 
                 ($CellContext`polygon3D[If[
                    Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                    1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                    #["vertices"], 
                    #["face"]], 
                  #["colors"]]& )[$CellContext`poly$]] 
               Decrement[$CellContext`i$]; Null] 
            If[Last[$CellContext`polygons$$] == {}, 
              AppendTo[$CellContext`timeStepLines$$, 
                
                Part[$CellContext`timeGrid1$$, $CellContext`i$ + 
                 2]]; $CellContext`timeStepLines$$ = Sort[
                 
                 Select[$CellContext`timeStepLines$$, # >= 
                  Part[$CellContext`timeGrid1$$, $CellContext`i$ + 2]& ]]; 
              Null]; Null]; 
         Module[{$CellContext`i$, $CellContext`poly$, \
$CellContext`tempVelocity$, $CellContext`tempL$}, \
$CellContext`timeStepLines2D$$ = {}; $CellContext`timeStepLines3D$$ = {}; \
$CellContext`poly$["vertices"] = {0}; $CellContext`i$ = 
            Length[$CellContext`timeStepLines$$] - 1; 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$ + 1]}]/
              Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
               1]]; $CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeStepLines$$, $CellContext`i$ + 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; While[
             And[$CellContext`poly$["vertices"] != {}, $CellContext`i$ > 1], 
             Quiet[$CellContext`tempVelocity$ = 
               NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                   Part[$CellContext`timeStepLines$$, $CellContext`i$]}]/
                Part[$CellContext`timeStepLines$$, $CellContext`i$]]; \
$CellContext`tempL$ = $CellContext`l0$$/(
               2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
                $CellContext`pts1[False, $CellContext`tempL$, 
                 
                 Part[$CellContext`timeStepLines$$, $CellContext`i$], \
$CellContext`allNormals$$], 
                If[$CellContext`cutPosition$$ == 0, 
                  0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
             AppendTo[$CellContext`timeStepLines2D$$, 
               ($CellContext`polygon[
                Map[If[
                   Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                   1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                   And[
                   Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                    0], {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                    
                    Dot[# - 
                    Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
                 Part[
                  #["vertices"], 
                  #["face"]]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             AppendTo[$CellContext`timeStepLines3D$$, 
               ($CellContext`polygon[If[
                  Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                  1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                  #["vertices"], 
                  #["face"]], 
                ConstantArray[0, 
                 Length[
                  #["colors"]]]]& )[$CellContext`poly$]]; 
             Decrement[$CellContext`i$]; Null]; 
           Quiet[$CellContext`tempVelocity$ = 
             NIntegrate[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 10^(-3), {$CellContext`x, 0, 
                 Part[$CellContext`timeStepLines$$, 1]}]/
              Part[$CellContext`timeStepLines$$, 
               1]]; $CellContext`tempL$ = $CellContext`l0$$/(
             2 $CellContext`tempVelocity$); $CellContext`poly$ = \
$CellContext`polyhedron2[$CellContext`normals1$$, 
              $CellContext`pts1[False, $CellContext`tempL$, 
               
               Part[$CellContext`timeStepLines$$, 
                1], $CellContext`allNormals$$], 
              If[$CellContext`cutPosition$$ == 0, 
                0.0001, $CellContext`cutPosition$$] 2 $CellContext`tempL$]; 
           AppendTo[$CellContext`timeStepLines2D$$, 
             ($CellContext`polygon3D[
              Map[If[
                 Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                 1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) If[
                 And[
                 Part[$CellContext`n$$, 3] != 0, Part[$CellContext`n$$, 2] != 
                  0], {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$]}, {
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projX$$], 
                  
                  Dot[# - 
                   Dot[#, $CellContext`n$$] $CellContext`n$$, \
$CellContext`projY$$]}]& , 
               Part[
                #["vertices"], 
                #["face"]]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]; 
           AppendTo[$CellContext`timeStepLines3D$$, 
             ($CellContext`polygon3D[If[
                Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
                1, $CellContext`l0$$] (1/(2 $CellContext`tempL$)) Part[
                #["vertices"], 
                #["face"]], 
              ConstantArray[0, 
               Length[
                #["colors"]]]]& )[$CellContext`poly$]]]; 
         Null]; $CellContext`textX$$ = Max[
          Part[
           Part[
            Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
           1]]; $CellContext`textY$$ = Max[
          Part[
           Part[
            Part[$CellContext`timeStepLines2D$$, 1], 1], All, 
           2]]; $CellContext`timePolygonColor$$ = Which[
          Or[Sort[
             Abs[$CellContext`n$$]] == {0, 0, 1}, 
           RegionMember[
            ConvexHullRegion[{{
               Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 0.}, {
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
               0.}, {-Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 0.}, {-
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 0.}, {
               Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {
               Part[$CellContext`ds$$, 3], -Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], 
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}, {-Part[$CellContext`ds$$, 3], -
               Part[$CellContext`ds$$, 5], 
               Part[$CellContext`ds$$, 2]}}], Part[
              Part[
               Last[$CellContext`timeStepLines3D$$], 1], 1] - {
            0.01, 0.01, 0}]], 
          Darker[
           GrayLevel[0.7], 0], Sort[
            Abs[$CellContext`n$$]] == Normalize[{0, 1, 1}], 
          Darker[
           Lighter[Magenta, 0.4], 0], Sort[
            Abs[$CellContext`n$$]] == Normalize[{1, 1, 1}], 
          Darker[
           Blend[{Yellow, Green}, 0.7], 
           0]]; $CellContext`timePolygon2D$$ = \
{$CellContext`timePolygonColor$$, 
          Polygon[
           Part[
            Last[$CellContext`timeStepLines2D$$], 
            1]]}; $CellContext`timePolygon3D$$ = \
{$CellContext`timePolygonColor$$, 
          Polygon[
           Part[
            Last[$CellContext`timeStepLines3D$$], 1]]}; 
       Null]; $CellContext`calcCutOn$$ = 
     Hold[ReleaseHold[$CellContext`calcCutOff$$]; $CellContext`velocityPlot$$ = 
        Plot[($CellContext`velocityA$$/($CellContext`velocityC$$ + \
$CellContext`x)^$CellContext`velocityB$$) 
          10^(-3), {$CellContext`x, 0, $CellContext`t$$}, 
          AxesLabel -> {
           "time (hr)", "Growth Velocity (mm/hr)"}]; $CellContext`normals1$$ = 
        Append[$CellContext`allNormals$$, $CellContext`n$$]; \
$CellContext`p1$$ = $CellContext`polyhedron[$CellContext`normals1$$, 
          Append[
           $CellContext`pts1[
           False, $CellContext`L$$, $CellContext`t$$, \
$CellContext`allNormals$$], $CellContext`cutPosition$$ 
           2 $CellContext`L$$ $CellContext`n$$]]; $CellContext`vertices1$$ = 
        If[
           Or[$CellContext`relativeOn$$, $CellContext`infty$$], 
           1, $CellContext`l0$$] (1/(2 $CellContext`L$$)) $CellContext`p1$$[
          "vertices"]; $CellContext`faces1$$ = $CellContext`p1$$[
         "faces"]; $CellContext`v1$$ = 
        Length[$CellContext`vertices1$$]; $CellContext`f1$$ = Count[
          $CellContext`p1$$["faces"], 
          
          Except[{}]]; $CellContext`e1$$ = $CellContext`v1$$ + \
$CellContext`f1$$ - 2; $CellContext`type$$ = StringJoin[
          Map["(" <> StringJoin[
             Map[ToString, #]] <> ")"& , 
           DeleteDuplicates[
            Map[Sort[#, Greater]& , 
             Map[Abs, 
              Map[Part[
                Nearest[$CellContext`normals$$, #], 1]& , 
               Extract[$CellContext`allNormals$$, 
                Rest[
                 Position[$CellContext`faces$$, 
                  Except[{}], 1]]]]]]]]]; $CellContext`info$$ = 
        ToString[$CellContext`f1$$] <> " Faces, " <> 
         ToString[$CellContext`e1$$] <> " Edges, " <> 
         ToString[$CellContext`v1$$] <> 
         " Vertices."; $CellContext`polyGraphics$$ = Graphics3D[{
           Specularity[0.5, 6], 
           GraphicsComplex[$CellContext`vertices1$$, {
             Dynamic[
              Opacity[$CellContext`opacity$$]], 
             Dynamic[
              Table[
               If[Part[$CellContext`faces1$$, $CellContext`i] != {}, {
                 Block[{$CellContext`k = Total[
                    Map[Abs, 
                    Part[$CellContext`normals1$$, $CellContext`i]]]}, 
                  Switch[
                   Part[
                    Nearest[{1, 2, 3, 5, 7}, $CellContext`k, 1], 1], 1, 
                   Darker[
                    GrayLevel[0.7], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 1]]]], 2, 
                   Darker[
                    Lighter[Magenta, 0.4], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 2]]]], 3, 
                   Darker[
                    Blend[{Yellow, Green}, 0.7], 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 3]]]], 5, 
                   Darker[Blue, 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 5]]]], 7, 
                   Darker[Yellow, 0.5 Abs[
                    Sign[
                    Chop[$CellContext`k - 7]]]]]], {
                  EdgeForm[
                   Thickness[Medium]], 
                  Polygon[
                   
                   Part[$CellContext`faces1$$, $CellContext`i]]}}, {}], \
{$CellContext`i, 1, 
                Length[
                 
                 If[$CellContext`drawCutPlane$$, $CellContext`normals1$$, \
$CellContext`allNormals$$]]}]], 
             PointSize[0.015], Red, 
             Opacity[1], 
             Dynamic[
              If[$CellContext`hideVertices$$, {}, 
               Point[
                Range[$CellContext`v$$]]]]}]}, Axes -> True, 
          AxesLabel -> {"x", "y", "z"}]; 
       ReleaseHold[$CellContext`calcSection$$]]; Null)],
  StripOnInput->False,
  DynamicUpdating->True,
  DynamicEvaluationTimeout->DirectedInfinity[1]]], "Output",
 CellChangeTimes->{
  3.9207423038361683`*^9, {3.9207423362773924`*^9, 3.920742337826518*^9}},
 CellLabel->"Out[1]=",ExpressionUUID->"c3065c60-cde1-48c3-b90a-e26ef7796851"]
},
WindowSize->{1141.2, 568.8},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>0.7 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"ce7af111-67a1-4ca6-9b9b-eda91fd9131f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[1488, 33, 1300235, 23927, 4430, "Output",ExpressionUUID->"c3065c60-cde1-48c3-b90a-e26ef7796851"]
}
]
*)

(* End of internal cache information *)

(* NotebookSignature 4wpjqq6huxmmtBKIULiE3V3D *)
